!function(e,t){for(var i in t)e[i]=t[i]}(exports,function(e){var t={};function i(s){if(t[s])return t[s].exports;var n=t[s]={i:s,l:!1,exports:{}};return e[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}return i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(s,n,function(t){return e[t]}.bind(null,n));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=106)}([function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(1),n=i(12),r=i(36),o=i(16),a=i(5),l=i(6);function u(e,t){if(e)return h(e,t)}function h(e,t,i){let u,_;return e.drawable?(_=new e.drawable,u=_.base):u=function(e){let t,i=e.type||"div";t=e.namespace?document.createElementNS(e.namespace,i):document.createElement(i);return t}(e),i||(i=h),function(e,t,i,s){t.id&&e.setAttribute("id",t.id);t.key&&i&&(i[t.key]=s||e)}(u,e,t,_),function(e,t){if(!t.cls)return;"string"==typeof t.cls?s.addClass(e,t.cls):"object"==typeof t.cls&&a.map(t.cls,(t,i)=>{n.createClass(i,t),s.addClass(e,i)})}(u,e),function(e,t){t.attr||(t.attr={});d(t)&&(t.focusable=!0);(function(e){if(!d(e))return!1;if(e.attr.tabIndex)return!1;return!0})(t)&&(t.attr.tabindex=0);a.map(t.attr,(t,i)=>{if(!l.isNullOrUndefined(t))if(t.key){let i=t;c(e,i.key,i.val)}else c(e,i,t)})}(u,e),function(e,t){if(!t.style)return;a.map(t.style,(t,i)=>{e.style[i]=t})}(u,e),function(e,t){if(!t.eventListeners)return;if(t.focusable&&t.eventListeners.click&&!t.eventListeners.keypress){let i=t.eventListeners.click;t.eventListeners.keypress=e=>{13!==e.keyCode&&32!==e.keyCode||(i(e),e.preventDefault())};let s=!1;t.eventListeners.mousedown=t=>{s=!0,e.blur()},t.eventListeners.mouseup=e=>{s=!1},t.eventListeners.focus=t=>{if(s)return t.preventDefault(),e.blur(),!1}}a.map(t.eventListeners,(t,i)=>{e.addEventListener(i,t)})}(u,e),function(e,t){if(!t.tooltip);}(0,e),function(e,t){t.before_content&&(e.innerHTML=t.before_content);t.content&&(e.innerHTML+=t.content);t.boundContent&&(e.innerHTML=r.bind(t.boundContent,t=>{e.innerHTML=t}))}(u,e),function(e,t,i,s){if(!t.children)return;for(let n of t.children)if(n)if(o.isDrawable(n))n.draw(e);else if(n.setAttribute)e.appendChild(n);else{let r=n;t.namespace&&(r.namespace=t.namespace);let o=s(r,i);e.appendChild(o)}else console.warn("cannot append non-existent child element")}(u,e,t,i),function(e,t){if(!e.after_content)return;t.innerHTML+=e.after_content}(e,u),function(e,t){if(!e.parent)return;e.parent.appendChild(t)}(e,u),u}function d(e){return l.isNullOrUndefined(e.focusable)?!!e.eventListeners&&!!e.eventListeners.click:e.focusable}function c(e,t,i){switch(t){case"value":e.value=i;break;default:e.setAttribute(t,i)}}t.createSimpleElement=function(e,t,i,s,n,r){let o;return o={},o.id=e,o.type="div",o.content=i,o.cls=t,o.attr=s,o.children=n,o.parent=r,u(o)},t.createElement=u,t.createCustomElement=function(e,t,i){if(e)return h(e,t,i)},t.createSVGElement=function(e,t){if(e)return e.namespace||(e.namespace="http://www.w3.org/2000/svg"),h(e,t)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(7),n=i(16);function r(e,t,i){let s,n,r;for(n in r=document.getElementsByTagName("style"),i||r.length>0?s=r[0]:(s=document.createElement("style"),s.innerHTML=""),s.innerHTML+="\n"+e+" {\n",t)t.hasOwnProperty(n)&&(t[n].key?s.innerHTML+="\t"+t[n].key+": "+t[n].val+";\n":s.innerHTML+="\t"+n+" : "+t[n]+";\n");return s.innerHTML+="\n}",i||document.head.appendChild(s),s}t.addClass=function(e,t){let i,r;e&&t&&(r=n.isDrawable(e)?e.base:e,i=r.getAttribute("class"),i?(i=" "+i+" ",-1===i.indexOf(" "+t+" ")&&(i+=t,r.setAttribute("class",s.trim(i)))):r.setAttribute("class",t))},t.removeClass=function(e,t){let i,r,o;e&&t&&(o=n.isDrawable(e)?e.base:e,i=" "+o.getAttribute("class")+" ",r=i.length,i=i.replace(" "+t+" "," "),i.length!==r&&o.setAttribute("class",s.trim(i)))},t.hasClass=function(e,t){let i,s;if(e)return i=n.isDrawable(e)?e.base:e,s=" "+i.getAttribute("class")+" ",-1!==s.indexOf(" "+t+" ")},t.setProperty=function(e,t,i,s){let n,r,o,a,l;for(o=0;o<document.styleSheets.length;o+=1)if(r=document.all?"rules":"cssRules",a=document.styleSheets[o][r],a)for(n=0;n<a.length;n+=1)if(l=a[n],l.selectorText===e&&(l.style[t]||s))return l.style[t]=i,!0;return!1},t.getProperty=function(e,t){let i,s,n,r,o;for(n=0;n<document.styleSheets.length;n+=1)if(s=document.all?"rules":"cssRules",r=document.styleSheets[n][s],r)for(i=0;i<r.length;i+=1)if(o=r[i],o.selectorText===e)return o.style[t];return""},t.oldCreateClass=r,t.getComputedStyle=function(e,t){let i,s;return s=void 0!==e.draw?e.base:e,window.getComputedStyle?(i=window.getComputedStyle(s),t?i.getPropertyValue(t):i):s.currentStyle?(i=s.currentStyle,t?i[t]:i):null},t.addHiddenClass=function(){let e;e={display:"none"},r(".hidden",e)},t.addUnselectableClass=function(){let e;return e={"user-select":"none","-moz-user-select":"none","-webkit-user-select":"none","khtml-user-select":"none","o-user-select":"none"},r(".unselectable",e,!0)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(56),n=i(0);class r extends s.Stylable{constructor(e){super(),this._addClassName("Drawable"),this._elems={},e&&(this._elems.base=n.createElement(e)),this._shouldSkipCreateElements()||(this._createElements(),window.setTimeout(()=>{this._registerMediaListeners()},100))}get base(){return this._elems.base}_registerMediaListener(e,t){this._elems&&(super._registerMediaListener(e,t,this._elems.base),super._registerMediaListener(e,t,document.body))}_createElement(e){return n.createElement(e,this._elems)}_elem(e){return this._createElement(e)}_shouldSkipCreateElements(){return!1}draw(e,t){this._elems&&this._elems.base&&(this._hasCreatedStyles?(this._refresh(),this._parent=e||this._parent,this._parent&&(this._drawBase(),this._afterDraw())):window.setTimeout(()=>{this.draw(e,t)},0))}_drawBase(e){let t=this._elems.base;if(e||!t.parentNode){if(e&&t.parentNode&&t.parentNode.removeChild(t),!this._parent)return;this._parent.appendChild(t)}}erase(){let e=this._elems.base;e&&e.parentNode&&e.parentNode.removeChild(e)}_refresh(){}_afterDraw(){}_onResize(){}addEventListener(e,t){this._elems.base.addEventListener(e,t)}}t.Drawable=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.TEXT=1]="TEXT",e[e.NUMBER=2]="NUMBER",e[e.DATE=3]="DATE",e[e.TIME=4]="TIME",e[e.DATE_TIME=5]="DATE_TIME",e[e.SELECT=6]="SELECT",e[e.CHECKBOX=7]="CHECKBOX",e[e.TEXTAREA=8]="TEXTAREA",e[e.ARRAY=9]="ARRAY",e[e.ARRAY_CHILD=10]="ARRAY_CHILD",e[e.TOGGLE_BUTTON=11]="TOGGLE_BUTTON",e[e.CUSTOM=12]="CUSTOM",e[e.SECTION=13]="SECTION",e[e.HIDDEN=14]="HIDDEN",e[e.FILE_UPLOAD=15]="FILE_UPLOAD",e[e.FILE_PATH=16]="FILE_PATH",e[e.COLOR=17]="COLOR",e[e.PERCENTAGE=18]="PERCENTAGE",e[e.PASSWORD=19]="PASSWORD"}(t.FieldTypeEnum||(t.FieldTypeEnum={})),function(e){e[e.KEEP_ERROR_VALUE=1]="KEEP_ERROR_VALUE",e[e.RESTORE_OLD_VALUE=2]="RESTORE_OLD_VALUE",e[e.CLEAR_ERROR_VALUE=3]="CLEAR_ERROR_VALUE",e[e.NO_BLUR_PROCESSED=4]="NO_BLUR_PROCESSED"}(t.ValidationType||(t.ValidationType={})),function(e){e[e.MULTILINE=0]="MULTILINE",e[e.TABLE=1]="TABLE",e[e.FLEX=2]="FLEX",e[e.LABEL_AFTER=3]="LABEL_AFTER"}(t.FormElementLayoutEnum||(t.FormElementLayoutEnum={})),function(e){e[e.EMBEDDED=1]="EMBEDDED",e[e.POPUP=2]="POPUP",e[e.INLINE=3]="INLINE",e[e.FULLSCREEN=4]="FULLSCREEN"}(t.FormStyleOptions||(t.FormStyleOptions={}))},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function o(e){try{l(s.next(e))}catch(e){r(e)}}function a(e){try{l(s.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}l((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(3),r=i(2),o=i(6),a=i(1),l=i(74),u=i(19),h=i(0),d=i(75),c=i(14),_=i(12),p=i(24),m=i(8),f=i(11);class g extends r.Drawable{constructor(e,t){super(),this._standardCls="kipFormElem",this._addClassName("FormElement"),this._id=e,this._hasErrors=!1,m.isField(t)?this._parseFieldTemplate(t.template):this._parseFieldTemplate(t),this._createElements()}get id(){return this._id}get type(){return this._type}get template(){return this._config}get _defaultLayout(){return n.FormElementLayoutEnum.MULTILINE}get data(){return this._data}set data(e){this.update(e,!1)}get hasErrors(){return this._hasErrors}get input(){return this._elems.input?this._elems.input:null}get _labelElem(){return this._elems.lblContainer||this._elems.lbl}_shouldSkipCreateElements(){return!0}_parseFieldTemplate(e){o.isNullOrUndefined(e)&&(e={}),this._config=e,e.label||(e.label=this._id),e.layout||(e.layout=this._defaultLayout),e.defaultValue||(e.defaultValue=this._defaultValue),o.isNullOrUndefined(e.value)&&(e.value=e.defaultValue),o.isNullOrUndefined(e.validationType)&&(e.validationType=n.ValidationType.KEEP_ERROR_VALUE),this._processTemplateClass(),this._processRequiredElement(),this._registerOnOtherChangeListener(),this._data=e.defaultValue}_processTemplateClass(){let e=this._config;e.cls=_.buildClassString(this._standardCls,this._defaultCls,e.cls,e.required?"required":"")}_processRequiredElement(){this._config.required&&(this._data||p.formEventHandler.dispatchEvent(p.FORM_SAVABLE_CHANGE,new p.FormSavableEvent({hasErrors:!1,hasMissingRequired:!0})))}_registerOnOtherChangeListener(){this._config.onOtherChange&&p.formEventHandler.addEventListener(p.FORM_ELEM_CHANGE,{func:e=>{this._handleOtherChange(e)}})}_createElements(){h.createElement({cls:this._config.cls,key:"base",children:[{cls:"error",key:"error"}]},this._elems),this._onCreateElements(),this._elems.input&&this._registerInputListeners(this._elems.input),this._createStyles(),a.hasClass(this._elems.base,"hidden")&&(this._isHidden=!0)}_registerInputListeners(e){e.addEventListener("input",()=>{this._changeEventFired(!0)}),e.addEventListener("change",()=>{this._changeEventFired()})}_addStandardElemsToCore(){this._elems.base.appendChild(this._labelElem),this._elems.base.appendChild(this._elems.input)}_handleStandardLayout(){let e=n.FormElementLayoutEnum;switch(this._config.layout){case e.TABLE:return this._tableLayout(),!0;case e.FLEX:return this._flexLayout(),!0;case e.MULTILINE:return this._multiLineLayout(),!0;case e.LABEL_AFTER:return this._labelAfterLayout(),!0}return!1}_tableLayout(){let e=[];for(var t=0;t<2;t+=1){let i=h.createElement({type:"td",cls:"frmCel"});e[t]=i}this._labelElem&&e[0].appendChild(this._labelElem),this._elems.input&&e[1].appendChild(this._elems.input),this._elems.table=l.createTable("","",e),this._elems.base.appendChild(this._elems.table)}_flexLayout(){this._addStandardElemsToCore(),a.addClass(this._elems.base,"flex")}_multiLineLayout(){this._addStandardElemsToCore(),a.addClass(this._elems.base,"multiline")}_labelAfterLayout(){this._elems.base.appendChild(this._elems.input),this._elems.base.appendChild(this._labelElem)}save(e){return s(this,void 0,void 0,(function*(){return this._data}))}canSave(){return{hasErrors:this._hasErrors,hasMissingRequired:this._hasBlankRequiredElems()}}_hasBlankRequiredElems(){return!!this._config.required&&this._data===this._config.defaultValue}update(e,t){!this._testEquality(e)&&t&&window.setTimeout(()=>{this._dispatchChangeEvent()},0),this.clear(),o.isNullOrUndefined(e)&&(e=this._config.defaultValue),this._data=e,this._updateUI(e)}_testEquality(e){return u.equals(e,this._data)}_updateUI(e){this._elems.input&&(this._elems.input.value=e)}clear(){this._data=this._config.defaultValue,this._clearUI()}_clearUI(){this._elems.input&&(this._elems.input.value=this._config.defaultValue)}focus(){return!!this._elems.input&&(this._elems.input.focus(),!0)}_dispatchSavableChangeEvent(){p.formEventHandler.dispatchEvent(p.FORM_SAVABLE_CHANGE,new p.FormSavableEvent({target:this}))}_dispatchChangeEvent(e){p.formEventHandler.dispatchEvent(p.FORM_ELEM_CHANGE,new p.FormElemChangeEvent({key:this._id,subkey:e,data:this._data,target:this}))}_handleOtherChange(e){this._config.onOtherChange&&this._config.onOtherChange(e.context.key,e.context.data,this)}_changeEventFired(e){if(this._clearErrors(),e&&!this._shouldValidateBeforeBlur())return;f.wait(0).then(()=>this._dispatchSavableChangeEvent());let t=this._getValueFromField(e);this._testEquality(t)||this._validate(t)&&this._dispatchChangeEvent()}_shouldValidateBeforeBlur(){return!0}_validate(e){let t={title:"",details:""};return this._runValidation(e,t)?(this._data=e,!0):(this._onValidationError(t),!1)}_runValidation(e,t){return this._config.onValidate&&!this._config.onValidate(e,t)?(this._hasErrors=!0,!1):(this._hasErrors=!1,!0)}_onValidationError(e){this._updateErrorElem(e),this._updateInputOnError()}_updateErrorElem(e){if(!this._elems.error)return;let t=this._buildValidationErrorDisplay(e);this._elems.error.innerHTML=t}_updateInputOnError(){if(!this._elems.input)return;let e;switch(this._config.validationType){case n.ValidationType.CLEAR_ERROR_VALUE:e=this._config.defaultValue;break;case n.ValidationType.KEEP_ERROR_VALUE:e=this._elems.input.value;break;case n.ValidationType.NO_BLUR_PROCESSED:e=this._elems.input.value,window.setTimeout(()=>{this._elems.input.focus()},10);break;case n.ValidationType.RESTORE_OLD_VALUE:e=this._data;break;default:e=this._config.defaultValue}this._elems.input.value=e}_buildValidationErrorDisplay(e){if(!e)return"Invalid data";let t;return t=e.title?e.title+": ":"Uh-oh: ",t+=e.details||this._id+"'s data couldn't be saved",t}_clearErrors(){this._elems.error&&(this._elems.error.innerHTML="")}_createStandardInput(){let e={};this._config.useGhostText&&(e.placeholder=this._config.label),this._elems.input=m.createInputElement(this._id+"|input","input",n.FieldTypeEnum[this.type],this._data,e)}_createStandardLabel(e){let t=this._config.label;if(this._config.useGhostText&&(t=""),this._elems.lblContainer=h.createElement({cls:"labelContainer",parent:e}),this._elems.lbl=m.createLabelForInput(t,this._id,"lbl",this._elems.lblContainer),this._config.helpText){this._elems.helpTextIcon=h.createElement({type:"span",cls:"helpTextIcon",content:"?",parent:this._elems.lblContainer});new d.Tooltip({content:this._config.helpText},this._elems.helpTextIcon)}}_createStandardLabeledInput(e){this._createStandardInput(),this._createStandardLabel(e?this._elems.input:null)}_cloneFormElement(e,t){return t||(t=""),e._createClonedElement(t)}_createClonedElement(e){return new this.constructor(this._id+e,this._config)}getField(e){return e===this._id?this:null}show(){return s(this,void 0,void 0,(function*(){this._isHidden&&(this._isHidden=!1,a.removeClass(this._elems.base,"hidden"),yield c.transition(this._elems.base,{height:"0"},{height:"<height>"},200))}))}hide(){return s(this,void 0,void 0,(function*(){this._isHidden||(this._isHidden=!0,yield c.transition(this._elems.base,{maxHeight:"<height>",overflow:"hidden"},{maxHeight:"0 !important",overflow:"hidden"},200),a.addClass(this._elems.base,"hidden"))}))}}t.Field=g,g._uncoloredStyles={".kipFormElem, .kipFormElem input, .kipFormElem select, .kipFormElem textarea":{fontSize:"1em",width:"100%",boxSizing:"border-box",fontFamily:"Segoe UI, Open Sans, Helvetica"},".kipFormElem":{marginTop:"10px",position:"relative"},".kipFormElem.hidden":{display:"none"},".kipFormElem input, .kipFormElem textarea, .kipFormElem select":{border:"1px solid #CCC",borderRadius:"3px"},".kipFormElem textarea":{minHeight:"100px",maxWidth:"100%"},".kipFormElem .labelContainer":{display:"flex",alignItems:"center"},".kipFormElem .helpTextIcon":{width:"19px",height:"19px",boxSizing:"border-box",paddingTop:"4px",backgroundColor:"<formSubTheme>",color:"#FFF",borderRadius:"50%",fontSize:"0.8em",textAlign:"center",fontFamily:"SpecialElite",cursor:"pointer",nested:{"&:hover":{transform:"scale(1.1)"}}},".kipFormElem .lbl":{fontSize:"0.9em",color:"#666",width:"100%",boxSizing:"border-box"},".kipFormElem.required .lbl":{},".kipFormElem.required .lbl:after":{content:'"*"',color:"<formSubTheme>",fontWeight:"bold",position:"absolute",marginLeft:"2px"},".kipFormElem .error":{color:"#C30",fontSize:"0.7em",fontStyle:"italic"},".kipFormElem.flex":{display:"flex",alignItems:"center",nested:{"> div:not(.error), > label, > span, > input":{width:"auto",marginRight:"10px"}}},".kipFormElem.multiline":{nested:{"input, textarea, select":{marginTop:"5px"}}}}},function(e,t,i){"use strict";function s(e,t){let i,s=!t;for(i in e)if(e.hasOwnProperty(i)){if(s)return i;i===t&&(s=!0)}return""}function n(e){let t=Object.keys(e)||[];for(let i=t.length-1;i>=0;i-=1){let s=t[i];e.hasOwnProperty(s)||t.splice(i,1)}return t}Object.defineProperty(t,"__esModule",{value:!0}),t.map=function(e,t,i){let s=[];if(!e)return s;if(e.map){let n;e.map((e,r,o)=>{if(n)return;let a=t(e,r,o);s.push(a),i&&i()&&(n=!0)})}else{let n,r=0;for(n in e)if(e.hasOwnProperty(n)){let o=t(e[n],n,r);if(o&&s.push(o),r+=1,!i)continue;if(i())break}}return s},t.getNextKey=s,t.getKeys=n,t.keyCount=function(e){return n(e).length},t.isEmptyObject=function(e){return!s(e)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isNullOrUndefined=function(e,t){return void 0===e||(null===e||!(!t||""!==e))}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(6);function n(e,t){return e.substr(t,1)}function r(e,t){return e.substring(t,e.length)}function o(e){return/^[0-9]+$/.test(e)}t.piece=function(e,t,i=1){let s;return s=e.split(t),s[i]||""},t.addPiece=function(e,t,i){return e.length>0&&(e+=i),e+t},t.titleCase=function(e,t=" "){let i,s,o;for(o="",i=e.split(t),s=0;s<i.length;s+=1)0!==s&&(o+=t),o+=n(i[s],0).toUpperCase(),o+=r(i[s],1).toLowerCase();return o},t.sentenceCase=function(e){let t;return t=n(e,0).toUpperCase(),t+=r(e,1).toLowerCase(),t},t.charAt=n,t.rest=r,t.trim=function(e){let t;return t=e.replace(/^\s*/g,""),t=t.replace(/\s*?$/g,""),t},t.stripSpaces=function(e){let t;return t=e.replace(/\s/g,""),t=t.replace(/\&nbsp\;/g,""),t},t.format=function(e,...t){let i=e.split("");t||(t=[]);let n="",r=!1;for(let e=0;e<i.length;e+=1){let a=i[e];"\\"!==a?"{"===a?(r=!0,i[e]=""):"}"===a&&r?(i[e]=s.isNullOrUndefined(t[+n])?"{"+n+"}":t[+n].toString(),r=!1,n=""):o(a)&&r?(n+=a,i[e]=""):r&&(r=!1,n=""):(i[e]="",e+=1)}return i.join("")},t.isNumeric=o,t.addLeadingZeroes=function(e,t){let i,s;for(i="string"==typeof t?t:t.toString(),s=i.length;s<e;s+=1)i="0"+i;return i},t.stripHTML=function(e){let t;return t=e.replace(/\<.*?\>/g,""),t}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(6),n=i(0),r=i(5),o=i(20);function a(e,t){let i=[];if(s.isNullOrUndefined(t)){let e=l("-- select an option --",-1,!0);e.attr.disabled="true",i.push(n.createElement(e))}return r.map(e,(e,s)=>{let r=l(e,s,s===t);i.push(n.createElement(r))}),i}function l(e,t,i){let s={type:"option",attr:{value:t},content:e};return i&&(s.attr.selected="true"),s}t.cloneTemplate=function(e){return{value:e.value,position:e.position,required:e.required,onValidate:e.onValidate,onOtherChange:e.onOtherChange,label:e.label,cls:e.cls,layout:e.layout}},t.createSelectElement=function(e,t,i,r){let o=a(i,r);s.isNullOrUndefined(r)&&(r=-1);let l=n.createElement({id:e,cls:t,type:"select",children:o});return s.isNullOrUndefined(r)||(l.value=r.toString()),l},t.createSelectOptions=a,t.createLabeledCheckbox=function(e,t,i,s){let r=n.createSimpleElement(e+"|wrapper",t+"|wrapper"),o={type:"input",id:e,cls:t,attr:{type:"checkbox",checked:s.toString(),name:e},parent:r},a=n.createElement(o);return n.createSimpleElement("",t+"|lbl",i,{for:e},null,r),{wrapper:r,checkbox:a}},t.createLabelForInput=function(e,t,i,s,r){return r||(r={}),r.for=t,n.createElement({type:"label",cls:i,attr:r,content:e,parent:s})},t.createRadioButtons=function(){},t.createInputElement=function(e,t,i,s,r,a,l){let u="input";return"textarea"===(i=i.toLowerCase())&&(i="",u="textarea"),(r=r||{}).type=i,s&&("checkbox"===i||"radio"===i?r.checked=s:r.value="date"===i?o.inputDateFmt(s):s),n.createElement({type:u,id:e,cls:t,attr:r,children:a,parent:l})},t.isField=function(e){return!!e&&(void 0!==e.id&&void 0!==e.type&&void 0!==e.template)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.Rectangle=0]="Rectangle",e[e.Text=1]="Text",e[e.Circle=2]="Circle",e[e.Path=3]="Path",e[e.Group=4]="Group"}(t.ElementType||(t.ElementType={})),function(e){e[e.CLICK=0]="CLICK",e[e.HOVER=1]="HOVER",e[e.LEAVE=2]="LEAVE",e[e.R_CLICK=3]="R_CLICK",e[e.DBL_CLICK=4]="DBL_CLICK",e[e.KEY_PRESS=5]="KEY_PRESS",e[e.FOCUS=6]="FOCUS",e[e.BLUR=7]="BLUR"}(t.EventTypeEnum||(t.EventTypeEnum={})),function(e){e[e.FILL_COLOR=0]="FILL_COLOR",e[e.STROKE_COLOR=1]="STROKE_COLOR",e[e.FONT_FAMILY=2]="FONT_FAMILY",e[e.FONT_VARIANT=3]="FONT_VARIANT",e[e.FONT_SIZE=4]="FONT_SIZE",e[e.STROKE_SIZE=5]="STROKE_SIZE",e[e.TEXT_ALIGN=6]="TEXT_ALIGN",e[e.FONT=7]="FONT"}(t.StyleChangeEnum||(t.StyleChangeEnum={}))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(26),n=i(19),r=i(7),o=i(30);class a extends s.NamedClass{constructor(e,t){super("Collection"),this._data={},this._sortedData=new Array,this._addType=e||o.CollectionTypeEnum.IgnoreDuplicateKeys,this._equalityTest=t,this._equalityTest||(this._equalityTest=(e,t)=>e===t)}get keys(){return Object.keys(this._data)}set addType(e){this._addType=e}get iteration(){return this._iteration}get length(){return this._sortedData.length}set equalityTest(e){this._equalityTest=e}add(e,t){let i,s,n;return this._addType===o.CollectionTypeEnum.IgnoreDuplicateKeys&&this._data[e]?-1:(this._data[e]&&(n=!0),s=this._sortedData.length,i={key:e,value:t,sortedIdx:s,origIdx:s},this._data[e]=i,n||this._sortedData.push(e),s)}remove(e){return this._removeElementByKey(e)}removeElementByValue(e){return this._removeElementByValue(e)}_removeElementByKey(e){let t;return t=this._data[e],t?(this._sortedData.splice(t.sortedIdx,1),this._resetSortedKeys(t.sortedIdx),delete this._data[e],t):null}_removeElementByIndex(e){let t;return e>=this.length||e<0?null:(t=this._sortedData[e],this._removeElementByKey(t))}_removeElementByValue(e){let t;return t=this._findElement(e),this._removeElementByKey(t&&t.key)}clear(){this._data={},this._sortedData=[]}_resetSortedKeys(e,t){if(e||(e=0),t||0===t||(t=this._sortedData.length),e>t)return;if(e>t){let i=e;e=t,t=i}let i,s;for(let n=e;n<t;n+=1)s=this._sortedData[n],s&&(i=this._data[s],i&&(i.sortedIdx=n))}sort(e){let t;t=(t,i)=>{let s,n;return s=this._data[t],n=this._data[i],e(s,n)},this._sortedData.sort(t),this._resetSortedKeys()}map(e){if(e){for(this.resetLoop();this.hasNext();){let t=this.getNext();if(!t)continue;let i=t.value,s=t.key;e(i,s,this.getIndex(s))}this.resetLoop()}}resetLoop(e){this._iteration=e?this.length+1:-1}hasNext(e){return e?this._iteration-1>=0:this._iteration+1<this._sortedData.length}getNext(e){return e?this._iteration-=1:this._iteration+=1,this._data[this._sortedData[this._iteration]]}getCurrent(){return-1===this._iteration?null:this._data[this._sortedData[this._iteration]]}toArray(){let e;for(e of this._sortedData)(void 0).push(this._data[e])}toValueArray(){let e=[];return this.map(t=>{e.push(t)}),e}getElement(e){let t;if("string"==typeof e)t=this._data[e];else if("number"==typeof e){if(e<0||e>this._sortedData.length)return null;t=this._data[this._sortedData[e]]}return t}getValue(e){let t;return t=this.getElement(e),t?t.value:null}getIndex(e){if("string"==typeof e)return this._data[e]&&this._data[e].sortedIdx;{let t;return t=this._findElement(e),t&&t.sortedIdx}}_findElement(e){let t,i;for(t in this._data)if(this._data.hasOwnProperty(t)&&(i=this._data[t],this._equalityTest(i.value,e)))return i;return null}getKey(e){if("number"==typeof e)return this._sortedData[e];{let t;return t=this._findElement(e),t&&t.key}}hasElement(e){return"string"==typeof e?!!this._data[e]:"number"==typeof e?!!this._sortedData[e]&&!!this._data[this._sortedData[e]]:null!==this._findElement(e)}toString(){let e="";return this.map((t,i,s)=>{e.length>0&&(e+=", "),e+=r.format("{0} => {1}",i,t.toString())}),e}equals(e){if(this.length!==e.length)return!1;if(this._sortedData.length!==e._sortedData.length)return!1;let t=!1;return this.map((i,s,r)=>{e._data[s]||(t=!0),n.equals(i,e._data[s].value)||(t=!0)}),!t}}t.Collection=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}(i(107))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(7),n=i(5);function r(e,t,i,s,n){let r=o(e,t,n);return r||s?function(e,t){let i=a(!t);i.innerHTML+=e,t||i.parentNode||document.head.appendChild(i);return i}(r,i):null}function o(e,t,i){let r=function(e,t,i){let r=function(e,t){let i;t||(i=function(e){let t,i,s;for(let n=0;n<document.styleSheets.length;n+=1){t=document.all?"rules":"cssRules";try{i=document.styleSheets[n][t]}catch(e){continue}if(i)for(let t=0;t<i.length;t+=1)if(s=i[t],s.selectorText===e)return s}}(e));i||(i={style:{}});return i}(e,i),o=-1!==e.indexOf("@keyframes"),a="";return n.map(t,(e,t)=>{r.style[t]||(a+=o?function(e,t){let i="";n.map(t,(e,t)=>{e&&(i+="\t\t"+t+" : "+e+";\n")}),i&&(i=s.format("\t{0} \\{\n{1}\\}",e,i));return i}(t,e):function(e,t){return s.format("\t{0} : {1};\n",l(e),t)}(t,e))}),a}(e,t,i);return r&&(r=s.format("\n{0} \\{\n{1}\n\\}",e,r),-1!==e.indexOf("{")&&(r+="\n}")),r}function a(e){let t,i;return e&&(t=document.getElementsByTagName("style"),t.length>0)?(i=t[0],i):(i=document.createElement("style"),i)}function l(e){if(e.toLowerCase()===e)return e;let t,i=e.split("");for(let e=0;e<i.length;e++)t=i[e],t.toLowerCase()!==t&&(i[e]="-"+t.toLowerCase());return i.join("")}t.createClass=r,t.generateContentForCSSClass=o,t.createStyleElement=a,t.getPropertyName=l,t.buildClassString=function(...e){let t="";for(let i=0;i<e.length;i+=1)e[i]&&(t=s.addPiece(t,e[i]," "));return t},t.createFontDefinition=function(e,t,i,n){let o=[];for(let e of t)o.push(s.format("url({0}) format({1})",e.url,e.format));return r("@font-face",{fontFamily:e,src:o.join(",")},i,n)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(17);function n(e){return{x:e.x,y:e.y}}t.cloneRect=function(e){return{x:e.x,y:e.y,w:e.w,h:e.h}},t.clonePoint=n,t.clonePointArray=function(e){let t,i=[];for(t of e){let e=n(t);i.push(e)}return i},t.cloneObject=function(e){return JSON.parse(JSON.stringify(e))},t.shallowCloneObject=function(e){return s.combineObjects({},e)}},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function o(e){try{l(s.next(e))}catch(e){r(e)}}function a(e){try{l(s.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}l((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(5),r=i(11),o=i(1),a=i(12);t.TransitionController=new class{constructor(){this._lastClsId=0,this._generatedClasses={}}transition(e){return s(this,void 0,void 0,(function*(){if(!e.elem)return Promise.reject("no element");if(!e.time)return Promise.reject("no time");let t=this._getClass(e.start,e.elem);e.end.transition||(e.end.transition="all ease-in-out "+e.time/1e3+"s");let i=this._getClass(e.end,e.elem);yield this._animate(e,t,i)}))}transitionProperty(e){return Promise.reject("not implemented")}_getClass(e,t){e=this._replacePlaceholders(e,t);let i=JSON.stringify(e).replace(/ /g,"");if(this._generatedClasses[i])return this._generatedClasses[i];let s=this._generateRandomClassName();return this._generatedClasses[i]=s,this._createTransitionClass(s,e,t),s}_generateRandomClassName(){return this._lastClsId+=1,"gencls"+this._lastClsId}_createTransitionClass(e,t,i){this._styleElem||this._createStyleElem(),this._styleElem.innerHTML+=a.generateContentForCSSClass("."+e,t,!0)}_replacePlaceholders(e,t){return n.map(e,(i,s)=>{i=(i=(i=(i=(i=(i=i.replace("<width>",t.offsetWidth+1+"px")).replace("<height>",t.offsetHeight+"px")).replace("<left>",t.offsetLeft+"px")).replace("<top>",t.offsetTop+"px")).replace("<right>",t.offsetLeft+t.offsetWidth+"px")).replace("<bottom>",t.offsetTop+t.offsetHeight+"px"),e[s]=i}),e}_createStyleElem(){this._styleElem=a.createStyleElement(!1),document.head.appendChild(this._styleElem)}_animate(e,t,i){return s(this,void 0,void 0,(function*(){yield r.nextRender(),o.addClass(e.elem,t),yield r.wait(e.delay||0),o.addClass(e.elem,i),yield r.wait(e.time),o.removeClass(e.elem,t),yield r.nextRender(),this._removeEndClass(e.elem,i)}))}_removeEndClass(e,t){return s(this,void 0,void 0,(function*(){yield r.wait(10),o.removeClass(e,t)}))}},t.transition=function(e,i,s,n,r){return t.TransitionController.transition({elem:e,start:i,end:s,time:n,delay:r||0})}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(52);class n extends s.PathElement{_setAttributes(e,...t){let i=this._generatePoints.apply(this,t);return super._setAttributes(e,i)}}t.PathExtensionElement=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isDrawable=function(e){return!!e.draw},t.isDrawableElement=function(e){return!!e.appendChild}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(5),n=i(6);function r(e,t,i){let o;return o=e||{},t&&function(e,t,i){if(!e)return t;e.__proto__&&(t.__proto__=Object.create(e.__proto__));s.map(e,(e,s)=>{if(!n.isNullOrUndefined(e))if(i&&"object"==typeof e){let n=t[s];if(!n)return void(t[s]=e);n=r(n,e,i),t[s]=n}else t[s]=e})}(t,o,i),o}t.combineObjects=r,t.reconcileOptions=function(e,t){let i,s;for(i in e||(e={}),t)t.hasOwnProperty(i)&&(s=e[i],null==s&&(e[i]=t[i]));return e}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(9),n=i(58),r=i(59);t.CanvasElement=class{constructor(e,t){this._layer=1,this._id=e,this._isEffect=t,this._eventFunctions=[],this._style=new n.CanvasElementStyle}get id(){return this._id}set canvas(e){this._setCanvas(e)}set parent(e){this._parent=e}get style(){return this._style}set style(e){this._style=e}get layer(){return this._layer}set layer(e){this._layer=e}get isOffScreen(){return this._isOffScreen}get dimensions(){return this._dimensions}set dimensions(e){this._setDimensions(e)}get displayDimensions(){return this._displayDimensions}get isHoverTarget(){return this._isHoverTarget}set isHoverTarget(e){this._isHoverTarget=e}get isHidden(){return this._isHidden}_initializeRects(){this._displayDimensions={x:this._dimensions.x,y:this._dimensions.y,w:this._dimensions.w,h:this._dimensions.h}}_applyStyle(e){this._style.setStyle(e)}_restoreStyle(e){this._style.restoreStyle(e)}transform(e){if(!this._parent)return;let t=this._cloneForEffect(this.id+"|e");t._isEffect=!0,t._layer=this._layer,t.style=this._cloneStyle(),e.color&&(t._style.fillColor=e.color),e.scale&&t._scale(e.scale),this._parent.addElement(t)}_cloneStyle(){return new n.CanvasElementStyle(this._style)}_scale(e){if(!this._isEffect)return;let t=e*this._dimensions.w,i=(t-this._dimensions.w)/2,s=e*this._dimensions.h,n=(s-this._dimensions.h)/2;this._dimensions={x:this._dimensions.x-i,y:this._dimensions.y-n,w:t,h:s}}updateDimensions(e){this._displayDimensions=this._canvas.convertAbsoluteRectToRelativeRect(this._dimensions),this._setIsOffScreen(e)}adjustDimensions(e){this._isEffect||(this._dimensions.x+=e.x,this._dimensions.y+=e.y)}draw(){if(this._isOffScreen)return;if(!this._canvas)return;if(this._isHidden)return;let e;e=this._isEffect?this._canvas.effectContext:this._canvas.context,this._applyStyle(e),this._onDraw(e),this._restoreStyle(e),this._isDrawn=!0}_setIsOffScreen(e){this._isOffScreen=!r.doBasicRectsOverlap(e,this._dimensions)}_setDimensions(e){this._dimensions=e,this._canvas&&(this._canvas.needsRedraw=!0)}_setCanvas(e){this._canvas=e}addEventListener(e,t){let i=this._eventFunctions[e];i||(i=[],this._eventFunctions[e]=i),i.push(t)}click(e,t){this.handleEvent(s.EventTypeEnum.CLICK,e,t)}doubleClick(e,t){this.handleEvent(s.EventTypeEnum.DBL_CLICK,e,t)}rightClick(e,t){this.handleEvent(s.EventTypeEnum.R_CLICK,e,t)}hover(e,t){this.handleEvent(s.EventTypeEnum.HOVER,e,t)}leave(e,t){this.handleEvent(s.EventTypeEnum.LEAVE,e,t)}keyPress(e,t){this.handleEvent(s.EventTypeEnum.KEY_PRESS,e,t)}focus(e,t){this.handleEvent(s.EventTypeEnum.FOCUS,e,t)}blur(e,t){this.handleEvent(s.EventTypeEnum.BLUR,e,t)}handleEvent(e,t,i){e===s.EventTypeEnum.BLUR||e===s.EventTypeEnum.LEAVE?(this._parent&&this._parent.removeElement(this.id+"|e"),this._isHoverTarget=!1):e===s.EventTypeEnum.HOVER&&(this._isHoverTarget=!0);let n,r=this._eventFunctions[e];if(r){for(n of r)n(t,i);this._canvas||(this._canvas.needsRedraw=!0)}}swapVisibility(){this._isHidden?this.show():this.hide()}hide(){this._isHidden||(this._isHidden=!0,this._canvas.needsRedraw=!0)}show(){this._isHidden&&(this._isHidden=!1,this._canvas.needsRedraw=!0)}_debugDimensions(){console.log("CANVAS ELEM: "+this._id),console.log("x: "+Math.round(this._displayDimensions.x)+" (from "+this._dimensions.x+")"),console.log("y: "+Math.round(this._displayDimensions.y)+" (from "+this._dimensions.y+")"),console.log("w: "+Math.round(this._displayDimensions.w)+" (from "+this._dimensions.w+")"),console.log("h: "+Math.round(this._displayDimensions.h)+" (from "+this._dimensions.h+")"),console.log("\nparent: "+(this._parent?this._parent.id:"none")),console.log("===\n"),this._canvas&&this._canvas.debugRelativeDimensions(),console.log("offscreen? "+this._isOffScreen),console.log("--------------------\n\n")}debugDimensions(){this._debugDimensions()}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(6);function n(e){return!s.isNullOrUndefined(e)&&!!e.equals}function r(e){if(s.isNullOrUndefined(e))return!1;let t=e;return!!(t.lessThan&&t.greaterThan&&t.equals)}t.equals=function(e,t){return n(e)?e.equals(t):e===t},t.lesserThan=function(e,t){return r(e)?e.lesserThan(t):e<t},t.greaterThan=function(e,t){return r(e)?e.greaterThan(t):e>t},t.isEquatable=n,t.isComparable=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(43),n=i(7);function r(e,t,i,s,n){let r,o;return r=864e5,s||(e=a(e,!0),t=a(t,!0)),o=e>t||i?e-t:t-e,n||(o/=864e5),o}function o(e){let t;return t=new Date,e?t:(t=a(t),t)}function a(e,t){let i,s=l(e);return i=t?new Date(s+" 00:00Z"):new Date(s),i}function l(e){if(!e)return"";let t;return t=d(e),e.getMonth()+1+"/"+e.getDate()+"/"+t}function u(e,t){let i,s,n,r;return i=+e.getMinutes(),n=+e.getHours(),r="",s=i<10?"0"+i:i.toString(),t&&(r=" AM",n>=12&&(r=" PM"),n>12&&(n-=12),0===n&&(n=12)),n+":"+s+r}function h(e){if(!e)return!1;let t=e.getFullYear();return t%4==0&&(t%100!=0||t%400==0)}function d(e){return+e.getFullYear()%100}function c(e,t){return l(e)===l(t)}function _(e,t,i,s){t[i]||(t[i]=0),t[s]||(t[s]=0);let n=t[i],r=n%e,o=Math.floor(n/e);return t[i]=r,t[s]+=o,t}function p(e,t,i){return 1===e?e+" "+t:(i||(i=t+"s"),e+" "+i)}t.dateDiff=r,function(e){e[e.EXCLUSIVE=-1]="EXCLUSIVE",e[e.DEFAULT=0]="DEFAULT",e[e.INCLUSIVE=1]="INCLUSIVE"}(t.InclusivityEnum||(t.InclusivityEnum={})),t.monthDiff=function(e,t,i,s){let n,r;e>t||i?(n=e.getMonth()-t.getMonth(),r=e.getFullYear()-t.getFullYear()):(n=t.getMonth()-e.getMonth(),r=t.getFullYear()-e.getFullYear());let o=12*r+n;return o+=+s,o},t.getToday=o,t.clearTimeInfo=a,t.businessDateDiff=function(e,t,i,s,n){let o,a,l,u;o=r(e,t,i,s,n),a=(t>e?e.getDay():t.getDay())+1,a%=7,a<0&&(a=6);let h=0;for(u=0;u<Math.abs(o);u+=1)0!==a&&6!==a||(h+=1),a+=1,a%=7,a<0&&(a=6);return l=o<0?-1:1,o-h*l},t.shortDate=l,t.inputDateFmt=function(e){let t,i,s;return s=e.getFullYear(),t=e.getMonth()+1,t<10&&(t="0"+t),i=+e.getDate(),i<10&&(i="0"+i),e.getFullYear()+"-"+t+"-"+i},t.inputToDate=function(e,t){let i;if(e){let t=e.split("-");i=new Date(+t[0],+t[1]-1,+t[2])}else{if(!t)return i=null,i;i=o()}if(t){let e=t.split(":");i.setHours(+e[0]),i.setMinutes(+e[1])}return i},t.shortTime=u,t.inputTimeFmt=function(e,t){let i=[],n=e.getHours();i.push(s.padToDigits(n,2));let r=e.getMinutes();if(i.push(s.padToDigits(r,2)),t){let t=e.getSeconds();i.push(s.padToDigits(t,2))}return i.join(":")},t.shortDateTime=function(e,t){return l(e)+" "+u(e,t)},t.stopwatchDisplay=function(e,t,i){let s,r,o;return t?(s=(void 0).toString(),r=(void 0).toString(),o=(void 0).toString()):(s=n.addLeadingZeroes(2,void 0),r=n.addLeadingZeroes(2,void 0),o=n.addLeadingZeroes(2,void 0)),void 0+"D  "+o+":"+r+":"+s+" '"+e},t.updatedStopwatchDisplay=function(e,t){let i=function(e){let t={},i=e;return t.days=Math.floor(i/864e5),i-=24*t.days*60*60*1e3,t.hours=Math.floor(i/36e5),i-=60*t.hours*60*1e3,t.minutes=Math.floor(i/6e4),i-=60*t.minutes*1e3,t.seconds=Math.floor(i/1e3),i-=1e3*t.seconds,t.milliseconds=i,t}(e),s=[];return i.days&&s.push(i.days+" days"),i.hours&&s.push(i.hours+" hours"),i.minutes&&s.push(i.minutes+" minutes"),i.seconds&&s.push(i.seconds+" seconds"),i.milliseconds&&t.showMilli&&s.push(i.milliseconds+" ms"),s.join(" ")},t.addToDate=function(e,t){return t.milliseconds&&e.setMilliseconds(e.getMilliseconds()+t.milliseconds),t.seconds&&e.setSeconds(e.getSeconds()+t.seconds),t.minutes&&e.setMinutes(e.getMinutes()+t.minutes),t.hours&&e.setHours(e.getHours()+t.hours),t.days&&e.setDate(e.getDate()+t.days),t.months&&e.setMonth(e.getMonth()+t.months),t.years&&e.setFullYear(e.getFullYear()+t.years),e},t.getMonthName=function(e,t){switch(e.getMonth()){case 0:return t?"Jan":"January";case 1:return t?"Feb":"February";case 2:return t?"Mar":"March";case 3:return t?"Apr":"April";case 4:return"May";case 5:return t?"Jun":"June";case 6:return t?"Jul":"July";case 7:return t?"Aug":"August";case 8:return t?"Sept":"September";case 9:return t?"Oct":"October";case 10:return t?"Nov":"November";case 11:return t?"Dec":"December"}return""},t.getDayOfWeek=function(e,t){switch(e.getDay()){case 0:return t?"Sun":"Sunday";case 1:return t?"Mon":"Monday";case 2:return t?"Tues":"Tuesday";case 3:return t?"Wed":"Wednesday";case 4:return t?"Thurs":"Thursday";case 5:return t?"Fri":"Friday";case 6:return t?"Sat":"Saturday"}return""},t.getLengthOfMonthInDays=function(e){if(!e)return-1;switch(e.getMonth()){case 0:case 2:case 4:case 6:case 7:case 9:case 11:return 31;case 1:return h(e)?29:28;default:return 30}},t.isLeapYear=h,t.getShortYear=d,t.isWeekend=function(e){let t=e.getDay();return 0===t||6===t},t.isToday=function(e){return c(o(),a(e))},t.isSameDate=c,t.getDisplayDuration=function(e){_(1e3,e,"milliseconds","seconds"),_(60,e,"seconds","minutes"),_(60,e,"minutes","hours"),_(24,e,"hours","days"),_(30,e,"days","months"),_(12,e,"months","years");let t=[];return e.years&&t.push(p(e.years,"year")),e.months&&t.push(p(e.months,"month")),e.days&&t.push(p(e.days,"day")),e.hours&&t.push(p(e.hours,"hour")),e.minutes&&t.push(p(e.minutes,"minute")),e.seconds&&t.push(p(e.seconds,"second")),e.milliseconds&&t.push(p(e.milliseconds,"millisecond")),t.join(" ")}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(2),n=i(10),r=i(96),o=i(1),a=i(7),l=i(35);class u extends s.Drawable{constructor(e,...t){super(),this._lastListenerId=0,e||(e={}),this._style=new r.SVGStyle(e.svgStyle),this._attributes=this._setAttributes(e,...t),this._createElements(this._attributes),this._updateExtremaAndNotifyListeners(this._attributes)}get _nextListenerId(){return this._lastListenerId+=1,this._lastListenerId.toString()}addUpdateListener(e,t){this._onUpdateListeners||(this._onUpdateListeners=new n.Collection),t||(t=this._nextListenerId),this._onUpdateListeners.add(t,e)}_notifyUpdateListeners(){window.setTimeout(()=>{this._onUpdateListeners&&this.extrema&&(this.scale(1),this._onUpdateListeners.map(e=>{e&&e()}))},0)}get id(){return this._attributes.id}set id(e){this._attributes.id=e}get style(){return window.setTimeout(()=>{this._style.assignStyle(this._elems.base)},0),this._style}get base(){return this._elems.base}get preventScaling(){return this._preventScaling}get extrema(){return this._extrema}_shouldSkipCreateElements(){return!0}_createElements(e){if(!e)throw new Error("no attributes provided for SVG Element");let t=e.type;delete e.type;let i=e.cls||"";if(delete e.cls,""===t)throw new Error("no SVG element type provided");let s=e.parent;delete e.parent;let n=l.createSVGElem({type:t,attr:e});i&&o.addClass(n,i),this._elems={},this._elems.base=n,s&&s.appendChild(n),this._preventScaling=e.unscalable}measureElement(){let e;return e=this._elems.base.getBBox(),{x:e.x,y:e.y,w:e.width,h:e.height}}_updateExtremaAndNotifyListeners(e){this._updateExtrema(e),this._notifyUpdateListeners()}scale(e){let t=this.measureElement();this.style.transform=a.format("translate({0},{1}) scale({2}) translate({3},{4})",t.x+t.w/2,t.y+t.h/2,e,-1*(t.x+t.w/2),-1*(t.y+t.h/2))}}t.SVGElem=u},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.normalizeValue=function(e,t,i){return e<t&&(e=t),e>i&&(e=i),e},t.boundedRandomNumber=function(e,t,i){return t||(t=0),i?t+=1:e+=1,t+Math.floor(Math.random()*(e-t))},t.roundToPlace=function(e,t){return Math.round(e*t)/t}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(2),n=i(0),r=i(1),o=i(31),a=i(16);class l extends s.Drawable{constructor(e){e?e.cls=(e.cls||"")+" popup":e={cls:"popup"},super(e),e.themeColor?this.setThemeColor("popupTheme",e.themeColor):this.setThemeColor("popupTheme","#06F",!0)}setThemeColor(e,t,i){super.setThemeColor(e,t,i)}_createElements(){this._createOverlay(),this._createFrame(),this._createTitle(),this._createCloseButton(),this._createContentElement(),this._createButtonContainer()}_createOverlay(){this._elems.overlay=n.createSimpleElement("","overlay"),this._elems.overlay.addEventListener("click",()=>{this.erase()}),this._elems.base.appendChild(this._elems.overlay)}_createFrame(){this._elems.frame=n.createSimpleElement("","frame"),this._elems.base.appendChild(this._elems.frame)}_createTitle(){this._elems.title=n.createElement({cls:"popupTitle",parent:this._elems.frame})}_createCloseButton(){this._elems.closeBtn=n.createSimpleElement("","closeBtn","",null,[{content:"x",cls:"x"}]),this._elems.closeBtn.addEventListener("click",()=>{this.erase()}),this._elems.frame.appendChild(this._elems.closeBtn)}_createContentElement(){this._elems.content=n.createSimpleElement("","content"),this._elems.frame.appendChild(this._elems.content)}_createButtonContainer(){this._elems.buttonContainer=n.createElement({cls:"buttonContainer",parent:this._elems.frame})}setTitle(e){this._elems.title.innerHTML=e,e?r.addClass(this._elems.title,"hasContent"):r.removeClass(this._elems.title,"hasContent")}addContent(e,t,i){let s;s=o.isString(e)?n.createSimpleElement(e,t,i):a.isDrawable(e)?e.base:e instanceof HTMLElement?e:n.createElement(e),s&&this._elems.content.appendChild(s)}clearContent(){this._elems.content.innerHTML=""}addButton(e,t){n.createElement({cls:"popupButton",parent:this._elems.buttonContainer,content:e}).addEventListener("click",()=>{t()})}}t.Popup=l,l._uncoloredStyles={".overlay":{backgroundColor:"rgba(0,0,0,.6)",position:"absolute",left:"0",top:"0",width:"100%",height:"100%"},".popup":{display:"flex",alignItems:"center",justifyContent:"center",fontFamily:"Segoe UI, OpenSans, Helvetica",position:"fixed",width:"100%",height:"100%",left:"0",top:"0",zIndex:"5"},".frame":{position:"absolute",backgroundColor:"#FFF",borderRadius:"3px",boxShadow:"1px 1px 5px 2px rgba(0,0,0,.2)",display:"block",borderTop:"10px solid <popupTheme>",padding:"10px",maxHeight:"90%",overflowY:"auto"},".popup .popupTitle":{fontSize:"1.3em",fontWeight:"bold"},".popup .popupTitle.hasContent":{marginBottom:"5px"},".popup .content":{fontSize:"0.9em"},".popup .buttonContainer":{display:"flex",marginTop:"8px",justifyContent:"flex-end"},".popup .buttonContainer .popupButton":{padding:"2px 10px",backgroundColor:"<popupTheme>",color:"#FFF",cursor:"pointer",marginLeft:"15px",borderRadius:"30px",transition:"all ease-in-out .1s"},".popup .buttonContainer .popupButton:hover":{transform:"scale(1.1)"},".popup .closeBtn":{width:"16px",height:"16px",borderRadius:"8px",cursor:"pointer",position:"absolute",left:"calc(100% - 7px)",top:"-15px",backgroundColor:"#DDD",boxShadow:"1px 1px 5px 2px rgba(0,0,0,.1)",color:"#333",display:"flex",justifyContent:"center",alignItems:"center",transition:"all ease-in-out .1s"},".popup .closeBtn .x":{paddingBottom:"2px"},".popup .closeBtn:hover":{transform:"scale(1.1)"}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(71),n=i(73);class r extends s.Event{get _key(){return t.FORM_ELEM_CHANGE}}t.FormElemChangeEvent=r;class o extends s.Event{get _key(){return t.FORM_SAVABLE_CHANGE}}t.FormSavableEvent=o,t.FORM_ELEM_CHANGE="formelemchange",t.FORM_SAVABLE_CHANGE="formsavablechange";class a extends n.EventHandler{}t.formEventHandler=new a,t.formEventHandler.createEvent(t.FORM_ELEM_CHANGE,"Form Element Changed"),t.formEventHandler.createEvent(t.FORM_SAVABLE_CHANGE,"Form Savable Change")},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function o(e){try{l(s.next(e))}catch(e){r(e)}}function a(e){try{l(s.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}l((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(17),r=i(0),o=i(24),a=i(1),l=i(46),u=i(82),h=i(50),d=i(2),c=i(49);class _ extends d.Drawable{constructor(e,t){super(),this._onSave=[],this._onCancel=[],this._hasChanges=!1,this._canSaveTracker={hasMissingRequired:!1,hasErrors:!1},this._config=e||{},this._addClassName("Form"),this._colors=n.combineObjects({formBackgroundTheme:"#FFF",formTheme:"#EFC500",formSubTheme:"#444"},this._config.colors||{}),this._applyColors(),this._createElements(t)}registerSaveHandler(e){this._onSave.push(e)}_notifySave(e){if(this._onSave)for(let t of this._onSave)t(e)}registerCancelHandler(e){this._onCancel.push(e)}_notifyCancel(e){if(this._onCancel)for(let t of this._onCancel)t(e)}setThemeColor(e,t,i){super.setThemeColor(e,t,i)}_getUniqueThemeName(){return"Form"}_shouldSkipCreateElements(){return!0}_createElements(e){this._elems={},this._createBase(),this._createPreForm(),this._createFormContainer(),this._createCoreSection(e),this._createPostForm()}_createBase(){let e="kipForm";return this._config.cls&&(e+=" "+this._config.cls),this._elems.base=r.createElement({cls:e,type:"form",id:this._config.id}),this._elems.base}_createCoreSection(e){let t={label:this._config.label,cls:this._config.cls,layout:this._config.layout,hideTitle:this._config.hideTitle,uncollapsible:!this._config.hideTitle};this._elems.coreSection=new c.SectionField(this._id,t,e),this._applyColors(this._elems.coreSection),this._addEventHandlers(),this._elems.coreSection.draw(this._elems.formContainer)}_createPreForm(){return this._elems.background=r.createElement({cls:"background",parent:this._elems.base}),this._elems.background}_createFormContainer(){return this._elems.formContainer=r.createElement({cls:"formContent",parent:this._elems.background}),this._elems.formContainer}_createPostForm(){let e=[{display:"Save",callback:()=>this.trySave(),cls:"save primary",key:"saveButton"},{display:"Cancel",callback:()=>{this.tryCancel()},cls:"cancel tertiary"}];return this._config.addlButtons&&e.splice(1,0,...this._config.addlButtons),this._createButtons(e)}_createButtons(e){let t=[];for(let i of e)i&&t.push(this._createButton(i));return r.createElement({cls:"kipBtns",parent:this._elems.background,children:t})}_createButton(e){return r.createElement({key:e.key||"",type:"button",cls:"kipBtn "+(e.cls?e.cls:" secondary"),content:e.display,eventListeners:{click:t=>{e.callback(),t.preventDefault()}}},this._elems)}_addEventHandlers(){o.formEventHandler.addEventListener(o.FORM_ELEM_CHANGE,{func:e=>this._handleFormChange(e),uniqueId:this._id+"|form"}),o.formEventHandler.addEventListener(o.FORM_SAVABLE_CHANGE,{func:e=>this._handleSavabilityChange(e)})}_handleFormChange(e){e.context.key===this._id&&this._onFormChange(e)}_onFormChange(e){this._isFormChangeForMe(e)&&(this._hasChanges=!0)}_isFormChangeForMe(e){return e.context.key===this._id}_handleSavabilityChange(e){if(!this._elems.saveButton)return;this.canSave()?this._enableSave():this._disableSave()}_disableSave(){this._elems.saveButton.title=this._getCannotSaveMessage(),this._elems.saveButton.setAttribute("disabled","true"),a.addClass(this._elems.saveButton,"disabled")}_enableSave(){this._elems.saveButton.title="",this._elems.saveButton.removeAttribute("disabled"),a.removeClass(this._elems.saveButton,"disabled")}getData(){return s(this,void 0,void 0,(function*(){return this._elems.coreSection.save(!0)}))}_save(){return s(this,void 0,void 0,(function*(){let e=yield this._elems.coreSection.save();return this._notifySave(e),this._hasChanges=!1,e}))}trySave(){return s(this,void 0,void 0,(function*(){return this.canSave()?yield this._save():(this._showCannotSaveMessage(),null)}))}canSave(){return this._canSaveTracker=this._elems.coreSection.canSave(),!this._canSaveTracker.hasErrors&&!this._canSaveTracker.hasMissingRequired}_showCannotSaveMessage(){let e=this._getCannotSaveMessage();if(!e)return;let t=new l.ErrorPopup(e,"Couldn't Save");t.setThemeColor("popupTheme",this._colors.formTheme),t.draw(document.body)}_getCannotSaveMessage(){let e="";return this._canSaveTracker.hasErrors&&this._canSaveTracker.hasMissingRequired?e="This form has missing data and errors; correct errors and fill in all required fields before saving.":this._canSaveTracker.hasErrors?e="There are some errors in your form; correct them before saving.":this._canSaveTracker.hasMissingRequired&&(e="There are some fields with missing data; fill them in before saving."),e}_cancelConfirmation(){if(this._hasChanges){let e=new u.YesNoPopup("You have unsaved changes. Are you sure you want to cancel?",e=>{e===h.YesNoEnum.YES&&this._cancel()});e.setThemeColor("popupTheme",this._colors.formTheme),e.draw(document.body)}else this._cancel()}_cancel(){this.clear(),this._notifyCancel(this._hasChanges),this._hasChanges=!1}tryCancel(e){return!this._hasChanges||e?(this._cancel(),!0):(this._cancelConfirmation(),!1)}clear(){this._elems.coreSection.clear()}update(e,t){this._elems.coreSection.update(e,t),this._hasChanges=!1}undo(){}redo(){}_trackChanges(){}focus(){this._elems.coreSection.focus()}addFormElement(e,t){return this._elems.coreSection.addChildElement(e,t)}getField(e){return this._elems.coreSection.getField(e)}}t._Form=_,_._uncoloredStyles={".kipForm":{fontFamily:"Open Sans,Segoe UI Light,Helvetica",fontSize:"1em",boxSizing:"border-box",fontWeight:"100",nested:{".background":{display:"flex",flexDirection:"column"},".formContent":{flexShrink:"1",flexGrow:"1",position:"relative",padding:"5px",overflowY:"auto"},".kipBtn":{cursor:"pointer",opacity:"0.7",transition:"all ease-in-out .1s",fontFamily:"Open Sans,Segoe UI Light,Helvetica",fontSize:"1em",nested:{"&:hover:not(.disabled)":{opacity:"1"},"&.disabled":{cursor:"not-allowed",opacity:"0.4"}}},".kipBtns":{display:"flex",flexDirection:"row-reverse",nested:{".kipBtn":{padding:"3px 15px",margin:"5px",borderRadius:"3px",nested:{"&.primary":{backgroundColor:"<formTheme>",color:"#FFF"},"&.secondary":{border:"1px solid <formTheme>",color:"<formTheme>"},"&.tertiary":{border:"1px solid <formSubTheme>",color:"<formSubTheme>"}}}}},button:{backgroundColor:"transparent",border:"none"}}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(37);t.NamedClass=class{constructor(...e){this._class_names=e}get className(){return this._class_names.slice().reverse().join("::")}get paddedClassName(){return this._class_names.join(" <-- ")}_addClassName(e){return!s.contains(this._class_names,e)&&(this._class_names.push(e),!0)}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isUpdatable=function(e){if(e)return!!e.update}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(60);function n(e){let t;return t={x:e.x,y:e.y,w:e.width,h:e.height},t}function r(e){let t;return t={x:e.left+window.scrollX,y:e.top+window.scrollY,w:e.width,h:e.height},t}t.clientRectToShape=function(e){let t;return t=new Array,t[0]={x:e.left,y:e.top},t[1]={x:e.left+e.width,y:e.top},t[2]={x:e.left+e.width,y:e.top+e.height},t[3]={x:e.left,y:e.top+e.height},t},t.svgRectToShape=function(e){let t;return t=new Array,t[0]={x:e.x,y:e.y},t[1]={x:e.x+e.width,y:e.y},t[2]={x:e.x+e.width,y:e.y+e.height},t[3]={x:e.x,y:e.y+e.height},t},t.svgRectToBasicRect=n,t.clientRectToBasicRect=r,t.toBasicRect=function(e){let t;return s.isIBasicRect(e)?t=e:s.isClientRect(e)?t=r(e):s.isSVGRect(e)&&(t=n(e)),t}},function(e,t,i){"use strict";function s(e,t,i){return o(e,"offsetLeft",t,i)}function n(e,t,i){return o(e,"offsetTop",t,i)}function r(e,t,i){return{left:s(e,t,i),top:n(e,t,i)}}function o(e,t,i,s){let n=0;for(;e&&e!==i;)e[t]&&(n+=e[t]),e=s?e.parentNode:e.offsetParent;return n}Object.defineProperty(t,"__esModule",{value:!0}),t.globalOffsetLeft=s,t.globalOffsetTop=n,t.globalOffsets=r,t.getScrollPosition=function(){return{x:window.pageXOffset?window.pageXOffset:document.body.scrollLeft,y:window.pageYOffset?window.pageYOffset:document.body.scrollTop}},t.measureElement=function(e,t){let i=!1;if(!e.parentNode){i=!0;let s=e.style.opacity;e.style.opacity="0",window.setTimeout(()=>{e.style.opacity=s}),t||(t=document.body),t.appendChild(e)}let s=e.getBoundingClientRect();return i&&t.removeChild(e),s},t.findCommonParent=function(e,t){let i,s;if(e&&t)for(i=e,s=t;i;){for(;s;){if(i===s)return i;s=s.parentNode}i=i.parentNode,s=t}},t.moveRelToElem=function(e,t,i,s,n){let o,a,l,u;return o=r(e),a=r(e),l=a.left+i-o.left,u=a.top+s-o.top,n||(e.style.position="absolute",e.style.left=l+"px",e.style.top=u+"px"),{x:l,y:u}},t.isInDOM=function(e){let t=e.parentNode;for(;t;){if(t===document.body)return!0;t=t.parentNode}return!1}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.ReplaceDuplicateKeys=1]="ReplaceDuplicateKeys",e[e.IgnoreDuplicateKeys=2]="IgnoreDuplicateKeys"}(t.CollectionTypeEnum||(t.CollectionTypeEnum={}))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isString=function(e){return"string"==typeof e},t.isNumber=function(e){return"number"==typeof e},t.isBoolean=function(e){return"boolean"==typeof e},t.isFunction=function(e){return"function"==typeof e},t.isArray=function(e){return e instanceof Array},t.isObject=function(e){return typeof e==typeof{}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(1),n=i(38),r=i(6);function o(e,t){let i;for(i=t;i;){if(i===e)return!0;i=i.parentNode}return!1}t.removeSubclassFromAllElements=function(e,t,i){let n,r,o;for(n=document.getElementsByClassName(e),r=0;r<n.length;r+=1)o=n[r],o!==i&&s.removeClass(o,t)},t.isChildEventTarget=function(e,t){return o(t,e.target)},t.isChild=o,t.appendChildren=function(e,...t){let i;for(i=0;i<t.length;i+=1)e.appendChild(t[i])},t.clearChildren=function(e){for(let t=e.children.length-1;t>=0;t-=1){let i=e.children[t];e.removeChild(i)}},t.moveElemRelativePosition=function(e,t){let i=parseInt(e.style.top)||0,s=parseInt(e.style.left)||0;e.style.top=i+t.y+"px",e.style.left=s+t.x+"px"},t.resetPageFocus=function(){let e=-1;r.isNullOrUndefined(document.body.tabIndex)&&(e=document.body.tabIndex),document.body.tabIndex=0,document.body.focus(),document.body.tabIndex=e},t.removeElement=function(e){e.parentNode&&e.parentNode.removeChild(e)},t.select=function(e){if(n.isSelectable(e))e.select();else{let t=document.createRange();t.selectNodeContents(e);let i=window.getSelection();i.removeAllRanges(),i.addRange(t)}},t.HTML_TAB="&nbsp;&nbsp;&nbsp;&nbsp;",t.encodeForHTML=function(e){return e=(e=(e=(e=(e=e.replace(/&/g,"&amp;")).replace(/</g,"&lt;")).replace(/>/g,"&gt;")).replace(/\\n/g,"<br>")).replace(/\\t/g,t.HTML_TAB)},t.decodeFromHTML=function(e){return e=(e=(e=(e=(e=(e=(e=(e=e.replace(/&amp;/g,"&")).replace(/&lt;/g,"<")).replace(/&gt;/g,">")).replace(/&quot;/g,'"')).replace(/&apos;/g,"'")).replace(/<br>/g,"\n")).replace(new RegExp(t.HTML_TAB,"g"),"\t")).replace(/&nbsp;/g," ")},t.replaceElemWithElem=function(e,t){if(!e.parentNode)return;let i=e.nextSibling,s=e.parentNode;s.removeChild(e),s.insertBefore(t,i)},t.isVisible=function(e){return 0!==e.offsetWidth||0!==e.offsetHeight}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(4),n=i(0),r=i(1),o=i(14);class a extends s.Field{_parseFieldTemplate(e){super._parseFieldTemplate(e),this._isCollapsed=!e.isExpanded&&!e.hideTitle&&!e.uncollapsible}_createCollapsibleTitle(){let e="sectionHeaderContainer";this._config.hideTitle&&(e+=" hidden"),this._elems.titleContainer=n.createElement({cls:e,parent:this._elems.base,eventListeners:{click:()=>{this._onCaretClicked()}}}),this._elems.title=n.createSimpleElement("","sectionHeader",this._config.label,null,null,this._elems.titleContainer),this._config.uncollapsible||(this._elems.collapseElem=n.createSimpleElement("","caret","▵",null,null,this._elems.titleContainer),r.addClass(this._elems.base,"collapsible"),this._isCollapsed&&(r.addClass(this._elems.base,"collapsed"),this._isCollapsed=!0))}_onCaretClicked(){this._config.uncollapsible||(this._isCollapsed?this.expand():this.collapse())}collapse(){this._isTransitioning||(this._isTransitioning=!0,this._isCollapsed=!0,o.transition(this._elems.childrenContainer,{height:"<height>",overflow:"hidden"},{height:"0",overflow:"hidden"},500).then(()=>{r.addClass(this._elems.base,"collapsed"),this._isTransitioning=!1}))}expand(){this._isTransitioning||(this._isTransitioning=!0,this._isCollapsed=!1,r.removeClass(this._elems.base,"collapsed"),o.transition(this._elems.childrenContainer,{height:"0",overflow:"hidden"},{height:"<height>"},500).then(()=>{this._isTransitioning=!1}))}}t.CollapsibleField=a,a._uncoloredStyles={".kipFormElem.collapsible .formChildren":{},".kipFormElem.collapsible.collapsed .formChildren":{height:"0",overflow:"hidden"},".kipFormElem.collapsible .sectionHeaderContainer":{display:"flex",justifyContent:"space-between",boxSizing:"border-box",cursor:"pointer",padding:"10px 10px",alignItems:"center",width:"calc(100% + 20px)",marginLeft:"-10px",borderRadius:"30px",nested:{"&.hidden":{display:"none"}}},".kipFormElem.collapsible .caret":{transformOrigin:"50% 50%",width:".8em",fontSize:"1em",transition:"all ease-in-out .1s",cursor:"pointer",color:"<formSubTheme>"},".kipFormElem.collapsible.collapsed .caret":{transform:"rotate(180deg)"},".kipFormElem.collapsible .sectionHeaderContainer:hover":{backgroundColor:"rgba(0,0,0,.05)"}}},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(60)),s(i(62)),s(i(196)),s(i(22)),s(i(59)),s(i(28)),s(i(40))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(0);t.createSVG=function(e){try{return e.namespace="http://www.w3.org/2000/svg",e.type="svg",e.attr||(e.attr={}),e.attr.version="1.1",e.attr.width||(e.attr.width="0"),e.attr.height||(e.attr.height="0"),e.attr.viewbox||(e.attr.viewbox="0 0 0 0"),e.attr.preserveAspectRatio||(e.attr.preserveAspectRatio="xMinYMin meet"),s.createSVGElement(e)}catch(e){throw new Error("svg creation failed")}},t.createSVGElem=function(e){try{return e.namespace="http://www.w3.org/2000/svg",s.createSVGElement(e)}catch(e){return console.log("Error creating SVG element"),null}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(55);t.bind=function(e,t,i,n){return s.Binder.bind(e,t,i,n)?e():null}},function(e,t,i){"use strict";function s(e,t,i){if(!e)return-1;for(let s=0;s<e.length;s+=1)if(i){if(i(e[s],t))return s}else if(e[s]===t)return s;return-1}Object.defineProperty(t,"__esModule",{value:!0}),t.contains=function(e,t,i){return-1!==s(e,t,i)},t.indexOf=s,t.removeElemFromArr=function(e,t,i){let s,n;for(i||(i=function(e,t){return e===t}),s=e.length-1;s>=0;s-=1)i(e[s],t)&&(n=e.splice(s,1));return n}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(16);t.isHTMLElement=function(e){return!!e&&(!s.isDrawable(e)&&!!e.appendChild)},t.isSelectable=function(e){return!!e.select}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isInterface=function(e,t){let i,s,n=!0;for(i in t)if(t.hasOwnProperty(i)&&(s=t[i],s&&void 0===e[i])){n=!1;break}if(!n)return!1;let r=!1;for(i in e)if(e.hasOwnProperty(i)&&void 0===t[i]){r=!0;break}return!r}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(22);function n(e){return Math.PI*e/180}t.degreesToRadians=n,t.radiansToDegrees=function(e){return 180*e/Math.PI},t.getEndPoint=function(e,t,i){let s=n(t);return{x:Math.cos(s)*i+e.x,y:Math.sin(s)*i+e.y}},t.getCentralPoint=function(e){return{x:e.offsetLeft+e.offsetWidth/2,y:e.offsetTop+e.offsetWidth/2}},t.getAngle=function(e,t){let i,s,n,r,o;return i=t.x-e.x,s=t.y-e.y,0===i?s<0?270:90:0===s?i<0?180:0:(n=i*s>0?1:-1,r=i<0?Math.PI:0,o=Math.atan(Math.abs(s)/Math.abs(i)),o=o*n+r,o*(180/Math.PI))},t.getDistance=function(e,t){let i,s,n;return s=e.x-t.x,n=e.y-t.y,i=Math.sqrt(s*s+n*n),i},t.calculatePolygonInternalAngle=function(e){return s.roundToPlace(n(360/e),1e3)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.HUE=1]="HUE",e[e.SATURATION=2]="SATURATION",e[e.LIGHTNESS=3]="LIGHTNESS",e[e.ALPHA=4]="ALPHA"}(t.HSLPieceEnum||(t.HSLPieceEnum={})),function(e){e[e.RED=0]="RED",e[e.GREEN=1]="GREEN",e[e.BLUE=2]="BLUE",e[e.ALPHA=3]="ALPHA"}(t.RGBEnum||(t.RGBEnum={}))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(26),n=i(6),r=i(43),o=i(7),a=i(123),l=i(41),u=i(124),h=i(22);class d extends s.NamedClass{constructor(){super("Color"),this._alpha=1}set alpha(e){e=Math.min(1,Math.max(0,e)),this._alpha=e}get alpha(){return this._alpha}set red(e){e=Math.min(255,Math.max(0,Math.round(e))),this._red=e}get red(){return this._red}set green(e){e=Math.min(255,Math.max(0,Math.round(e))),this._green=e}get green(){return this._green}set blue(e){e=Math.min(255,Math.max(0,Math.round(e))),this._blue=e}get blue(){return this._blue}set hue(e){e=Math.min(360,Math.max(0,Math.round(e))),this._hue=e}get hue(){return this._hue}set saturation(e){e=Math.min(100,Math.max(0,Math.round(e))),this._saturation=e}get saturation(){return this._saturation}set lightness(e){e=Math.min(100,Math.max(0,Math.round(e))),this._lightness=e}get lightness(){return this._lightness}get luminance(){return n.isNullOrUndefined(this._luminance)&&this._calculateLuminance(),this._luminance}toRgbaString(){return this.toRgbString(!0)}toRgbString(e){let t;return t="rgb"+(e?"a":"")+"("+this._red+", "+this._green+", "+this._blue,e&&(t+=", "+this._alpha),t+=")",t}toHslString(e){let t;return this._hue||this.generateHslValues(),t="hsl"+(e?"a":"")+"("+this._hue+", "+this._saturation+"%, "+this._lightness+"%",e&&(t+=", "+this._alpha),t+=")",t}toHslaString(){return this.toHslString(!0)}toHexString(e){let t;return t="#",t+=r.fullHexString(this._red,2),t+=r.fullHexString(this._green,2),t+=r.fullHexString(this._blue,2),e&&(t+=r.fullHexString(this._alpha,2)),t}generateHslValues(){let e,t,i,s,n,r,o,a,l;if(e=this._red/255,t=this._green/255,i=this._blue/255,n=Math.max(e,t,i),r=Math.min(e,t,i),s=n-r,l=(n+r)/2,n===r)return this._hue=0,this._saturation=0,void(this._lightness=Math.round(100*l));a=l>.5?s/(2-n-r):s/(n+r),n===e?(o=(t-i)/s,t<i&&(o+=6)):o=n===t?(i-e)/s+2:(e-t)/s+4,o/=6,this._hue=Math.round(3600*o)/10,this._saturation=Math.round(1e3*a)/10,this._lightness=Math.round(1e3*l)/10,this._startHue||(this._startHue=this._hue,this._startSaturation=this._saturation,this._startLightness=this._lightness)}generateRgbValues(){let e,t,i,s,n,r,o;for(e=this._hue/360,t=this._saturation/100,i=this._lightness/100,0===t&&(this._red=this._green=this._blue=i,this._red*=255,this._green*=255,this._blue*=255),n=i<.5?i*(1+t):i+t-i*t,s=2*i-n,o=-1;o<=1;o+=1)r=e+-o/3,r<0?r+=1:r>1&&(r-=1),r<1/6?this.updateRgbValue(o+1,255*(s+6*(n-s)*r)):r<.5?this.updateRgbValue(o+1,255*n):r<2/3?this.updateRgbValue(o+1,255*(s+(n-s)*(2/3-r)*6)):this.updateRgbValue(o+1,255*s)}_parseFromHexColor(e,t){let i,s,n,r,a,l;if(a=/^#?(?:[0-9A-Fa-f]{3,4}){1,2}$/,!a.test(e))return!1;for("#"===o.charAt(e,0)&&(e=o.rest(e,1)),l=e.length<6?1:2,i=0;i<e.length;i+=l)n=e.substr(i,l),1===l&&(n+=n),s=parseInt(n,16),this.updateRgbValue(i/l,s),i>4&&(r=!0);return r||(this._alpha=t||1),!0}_parseFromRgbColor(e,t){let i,s,n;if(i=/rgb\((?:([0-9]{1-3}), ?){3}\)/,s=/rgba\((?:([0-9]{1-3}), ?){3}, ?([0-9]{0,1}(?:\.[0-9]+)?)\)/,i.test(e))n=i.exec(e);else{if(!s.test(e))return!1;n=s.exec(e)}return this._red=+n[1],this._green=+n[2],this._blue=+n[3],void 0===n[4]&&void 0===t||(this._alpha=+n[4]||t),!0}_parseFromHslColor(e,t){let i,s,n;if(i=/hsl\(([0-9]{1,3}), ?([0-9]{1,3})%, ?([0-9]{1,3})%\)/,s=/hsla\(([0-9]{1,3}), ?([0-9]{1,3})%, ?([0-9]{1,3})%, ?([0-9]{0,1}(?:\.[0-9]+)?)\)/,i.test(e))n=i.exec(e);else{if(!s.test(e))return!1;n=s.exec(e)}return this._hue=Math.round(10*parseFloat(n[1]))/10,this._saturation=Math.round(10*parseFloat(n[2]))/10,this._lightness=Math.round(10*parseFloat(n[3]))/10,void 0===n[4]&&void 0===t||(this._alpha=parseFloat(n[4])||t),this.generateRgbValues(),!0}_parseColorString(e,t){let i;return i=this._parseFromRgbColor(e,t),!!i||(i=this._parseFromHexColor(e,t),!!i||(i=this._parseFromHslColor(e,t),!!i))}updateRgbValue(e,t){switch(e){case a.RGBEnum.RED:this.red=t;break;case a.RGBEnum.GREEN:this.green=t;break;case a.RGBEnum.BLUE:this.blue=t;break;case a.RGBEnum.ALPHA:this.alpha=t}}updateHslValue(e,t){switch(e){case l.HSLPieceEnum.HUE:this.hue=t;break;case l.HSLPieceEnum.SATURATION:this.saturation=t;break;case l.HSLPieceEnum.LIGHTNESS:this.lightness=t;break;case l.HSLPieceEnum.ALPHA:this.alpha=t}}getNextColor(e,t){var i,s=[];for(this._startHue||this.generateHslValues(),s[0]=e,s[1]=(e+1)%3,s[2]=(e+2)%3,i=0;i<s.length&&this.rotateAppropriateHSLValue(s[i]);i+=1);return this.generateRgbValues(),this.toHexString(t)}rotateAppropriateHSLValue(e){var t,i;switch(e){case l.HSLPieceEnum.SATURATION:t=this.rotateSaturation(),i=this._startSaturation;break;case l.HSLPieceEnum.LIGHTNESS:t=this.rotateLightness(),i=this._startLightness;break;case l.HSLPieceEnum.HUE:t=this.rotateHue(),i=this._startHue}return t===i}rotateHue(){return this._hue=this.rotateHslValue(this._hue,u.HUE_INTERVAL,360),this._hue}rotateSaturation(){return this._saturation=this.rotateHslValue(this._saturation,u.SATURATION_INTERVAL,100,u.SATURATION_LIMITS.max,u.SATURATION_LIMITS.min)}rotateLightness(){return this._lightness=this.rotateHslValue(this._lightness,u.LIGHT_INTERVAL,100,u.LIGHTNESS_LIMITS.max,u.LIGHTNESS_LIMITS.min)}rotateHslValue(e,t,i,s,n){var r;if(r=e+=t,r%=i,!s)return h.roundToPlace(r,10);if(!n&&0!==n)return h.roundToPlace(r,10);for(;r<n||r>s;)r=e+=t,r%=i;return h.roundToPlace(r,10)}getApparentColor(e){let t,i;return t=e._red?e:new c(e),!!t._parsedCorrectly&&(i=1-this._alpha,this._red=Math.round(this._red*this._alpha+t._red*i),this._green=Math.round(this._green*this._alpha+t._green*i),this._blue=Math.round(this._blue*this._alpha+t._blue*i),this._alpha=1,!0)}compare(e,t){var i;return t||(t={hue:1,saturation:.04,lightness:.04,alpha:.04}),e.generateHslValues(),this.generateHslValues(),(i={hue:e._hue-this._hue,saturation:e._saturation-this._saturation,lightness:e._lightness-this._lightness,alpha:e._alpha-this._alpha}).total=0,i.total+=Math.abs(i.hue)*(t.hue||0),i.total+=Math.abs(i.saturation)*(t.saturation||0),i.total+=Math.abs(i.lightness)*(t.lightness||0),i.total+=Math.abs(i.alpha)*(t.alpha||0),i}averageIn(e,t){let i;return e.generateHslValues(),this.generateHslValues(),i={hue:(this._hue+e._hue)/2,saturation:(this._saturation+e._saturation)/2,lightness:(this._lightness+e._lightness)/2,alpha:(this._alpha+e._alpha)/2},t?i:(this._hue=Math.round(i.hue),this._saturation=Math.floor(10*i.saturation)/10,this._lightness=Math.floor(10*i.lightness)/10,this._alpha=Math.floor(10*i.alpha)/10,this)}equals(e){return this.toHexString(!0)===e.toHexString(!0)}isDark(){return this._hue||this.generateHslValues(),this.luminance<=70}isLight(){return this._hue||this.generateHslValues(),this.luminance>70}getLightness(){return this._hue||this.generateHslValues(),this._lightness}_calculateLuminance(){this._red||this.generateRgbValues(),this._luminance=(.2126*this._red+.7152*this._green+.0722*this._blue)/2.55}}t.Color=d;t.RGBColor=class extends d{constructor(e,t,i,s){super(),"string"==typeof e?this._parsedCorrectly=this._parseFromRgbColor(e,t):(this.red=e,this.green=t,this.blue=i,this.alpha=s,this._parsedCorrectly=!0)}getCurrentColor(e){return this.toRgbString(e)}};t.HSLColor=class extends d{constructor(e,t,i,s){super(),"string"==typeof e?this._parsedCorrectly=this._parseFromHslColor(e,t):(this.hue=e,this.saturation=t,this.lightness=i,this.alpha=s,this._parsedCorrectly=!0)}getCurrentColor(e){return this.toHslString(e)}};t.HexColor=class extends d{constructor(e,t){super(),this._parsedCorrectly=this._parseFromHexColor(e)}getCurrentColor(e){return this.toHexString(e)}};class c extends d{constructor(e,t){super(),this._parsedCorrectly=this._parseColorString(e,t)}getCurrentColor(e){return this.toHexString(e)}}t.AnyColor=c},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.padToDigits=function(e,t){let i=e.toString().split("");for(;i.length<t;)i.splice(0,0,"0");return i.join("")},t.fullHexString=function(e,t){let i,s;if(t=t||0,i=e.toString(16),i.length<t)for(s=0;s<t-i.length;s+=1)i="0"+i;return i}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(5);t.Tree=class{constructor(e){this._data=e,this._subTrees={}}isLeafNode(){return!s.getNextKey(this._subTrees)}getDepth(){let e=[1];return s.map(this._subTrees,t=>{e.push(t.getDepth()+1)}),Math.max(...e)}toString(){let e=[];s.map(this._subTrees,t=>{e.push(t.toString())});let t=[];return t.push(this._data.toString()),e.length>0&&(t.push("->("),t.push(e.join(",")),t.push(")")),t.join("")}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(2),n=i(1),r=i(32),o=i(0);class a extends s.Drawable{constructor(e,t){super(e),this._targets=[],this.addTarget(t),this._onRender(),this._elems.base&&(this._addEventListeners(),n.addClass(this._elems.base,"draggable"))}get gridSize(){return this._gridSize}set gridSize(e){this._gridSize=e}_addDraggingSignifier(){this._signifier=o.createElement({cls:"dragSignifier",children:[{cls:"dot"},{cls:"dot"},{cls:"dot"},{cls:"dot"},{cls:"dot"},{cls:"dot"},{cls:"dot"},{cls:"dot"},{cls:"dot"}],parent:this._elems.base})}addTarget(e){if(!e)return;let t=this._createDraggableTarget(e);this._targets.push(t)}_updateMousePoint(e){this._currentMousePoint={x:e.clientX,y:e.clientY},this._startMousePoint||(this._startMousePoint=this._currentMousePoint)}_calculateDelta(){if(!this._currentMousePoint)return null;let e={x:this._currentMousePoint.x-this._startMousePoint.x,y:this._currentMousePoint.y-this._startMousePoint.y};return this._gridSize>1&&(e.x=this._normalizeToGrid(e.x,this.gridSize),e.y=this._normalizeToGrid(e.y,this.gridSize)),e}_normalizeToGrid(e,t){let i=Math.abs(e),s=Math.floor(i/t)*t;return i%t>t/2&&(s+=t),e<0&&(s*=-1),s}_onDragStart(e){this._isDragging=!0,a.currentDraggable=this,n.addClass(this._elems.base,"dragging");for(let e of this._targets)n.addClass(e.base,"draggingOver");this._updateMousePoint(e)}_onMove(e){this._isDragging&&this._updateMousePoint(e)}_onDrop(e){if(this._isDragging){l.currentDraggableTarget&&(a.currentDraggable=null,this._startMousePoint=null,this._currentMousePoint=null),this._isDragging=!1,n.removeClass(this._elems.base,"dragging");for(let e of this._targets)n.removeClass(e.base,"draggingOver")}}_onRender(){if(window.requestAnimationFrame(()=>{this._onRender()}),!this._elems.base)return;let e=this._calculateDelta();e&&(r.moveElemRelativePosition(this.base,e),this._startMousePoint.x+=e.x,this._startMousePoint.y+=e.y)}}t.GenericDraggable=a,a._uncoloredStyles={".draggingOver":{cursor:"-webkit-grabbing !important"},".draggable":{position:"absolute !important",cursor:"-webkit-grab",transition:"all ease-in-out .03s",nested:{div:{cursor:"-webkit-grab"},"&.grabbing":{cursor:"-webkit-grabbing",nested:{div:{cursor:"-webkit-grabbing"}}},"&.dragging":{boxShadow:"5px 5px 20px 10px rgba(0,0,0,.2) !important",zIndex:"100",cursor:"-webkit-grabbing",opacity:"1",transformOrigin:"50% 50%",transform:"rotate(0deg)"},".dragSignifier":{display:"flex",position:"absolute",left:"5px",top:"5px",width:"19px",flexWrap:"wrap",opacity:"0.5",nested:{"&:hover":{opacity:"1"},".mobile &":{display:"none"},".dot":{borderRadius:"50%",width:"3px",height:"3px",margin:"1px",backgroundColor:"rgba(0,0,0,.3)",flexShrink:"0"}}}}},".droppable":{cursor:"-webkit-dragging"}};class l extends s.Drawable{constructor(e){super(),this._elems.base=e,this._addEventListeners(),n.addClass(this._elems.base,"droppable")}_createElements(){}_onDragEnter(e){l.currentDraggableTarget=this}_onDragLeave(e){l.currentDraggableTarget===this&&(l.currentDraggableTarget=null)}_onDrop(e){a.currentDraggable&&l.currentDraggableTarget.base.appendChild(a.currentDraggable.base)}}t.DraggableTarget=l},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(23);class n extends s.Popup{constructor(e,t,i){super(i),this.setTitle(t||"Uh-oh...that wasn't supposed to happen"),this.addContent("","",e),this.addButton("Okay",()=>{this.erase(),this._notifyClose()})}set onClose(e){this._onClose=e}_notifyClose(){this._onClose&&this._onClose()}}t.ErrorPopup=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(4),n=i(3),r=i(0),o=i(1),a=i(5),l=i(37),u=i(11);class h extends s.Field{constructor(e,t){super(e,t)}get _type(){return n.FieldTypeEnum.TOGGLE_BUTTON}get _defaultCls(){return"toggleBtns"}_getUncoloredStyles(){return this._mergeThemes(s.Field._uncoloredStyles,h._uncoloredStyles)}_parseFieldTemplate(e){super._parseFieldTemplate(e),this._options=e.options}_onCreateElements(){this._elems.childrenContainer=r.createSimpleElement("","formChildren","",null,null),this._createOptionsElements(),this._handleStandardLayout()}_flexLayout(){o.addClass(this._elems.base,"flex"),this._createStandardLabel(this._elems.base),this._appendChildren()}_multiLineLayout(){o.addClass(this._elems.base,"multiline"),this._createStandardLabel(this._elems.base),this._appendChildren()}_tableLayout(){this._multiLineLayout()}_appendChildren(){this._elems.base.appendChild(this._elems.childrenContainer),this._elems.postChildrenContainer&&this._elems.base.appendChild(this._elems.postChildrenContainer)}_labelAfterLayout(){o.addClass(this._elems.base,"labelLast"),this._appendChildren(),this._createStandardLabel(this._elems.base)}_updateOptions(e){this._clearOptions(),this._options=e,this._config.options=e,this._createOptionsElements()}_clearOptions(){this._buttons=[],this._elems.childrenContainer.innerHTML=""}_createOptionsElements(){a.map(this._options,e=>{this._createOptionElement(e)})}_createOptionElement(e){let t=r.createElement({id:this._id+"btn"+e.value,cls:"toggleBtn",content:e.label,parent:this._elems.childrenContainer,eventListeners:{click:()=>{this._selectBtn(t,e.value),this._changeEventFired()}}});return this._shouldBeSelected(e)&&this._selectBtn(t,e.value),this._buttons||(this._buttons=[]),this._buttons.push({key:e.value,btn:t}),t}_getValueFromField(){return this._data}update(e,t){!this._testEquality(e)&&super.update(e,t)}_updateUI(e){let t=this._getButtonToUpdate(e);u.wait(100).then(()=>{if(!this._selectBtn)throw console.log("missing _selectBtn: "+this._selectBtn),new Error("missing _select function");this._selectBtn(t,e)})}_getButtonToUpdate(e){let t=l.indexOf(this._buttons,{key:e,btn:null},(e,t)=>this._equalityTest(e,t));if(-1!==t)return this._buttons[t].btn}_equalityTest(e,t){return e.key===t.key}_testEquality(e){return!1}}t.ToggleButtonField=h,h._uncoloredStyles={".toggleBtns .formChildren":{display:"flex",flexWrap:"wrap",marginLeft:"0",marginTop:"5px"},".toggleBtns.flex .formChildren":{},".toggleBtn":{borderRadius:"3px",boxShadow:"1px 1px 4px 2px rgba(0,0,0,.1)",padding:"4px",marginRight:"10px",cursor:"pointer",textAlign:"center",fontSize:"0.8em",border:"1px solid transparent",opacity:"0.7",transition:"all ease-in-out .1s"},".toggleBtn.selected, .toggleBtn:hover":{border:"1px solid <formTheme>",transform:"scale(1.08)"},".toggleBtn.selected":{opacity:"1"}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.FORWARD=1]="FORWARD",e[e.BACKWARD=-1]="BACKWARD",e[e.MOVE=0]="MOVE"}(t.DirectionType||(t.DirectionType={}))},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function o(e){try{l(s.next(e))}catch(e){r(e)}}function a(e){try{l(s.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}l((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(3),r=i(33),o=i(4),a=i(8),l=i(5),u=i(0),h=i(24),d=i(1);class c extends r.CollapsibleField{constructor(e,t,i){super(e,t),a.isField(t)&&(i=t.children),this._parseChildren(i)}_getUncoloredStyles(){return this._mergeThemes(c._uncoloredStyles,r.CollapsibleField._uncoloredStyles,o.Field._uncoloredStyles)}setThemeColor(e,t,i){super.setThemeColor(e,t),this._children&&(a.isField(this._children)?this._children.setThemeColor(e,t,i):l.map(this._children,s=>{s.setThemeColor(e,t,i)}))}get children(){return this._children}get _defaultCls(){return"kipFormElem section"}get _defaultValue(){return{}}get _type(){return n.FieldTypeEnum.SECTION}_onCreateElements(){this._createCollapsibleTitle(),this._elems.childrenContainer=u.createSimpleElement("","formChildren","",null,null,this._elems.base),this._createStyles(),this._updateClsBasedOnLayout()}_createClonedElement(e){return new c(this._id+e,this)}_parseChildren(e){if(e)if(a.isField(e)){let t=this._parseChild(e);this._children=t}else this._children={},l.map(e,(e,t)=>{let i=this._parseChild(e);this._children[t]=i});else e={}}_parseChild(e){let t=this._cloneFormElement(e);return this._applyColors(t),t.draw(this._elems.childrenContainer),h.formEventHandler.addEventListener(h.FORM_ELEM_CHANGE,{func:e=>{e.context.key===t.id&&window.setTimeout(()=>{this._updateInternalData(!0),this._dispatchChangeEvent(t.id)},0)},target:t,uniqueId:this._id+"|"+t.id}),t}_updateInternalData(e){return s(this,void 0,void 0,(function*(){let t;if(a.isField(this._children))t=yield this._children.save(e);else{t={};let i=l.map(this._children,(i,n)=>s(this,void 0,void 0,(function*(){return this._updateInternalField(n,i,t,e)})));yield Promise.all(i)}return t}))}_updateInternalField(e,t,i,n){return s(this,void 0,void 0,(function*(){return i[e]=yield t.save(n),Promise.resolve()}))}save(e){return s(this,void 0,void 0,(function*(){return this._data=yield this._updateInternalData(e),this._data}))}canSave(){if(a.isField(this._children))return this._children.canSave();{let e={hasErrors:!1,hasMissingRequired:!1};return l.map(this._children,t=>{let i=t.canSave();e.hasErrors=e.hasErrors||i.hasErrors,e.hasMissingRequired=e.hasMissingRequired||i.hasMissingRequired},()=>e.hasErrors&&e.hasMissingRequired),e}}clear(){a.isField(this._children)?this._children.clear():l.map(this._children,(e,t)=>{e.clear()})}focus(){if(!this._children)return!1;if(a.isField(this._children))return this._children.focus();{let e;return l.map(this._children,(t,i)=>{t.focus()&&(e=!0)},()=>e),e}}update(e,t){e&&(a.isField(this._children)?this._children.update(e,t):l.map(this._children,(i,s)=>{i.update(e[s],t)}))}_getValueFromField(){return this._data}_validate(e){return!0}addChildElement(e,t){return!a.isField(this._children)&&(this._children||(this._children={}),this._children[e]=this._parseChild(t),!0)}_updateClsBasedOnLayout(){let e;switch(this._config.layout){case n.FormElementLayoutEnum.FLEX:e="flex";break;case n.FormElementLayoutEnum.TABLE:e="table";break;case n.FormElementLayoutEnum.LABEL_AFTER:case n.FormElementLayoutEnum.MULTILINE:default:e="multiline"}d.addClass(this._elems.childrenContainer,e)}getField(e){if(e===this._id)return this;if(a.isField(this._children))return this._children.getField(e);{let t;return l.map(this._children,i=>{t||(t=i.getField(e))},()=>!!t),t}}}t.SectionField=c,c._uncoloredStyles={".kipFormElem.section":{marginTop:"10px",marginBottom:"5px"},".kipFormElem .sectionHeader":{fontFamily:"OpenSansBold,Segoe UI,Helvetica",fontSize:"1.5em",color:"<formTheme>",fontWeight:"bold"},".kipFormElem .section .sectionHeader, .kipFormElem .array .sectionHeader":{fontSize:"1.2em",color:"<formSubTheme>"},".kipFormElem.section > .formChildren .section.collapsible > .formChildren":{borderLeft:"1px solid <formTheme>",paddingLeft:"20px"},".kipFormElem.section > .formChildren .section > .sectionHeaderContainer.hidden + .formChildren":{borderLeft:"0 solid",paddingLeft:"0"},".kipFormElem.section > .formChildren.flex":{display:"flex",alignItems:"center",marginLeft:"0",nested:{"> .kipFormElem":{width:"auto"}}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.YES=1]="YES",e[e.NO=0]="NO"}(t.YesNoEnum||(t.YesNoEnum={}))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(84),n=i(17);t.HistoryChain=class{push(e){let t=new s.HistoryNode(e);if(!this._start)return this._start=t,this._end=t,void(this._curNode=t);this._curNode!==this._end&&this._clearToCurIdx(),this._end.next=t,t.previous=this._end,this._end=t,this._curNode=this._end}_clearToCurIdx(){this._end=this._curNode,this._curNode.next=null}navigateBack(){return this._curNode.previous?(window.setTimeout(()=>{this._curNode=this._curNode.previous},0),this._curNode.previous.data):null}navigateForward(){return this._curNode.next?(window.setTimeout(()=>{this._curNode=this._curNode.next},0),this._curNode.next.data):null}updateCurrentState(e){if(!this._curNode)return!1;let t=this._curNode.data,i=n.combineObjects(t,e,!0);return this._curNode.data=i,!0}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(21),n=i(13),r=i(22),o=i(6);class a extends s.SVGElem{constructor(e,t,...i){e&&i.splice(0,0,e),super(t,...i)}_setAttributes(e,t){return e.type="path",e.d="",this._points=t||[],e}_createElements(){this._startPath(this._attributes);let e=!0,t=this._points;for(let i of t)e?(this.moveTo(i),e=!1):i.controls?this.curveTo(i):l(i)?this.arcTo(i):this.lineTo(i);this._attributes.noFinish?this.finishPathWithoutClosing():this.closePath()}_updateExtrema(){this._extrema={max:null,min:null};for(let e of this._points)this._updateExtremaFromPoint(e)}_updateExtremaFromPoint(e){if(!this._extrema.max||!this._extrema.min)return this._extrema.max=n.cloneObject(e),void(this._extrema.min=n.cloneObject(e));e.x<this._extrema.min.x&&(this._extrema.min.x=e.x),e.y<this._extrema.min.y&&(this._extrema.min.y=e.y),e.x>this._extrema.max.x&&(this._extrema.max.x=e.x),e.y>this._extrema.max.y&&(this._extrema.max.y=e.y)}_checkForCurrentPath(){if(!this._elems.base)throw new Error("no path started")}_constructPathAttribute(e,t){let i="";return i=e+this._pointToAttributeString(t)+"\n",i}_pointToAttributeString(e){return e.x+" "+e.y}_addToPathAttribute(e){this._checkForCurrentPath();let t=this._elems.base.getAttribute("d")||"";return t+=e,this._elems.base.setAttribute("d",t),!0}_startPath(e){return super._createElements(this._attributes),this._elems.base}lineTo(e){this._checkForCurrentPath(),this._addToPathAttribute(this._constructPathAttribute("L",e))}moveTo(e){this._checkForCurrentPath(),this._addToPathAttribute(this._constructPathAttribute("M",e))}curveTo(e){let t;this._checkForCurrentPath(),t="C"+this._pointToAttributeString(e.controls[0])+", ",t+=this._pointToAttributeString(e.controls[1])+", ",t+=this._pointToAttributeString(e)+"\n",this._addToPathAttribute(t)}arcTo(e){let t;t="A"+this._pointToAttributeString(e.radius)+" ",t+=e.xRotation+" "+e.largeArc+" "+e.sweepFlag+" ",t+=this._pointToAttributeString(e)+"\n",this._addToPathAttribute(t)}closePath(){this._addToPathAttribute(" Z"),this.finishPathWithoutClosing()}finishPathWithoutClosing(){}_calculatePolygonPoint(e,t,i){return{x:e.x+r.roundToPlace(Math.sin(t)*i,10),y:e.y+r.roundToPlace(-1*Math.cos(t)*i,10)}}}function l(e){return!o.isNullOrUndefined(e.radius)}t.PathElement=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(7);t.UnitTester=class{test(e,t,i,s){s=s||"";let n=this.testEquality(t,i);return this._ui.renderTest({name:e,pass:n,actualResult:t,expectedResult:i,message:s}),n}assert(e,t,i,s){let n=t?i:s;this._ui.renderTest({name:e,pass:t,message:n})}startGroup(e){this._ui.startGroup(e)}startSubGroup(e){this._ui.startSubgroup(e)}_testFunction(e,t,i){this._ui.startSubgroup(t);for(let t=0;t<i.length;t+=1){let s=i[t],n=e.apply(window,s.params);this.test(this._getTestName(s),n,s.result)}}testEquality(e,t){return e.equals?e.equals(t):e===t}_getTestName(e){return e.details?e.details:s.format("({0}) ==> {1}",e.params.join(", "),e.result)}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(7);t.TestUI=class{constructor(){}_buildValueString(e){return e.actualResult&&e.expectedResult?e.pass?s.format("'{0}' = '{1}'",e.actualResult,e.expectedResult):s.format("'{0}' != '{1}'",e.actualResult,e.expectedResult):""}_passToString(e){return e?"pass":"fail"}}},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function o(e){try{l(s.next(e))}catch(e){r(e)}}function a(e){try{l(s.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}l((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(5),r=i(11);t.Binder=new class{constructor(){this._id=0,this._started=!1,this._boundDetails={},this._startAnimationLoop()}_getNextId(){return this._id+=1,this._id.toString()}bind(e,t,i,s){if(!e||!t)return"";let n=e();r.nextRender().then(()=>t(n));let o={id:this._getNextId(),eval:e,update:t,delete:i||(()=>!1),lastValue:n,equals:s||((e,t)=>e===t)};return this._boundDetails[o.id]=o,o.id}unbind(e){return!!this._boundDetails[e]&&(delete this._boundDetails[e],!0)}_startAnimationLoop(){this._started||this._onFrame()}_onFrame(){return s(this,void 0,void 0,(function*(){return n.map(this._boundDetails,e=>{this._handlingBinding(e)}),r.nextRender().then(()=>this._onFrame())}))}_handlingBinding(e){return s(this,void 0,void 0,(function*(){if(e.delete())return void this.unbind(e.id);let t=e.eval();e.equals(t,e.lastValue)||(e.lastValue=t,e.update(t))}))}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(7),n=i(12),r=i(1),o=i(5),a=i(13),l=i(6),u=i(26);class h extends u.NamedClass{constructor(){super("Stylable"),this._colors={},this._createStyles(),this._hasCreatedStyles=!0,this._registerMediaListeners()}static _buildThemeColorId(e){return s.format("<{0}>",e)}static _containedPlaceholder(e){let t=/<(.+?)>/.exec(e);return t&&t[1]?t[1]:""}static _findAllContainedPlaceholders(e){let t,i=JSON.stringify(e),s=[],n=/<(.+?)>/g;do{if(t=n.exec(i),!t)break;s.push(t[1])}while(t);return s}static _updateAllThemeColors(){o.map(this._themeColors,(e,t)=>{this._updateThemeColor(t)})}static _updateThemeColor(e){let t=a.cloneObject(this._themedStyles[e]||{});t&&(o.map(t,(i,s)=>{i&&(this._updateColorInClassDefinition(i,e),t[s]=i)}),this._createColoredStyles(t,e,!0))}static _updateColorInClassDefinition(e,t){let i=this._themeColors[t];if(!i)return;let s=!1;return o.map(e,(n,r)=>{if("object"==typeof n)return;let o=!1,a=n.split(" ");a.map((e,s)=>{this._containedPlaceholder(e)===t&&(a[s]=e.replace(new RegExp("<?"+t+">?","g"),i),o=!0)}),o?(e[r]=a.join(" "),s=!0):delete e[r]}),s}static _mergeIntoStyles(e){this._pageStyles=this._mergeThemes("",this._pageStyles,e),this._themedStyles=this._mergeColorThemes(e)}static _mergeThemes(e,...t){let i,s=[];for(i of t){let e=this._cleanStyles(i);s.push(e)}return this._combineThemes(e,...s)}static _mergeColorThemes(...e){let t;for(let i of e)t=this._findAllContainedPlaceholders(i);let i={};for(let s of t)i[s]||(this._themedStyles[s]?e.push(this._themedStyles[s]):this._themedStyles[s]={},this._themedStyles[s]=this._mergeThemes(s,...e));return this._themedStyles}static _combineThemes(e,...t){let i={};return t.map(t=>{o.map(t,(t,s)=>{i[s]||(i[s]={}),i[s]=this._mergeDefinition(e,t,i[s]),o.isEmptyObject(i[s])&&delete i[s]})}),i}static _mergeDefinition(e,...t){let i={};for(let s of t)o.map(s,(t,s)=>{let n=this._containedPlaceholder(t);(l.isNullOrUndefined(e)||n===e)&&(i[s]=t)});return i}static _mergeIntoFonts(e){o.map(e,(e,t)=>{this._customPageFonts[t]=e})}static _createStyles(e){let t=h._pageStyles;this._styleElems=this._sharedCreateStyles(t,this._styleElems,e),this._createFontStyles(e)}static _createFontStyles(e){let t=h._customPageFonts;this._customFontElem||(this._customFontElem=n.createStyleElement(!1),document.head.appendChild(this._customFontElem)),this._customFontElem.innerHTML="",o.map(t,(e,t)=>{let i=n.createFontDefinition(t,e,!0);this._customFontElem.innerHTML+=i.innerHTML})}static _createAllColoredStyles(e){this._updateAllThemeColors()}static _createColoredStyles(e,t,i){this._colorStyleElems[t]=this._sharedCreateStyles(e,this._colorStyleElems[t],i)}static _sharedCreateStyles(e,t,i){if(!e)return;let s=0;if(t&&t.length>0)for(let e of t)window.setTimeout(()=>{document.head.removeChild(e)},100);t=[];let r=this._addNewElement(t);return o.map(e,(e,o)=>{let a=n.createClass(o,e,!0,i,!0);a&&(s+=a.innerHTML.length,s>=1e4&&(r=this._addNewElement(t),s=0),r.innerHTML+=a.innerHTML)}),t}static _addNewElement(e){let t=n.createStyleElement(!1);return t.innerHTML='@charset "utf-8";\n',e.push(t),document.head.appendChild(t),t}static _cleanStyles(e,t){let i={};return o.map(e,(e,s)=>{let n,r=s.split(",");if(t)for(let e=0;e<r.length;e+=1){let i=r[e];-1!==i.indexOf("&")?r[e]=i.replace(/&/g,t):r[e]=t+" "+i}for(n of r){let t=this._cleanClassDef(n,e);i=this._combineThemes(null,i,t)}}),i}static _cleanClassDef(e,t){let i={};return i[e]={},o.map(t,(t,s)=>{if("nested"===s){let s=this._cleanStyles(t,e);i=this._combineThemes(null,i,s)}else i[e][s]=t}),i}get _uncoloredStyles(){return this.constructor._uncoloredStyles}get uncoloredStyles(){return this._getUncoloredStyles()}_getUncoloredStyles(){return this.constructor._uncoloredStyles}get _customFonts(){return this.constructor._customFonts}get customFonts(){return this._getCustomFonts()}_getCustomFonts(){return this.constructor._customFonts}_registerMediaListeners(){this._registerMediaListener("print","print"),this._registerMediaListener("(max-width:1200px)","mobile"),this._registerMediaListener("(max-width:1200px) and (min-width:801px)","large"),this._registerMediaListener("(max-width:800px) and (min-width:601px)","medium"),this._registerMediaListener("(max-width:600px) and (min-width:401px)","small"),this._registerMediaListener("(max-width:400px)","tiny")}_registerMediaListener(e,t,i){let s=window.matchMedia(e);s.addListener(e=>{e.matches?r.addClass(i||document.body,t):r.removeClass(i||document.body,t)}),s.matches&&r.addClass(i||document.body,t)}_applyColors(e){o.map(this._colors,(t,i)=>{t&&(e?e.setThemeColor(i,t,!0):this.setThemeColor(i,t,!0))})}setThemeColor(e,t,i){t&&e&&(i&&h._themeColors[e]||h._themeColors[e]!==t&&(h._themeColors[e]=t,h._updateThemeColor(e)))}_buildThemeColorId(e){return h._buildThemeColorId(e)}_mergeThemes(...e){return h._mergeThemes(null,...e)}mergeInStyles(...e){let t=h._mergeThemes(null,...e);return h._mergeIntoStyles(t),h._createStyles(!0),h._createAllColoredStyles(!0),this}_createStyles(e){if(!this.uncoloredStyles)return;if(h._createdStyles[this.constructor.name]&&!e)return;let t=a.cloneObject(this.uncoloredStyles);t=this._cleanStyles(t),h._mergeIntoStyles(t);let i=a.cloneObject(this._customFonts);h._mergeIntoFonts(i),h._createStyles(e),h._createAllColoredStyles(e),h._createdStyles[this.constructor.name]=!0}_cleanStyles(e,t){return h._cleanStyles(e,t)}}t.Stylable=h,h._pageStyles={},h._themedStyles={},h._themeColors={},h._colorStyleElems={},h._customPageFonts={},h._createdStyles={},h._customFonts={}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(18),n=i(10),r=i(9),o=i(13),a=i(62);class l extends s.CanvasElement{constructor(e,t){super(e),this._respondToScale=!1,this._elements=new n.Collection,this._referencePoint=t?{x:t.x,y:t.y}:{x:0,y:0},this._initializeRects()}get type(){return r.ElementType.Group}set referencePoint(e){this.adjustDimensions({x:e.x-this._referencePoint.x,y:e.y-this._referencePoint.y})}get isHoverTarget(){let e=!1;return this._elements.map(t=>{t.isHoverTarget&&(e=!0)}),e}_initializeRects(){this._dimensions={x:this._referencePoint.x,y:this._referencePoint.y,w:0,h:0},this._needsInitialDimensions=!0,super._initializeRects()}_onDraw(e){this._elements.map(e=>{e.draw()})}updateDimensions(e){if(super.updateDimensions(e),this._isOffScreen)return;this._elements.map(t=>{t.updateDimensions(e)})}addElement(e){e.adjustDimensions(this._referencePoint),this._elements.add(e.id,e),e.parent=this,this._canvas&&(e.canvas=this._canvas,this._canvas.needsRedraw=!0),this._updateInternalDimensionsFromElement(e)}_updateInternalDimensionsFromElement(e){let t={x:this._dimensions.x,y:this._dimensions.y,w:this._dimensions.w,h:this._dimensions.h};e.dimensions.x<t.x&&(t.x=e.dimensions.x),e.dimensions.x+e.dimensions.w>t.x+t.w&&(t.w=e.dimensions.x+e.dimensions.w-t.x),e.dimensions.y<t.y&&(t.y=e.dimensions.y),e.dimensions.y+e.dimensions.h>t.y+t.h&&(t.h=e.dimensions.y+e.dimensions.h-t.y),this._dimensions={x:t.x,y:t.y,w:t.w,h:t.h},this._needsInitialDimensions=!1}handleEvent(e,t,i){if(super.handleEvent(e,t,i),!t)return;e!==r.EventTypeEnum.LEAVE&&e!==r.EventTypeEnum.HOVER||this._clearHover(t,i);let s,n=this._findElementsAtPoint(t);for(s of n)s.handleEvent(e,t,i)}_clearHover(e,t){this._elements.map(i=>{i.isHoverTarget&&i.leave(e,t)})}_findElementsAtPoint(e){let t=[];return this._elements.map(i=>{i.isOffScreen||a.isPointContained(e,i.displayDimensions)&&t.push(i)}),t}removeElement(e){return!!this._elements.remove(e)&&(this._canvas.needsRedraw=!0,!0)}_cloneForEffect(e){o.clonePoint(this._referencePoint);let t=new l(e);return this._elements.map(e=>{let i=e._cloneForEffect(e.id+"|e");t.addElement(i)}),t}_scale(e){this._isEffect&&this._elements.map(t=>{t._scale(e)})}adjustDimensions(e){super.adjustDimensions(e),this._referencePoint.x+=e.x,this._referencePoint.y+=e.y,this._elements.map(t=>{t.adjustDimensions(e)})}_setCanvas(e){super._setCanvas(e),this._elements.map(e=>{e.canvas=this._canvas,this._updateInternalDimensionsFromElement(e)})}}t.CanvasGroup=l},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(9);class n{constructor(e){this._listeners=[],e?(this._fillColor=e.fillColor,this._strokeColor=e.strokeColor,this._font=e.font,this._fontFamily=e.fontFamily,this._fontSize=e.fontSize,this._fontVariant=e.fontVariant,this._strokeSize=e.strokeSize,this._textAlign=e.textAlign):(this._fillColor="#000",this._strokeColor="#000",this._strokeSize=1,this._fontFamily="Helvetica",this._fontSize=40,this._textAlign="left")}get fillColor(){return this._fillColor}set fillColor(e){this._fillColor=e,this._onChange(s.StyleChangeEnum.FILL_COLOR)}get strokeColor(){return this._strokeColor}set strokeColor(e){this._strokeColor=e,this._onChange(s.StyleChangeEnum.STROKE_COLOR)}get fontFamily(){return this._fontFamily}set fontFamily(e){this._fontFamily=e,this._onChange(s.StyleChangeEnum.FONT_FAMILY)}get fontVariant(){return this._fontVariant}set fontVariant(e){this._fontVariant=e,this._onChange(s.StyleChangeEnum.FONT_VARIANT)}get fontSize(){return this._fontSize}set fontSize(e){this._fontSize=e,this._onChange(s.StyleChangeEnum.FONT_SIZE)}get strokeSize(){return this._strokeSize}set strokeSize(e){this._strokeSize=e,this._onChange(s.StyleChangeEnum.STROKE_SIZE)}get textAlign(){return this._textAlign}set textAlign(e){this._textAlign=e,this._onChange(s.StyleChangeEnum.TEXT_ALIGN)}get font(){if(this._font)return this._font;return(this._fontVariant?this._fontVariant+" ":"")+(this._fontSize?this._fontSize+"px ":"")+this._fontFamily}set font(e){this._font=e,this._onChange(s.StyleChangeEnum.FONT)}addStyleChangeListener(e,t){this._listeners[e]||(this._listeners[e]=[]),this._listeners[e].push(t)}_onChange(e){if(!this._listeners[e])return;let t;for(t of this._listeners[e])t()}setStyle(e){this._saveOffOldStyle(e),this._applyStyleToContext(e,this)}restoreStyle(e){this._applyStyleToContext(e,this._oldStyle)}_saveOffOldStyle(e){this._oldStyle=new n,this._oldStyle.fillColor=e.fillStyle,this._oldStyle.strokeColor=e.strokeStyle,this._oldStyle.font=e.font,this._oldStyle.strokeSize=e.lineWidth,this._oldStyle.textAlign=e.textAlign}_applyStyleToContext(e,t){e.fillStyle=t.fillColor,e.strokeStyle=t.strokeColor,e.textAlign=t.textAlign,e.font=t.font,e.lineWidth=t.strokeSize}}t.CanvasElementStyle=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(28),n=i(29),r=i(61);function o(e,t){s.toBasicRect(e),s.toBasicRect(t);return!1}function a(e,t){return d(n.globalOffsetLeft(e),n.globalOffsetLeft(t))}function l(e,t){return d(-1*(n.globalOffsetLeft(e)+e.offsetWidth),-1*(n.globalOffsetLeft(t)+t.offsetWidth))}function u(e,t){return d(n.globalOffsetTop(e),n.globalOffsetTop(t))}function h(e,t){return d(-1*(n.globalOffsetTop(e)+e.offsetHeight),-1*(n.globalOffsetTop(t)+t.offsetHeight))}function d(e,t){return e<t?r.SortOrderEnum.CORRECT_ORDER:e>t?r.SortOrderEnum.INCORRECT_ORDER:r.SortOrderEnum.SAME}t.doElementsOverlap=function(e,t){let i,s;return i=e.getBoundingClientRect(),s=t.getBoundingClientRect(),o(i,s)},t.doRectsOverlap=o,t.doBasicRectsOverlap=function(e,t){let i,s;return e.x>=t.x&&e.x<=t.w+t.x&&(i=!0),t.x>=e.x&&t.x<=e.w+e.x&&(i=!0),e.y>=t.y&&e.y<=t.h+t.y&&(s=!0),t.y>=e.y&&t.y<=e.h+e.y&&(s=!0),i&&s},t.findBasicRectIntersection=function(e,t){let i,s=Math.max(e.x,t.x),n=Math.min(e.x+e.w,t.x+t.w),r=Math.max(e.y,t.y);return i={x:s,y:r,w:n-s,h:Math.min(e.y+e.h,t.y+t.h)-r},i},t.compareLeftPosition=a,t.getLeftMost=function(...e){return e.sort(a)[0]},t.compareRightPosition=l,t.getRightMost=function(...e){return e.sort(l)[0]},t.compareTopPosition=u,t.getTopMost=function(...e){return e.sort(u)[0]},t.compareBottomPosition=h,t.getBottomMost=function(...e){return e.sort(h)[0]}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(39);t.isIExtrema=function(e){return s.isInterface(e,{min:{x:0,y:0},max:{x:0,y:0}})},t.isClientRect=function(e){return!!s.isInterface(e,{top:1,bottom:1,left:1,right:1,height:1,width:1})},t.isSVGRect=function(e){return!!s.isInterface(e,{x:1,y:1,width:1,height:1})},t.isIBasicRect=function(e){return!!s.isInterface(e,{x:1,y:1,w:1,h:1})},t.isIPoint=function(e){return s.isInterface(e,{x:1,y:1,z:0})}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.INCORRECT_ORDER=1]="INCORRECT_ORDER",e[e.SAME=0]="SAME",e[e.CORRECT_ORDER=-1]="CORRECT_ORDER"}(t.SortOrderEnum||(t.SortOrderEnum={}))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(28);function n(e,t){let i=s.toBasicRect(t);return!(e.x<i.x)&&(!(e.x>i.x+i.w)&&(!(e.y<i.y)&&!(e.y>i.y+i.h)))}function r(e,t){let i,n;return i=s.toBasicRect(e),n=s.toBasicRect(t),!(i.x<n.x)&&(!(i.x+i.w>n.w+n.x)&&(!(i.y<n.y)&&!(i.y+i.h>n.h+n.y)))}t.isWithin=function(e,t,i,s){return s?e<i&&e>t:e<=i&&e>=t},t.isPointContained=n,t.isRectContained=r,t.isElementContained=function(e,t){return r(e.getBoundingClientRect(),e.getBoundingClientRect())},t.isShapeContained=function(e,t){let i;for(i of e)if(!n(i,t))return!1;return!0}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.LinkedNode=class{constructor(e){this._data=e,this._previous=null,this._next=null}get data(){return this._data}set data(e){this._data=e}get next(){return this._next}set next(e){this._next=e}get previous(){return this._previous}set previous(e){this._previous=e}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(19),n=i(44);class r extends n.Tree{constructor(e){super(e),this._count=1}add(e){switch(this._compare(e)){case o.EQUAL:this._count+=1;break;case o.LESS_THAN:this._addToSubTree("left",e);break;case o.GREATER_THAN:this._addToSubTree("right",e)}}_addToSubTree(e,t){this._subTrees[e]||(this._subTrees[e]=this._createSubTree(t),this._subTrees[e]._parent=this),this._subTrees[e].add(t)}remove(e){switch(this._compare(e)){case o.EQUAL:this._removeMe();break;case o.LESS_THAN:this._removeFromSubTree("left",e);break;case o.GREATER_THAN:this._removeFromSubTree("right",e)}}_removeMe(){let e=this._getRelationToParent();if(!e)return this._removeMeAsTopNode();delete this._parent[e]}_removeMeAsTopNode(){}_removeFromSubTree(e,t){this._subTrees[e]&&this._subTrees[e].remove(t)}exists(e){switch(this._compare(e)){case o.EQUAL:return!0;case o.LESS_THAN:return this._checkSubTreeExists("left",e);case o.GREATER_THAN:return this._checkSubTreeExists("right",e);default:return!1}}_checkSubTreeExists(e,t){return!!this._subTrees[e]&&this._subTrees[e].exists(t)}max(){return this._subTrees.right?this._subTrees.right.max():this._data}min(){return this._subTrees.left?this._subTrees.left.min():this._data}_compare(e){return s.isComparable(e)?this._compareObject(e):this._comparePrimitive(e)}_compareObject(e){if(!e)return o.ERR;let t=this._data;return t?e.equals(t)?o.EQUAL:e.lessThan(t)?o.LESS_THAN:e.greaterThan(t)?o.GREATER_THAN:o.ERR:o.ERR}_comparePrimitive(e){return e<this._data?o.LESS_THAN:e>this._data?o.GREATER_THAN:o.EQUAL}_getRelationToParent(){let e=o.ERR;switch(this._parent&&(e=this._compare(this._parent._data)),e){case o.LESS_THAN:return"right";case o.GREATER_THAN:return"left"}return null}isComplete(){return!this._subTrees.left&&!this._subTrees.right||!!this._subTrees.left&&(!!this._subTrees.right&&(!!this._subTrees.left.isComplete()&&!!this._subTrees.right.isComplete()))}isBalanced(){let e=this._getSideDepth("left"),t=this._getSideDepth("right");return!(Math.abs(e-t)>1)&&(!!this._isSubTreeBalanced("left")&&!!this._isSubTreeBalanced("right"))}_isSubTreeBalanced(e){return!this._subTrees[e]||this._subTrees[e].isBalanced()}_getSideDepth(e){return this._subTrees[e]?this._subTrees[e].getDepth():0}_createSubTree(e){return new r(e)}toString(){let e=[];this._subTrees.left&&e.push(this._subTrees.left),this._subTrees.right&&e.push(this._subTrees.right);let t=[];return t.push(this._data),e.length>0&&(t.push("->("),t.push(e.join(",")),t.push(")")),t.join("")}}var o;t.BinaryTree=r,function(e){e[e.ERR=0]="ERR",e[e.LESS_THAN=1]="LESS_THAN",e[e.EQUAL=2]="EQUAL",e[e.GREATER_THAN=3]="GREATER_THAN"}(o=t.CompareResult||(t.CompareResult={}))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(45),n=i(1);class r extends s.GenericDraggable{_createElements(){n.addClass(this._elems.base,"draggable"),this._addEventListeners(),this._addDraggingSignifier()}_onDrop(e){this._isDragging&&(super._onDrop(e),n.removeClass(this._elems.base,"dragging"))}_addEventListeners(){this.addEventListener("mousedown",e=>{e.target!==this._elems.base&&e.target!==this._signifier||(this._onDragStart(e),e.preventDefault())}),window.addEventListener("mousemove",e=>{this._onMove(e)}),window.addEventListener("mouseup",e=>{this._onDrop(e)}),window.addEventListener("mouseout",e=>{})}_createDraggableTarget(e){return new o(e)}}t.ClassicDraggable=r;class o extends s.DraggableTarget{_addEventListeners(){this.addEventListener("mouseup",e=>{s.GenericDraggable.currentDraggable&&this._onDrop(e)}),this.addEventListener("mouseover",e=>{this._onDragEnter(e)}),this.addEventListener("mouseout",e=>{this._onDragLeave(e)})}}t.ClassicDraggableTarget=o},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(67);t.makeDraggable=function(e,t){let i=new s.ExistingHTML5Draggable(e,t.target);return i.overrideFunctions(t),i.gridSize=t.gridSize||1,i.base}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(65),n=i(68);class r extends s.ClassicDraggable{constructor(e,t){super(null,t),this._elems.base=e,this._addEventListeners()}overrideFunctions(e){e.onMove&&(this._overrideFunctions.move=e.onMove)}_onMove(e){if(super._onMove(e),!this._overrideFunctions.move)return;let t=this._calculateDelta();this._overrideFunctions.move(t)}}t.ExistingClassicDraggable=r;class o extends n.HTML5Draggable{constructor(e,t){super(null,t),this._elems.base=e,this._addEventListeners()}overrideFunctions(e){e.onMove&&(this._overrideFunctions.move=e.onMove)}_onMove(e){if(super._onMove(e),!this._overrideFunctions.move)return;let t=this._calculateDelta();this._overrideFunctions.move(t)}}t.ExistingHTML5Draggable=o},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(45),n=i(1),r=i(0);class o extends s.GenericDraggable{_createElements(){this._elems.base.setAttribute("draggable","true"),n.addClass(this._elems.base,"draggable"),this._addEventListeners(),this._elems.blank=r.createElement({type:"canvas",attr:{width:"1px",height:'1px"'},cls:"blank",parent:document.body})}_createDraggableTarget(e){return new a(e)}_addEventListeners(){this.base.addEventListener("dragstart",e=>{this._onDragStart(e)}),this.base.addEventListener("drag",e=>{this._onMove(e)}),this.base.addEventListener("dragend",e=>{this._onDrop(e)})}_onDragStart(e){super._onDragStart(e),e.dataTransfer.setDragImage(this._elems.blank,0,0),window.setTimeout(()=>{n.addClass(this._elems.base,"dragging")},50)}_onMove(e){0!==e.buttons&&super._onMove(e)}_onDrop(e){super._onDrop(e),n.removeClass(this._elems.base,"dragging")}}t.HTML5Draggable=o;class a extends s.DraggableTarget{_addEventListeners(){this.base.addEventListener("dragover",e=>{this._onDragEnter(e)}),this.base.addEventListener("dragexit",e=>{this._onDragLeave(e)}),this.base.addEventListener("drop",e=>{this._onDrop(e)})}_onDragEnter(e){e.preventDefault(),super._onDragEnter(e)}_onDrop(e){e.preventDefault(),super._onDrop(e)}_onDragLeave(e){e.preventDefault(),super._onDragLeave(e)}}t.HTML5DragTarget=a},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function o(e){try{l(s.next(e))}catch(e){r(e)}}function a(e){try{l(s.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}l((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(2),r=i(0),o=i(1),a=i(11),l=i(14);class u extends n.Drawable{constructor(e,t){super(),this._id=e.id,this._display=e.display,this._selectParent=t,this._createElements()}get id(){return this._id}get display(){return this._display}get isFiltered(){return this._isFiltered}get isSelected(){return this._isSelected}_shouldSkipCreateElements(){return!0}_createElements(){this._elems={},this._isFiltered=!0,this._elems.base=r.createElement({id:"opt|"+this._id,cls:"dynamicOption filtered",eventListeners:{click:()=>{console.log("click processed"),this._selectParent.select(this)}}}),this._elems.text=r.createElement({content:this._display,cls:"optText",parent:this._elems.base})}select(){if(this._isFiltered)return!1}hilite(){return!this._isFiltered&&(o.addClass(this._elems.base,"hilite"),this._elems.base.scrollIntoView(),!0)}unhilite(){return o.removeClass(this._elems.base,"hilite"),!0}_filter(){this._isFiltered||(this._isFiltered=!0,l.transition(this._elems.base,{maxHeight:"<height>",padding:"5px"},{maxHeight:"0",padding:"0"},200).then(()=>{o.addClass(this._elems.base,"filtered")}))}_unfilter(){this._isFiltered&&(this._isFiltered=!1,o.removeClass(this._elems.base,"filtered"),l.transition(this._elems.base,{maxHeight:"0",padding:"0"},{maxHeight:"<height>",padding:"5px"},200).then)}tryFilter(e){return s(this,void 0,void 0,(function*(){let t;yield a.nextRender();let i=!1,s=this._display.toLowerCase(),n=this._id.toLowerCase();for(t of e)if(-1===s.indexOf(t)&&-1===n.indexOf(t)){i=!0;break}i?this._filter():this._unfilter()}))}}t.DynamicOption=u,u._uncoloredStyles={".dynamicOption":{overflow:"hidden",cursor:"pointer",padding:"5px",nested:{"&.filtered":{maxHeight:"0",padding:"0"},"&:hover, &.hilite":{backgroundColor:"#eee"}}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isNamedClass=function(e,t){if(!t)return!1;let i;return i=e.paddedClassName,!!i&&-1!==i.indexOf(t)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Event=class{constructor(e){this._context=e}get key(){return this._key}get context(){return this._context}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(10),n=i(30),r=i(19);t.EventDefinition=class{constructor(e,t){this._numOfListeners=0,this._name=t,this._key=e,this._listeners=new s.Collection(n.CollectionTypeEnum.ReplaceDuplicateKeys)}addListener(e){e.uniqueId=e.uniqueId||this._key+this._numOfListeners.toString(),this._listeners.add(e.uniqueId,e),this._numOfListeners+=1}removeEventListener(e){e&&this._listeners.remove(e)}notifyListeners(e){this._listeners.map((t,i)=>{t&&(t.target&&!r.equals(t.target,e.context.target)||t.func(e))})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(72),n=i(10);t.EventHandler=class{constructor(){this._events=new n.Collection}createEvent(e,t){let i=new s.EventDefinition(e,t);return-1!==this._events.add(e,i)}dispatchEvent(e,t){let i=this._events.getValue(t.key);i&&i.notifyListeners(t)}addEventListener(e,t){let i=this._events.getValue(e);i&&("function"==typeof t&&(t={func:t}),i.addListener(t))}removeEventListener(e,t){if(e)if(t){let i=this._events.getValue(t);if(!i)return;i.removeEventListener(e)}else this._events.map(t=>{t.removeEventListener(e)})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(0);function n(e,t){let i,n;if(!e)return t;if("string"==typeof e)t.innerHTML=e;else if(e.appendChild)t.appendChild(e);else for(n in e.create?(i=s.createElement(e.create),t.appendChild(i)):t.innerHTML=e.content,e.attr)e.attr.hasOwnProperty(n)&&t.setAttribute(n,e.attr[n]);return t}t.createTable=function(e,t,i,r,o){let a,l,u,h,d,c;for(r||(r=i&&i.length||0),a=s.createElement({type:"table",cls:t}),d=0;d<r;d+=1)for(o||(o=i[d].length),l=a.insertRow(-1),c=0;c<o;c+=1)h=i[d][c],u=l.insertCell(-1),n(h,u);return a},t.processCellContents=n,t.addRow=function(e,t,i,s){let r,o,a,l;if(i||0===i||(i=-1),s||0===s||(s=t.length),e&&e.insertRow){for(r=e.insertRow(i),a=0;a<s;a+=1)o=r.insertCell(-1),l=t[a]||"",n(l,o);return r}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(76),n=i(2),r=i(77),o=i(6),a=i(1),l=i(28),u=i(29);class h extends n.Drawable{constructor(e,t,i){e||(e={}),e.cls="tooltip hidden"+(e.cls?" "+e.cls:""),super(e),this._offset=i||{x:0,y:0},this.sourceElement=t}set sourceElement(e){this._sourceElement=e,this._addEventListeners(),window.setTimeout(()=>{this._positionAppropriately()},100)}_addEventListeners(){this._sourceElement&&(this._sourceElement.addEventListener("mouseover",()=>{o.isNullOrUndefined(this._hideTimeout)||window.clearTimeout(this._hideTimeout),this._positionAppropriately(),window.setTimeout(()=>{this.draw(document.body)},100)}),this._sourceElement.addEventListener("mouseout",e=>{e.target!==this._elems.base&&(this._hideTimeout=window.setTimeout(()=>{this.erase()},100))}),this._elems.base.addEventListener("mouseover",()=>{o.isNullOrUndefined(this._hideTimeout)||window.clearTimeout(this._hideTimeout)}),this._elems.base.addEventListener("mouseout",()=>{event.target!==this._sourceElement&&(this._hideTimeout=window.setTimeout(()=>{this.erase()},100))}),a.addClass(this._sourceElement,"tooltipSource"),window.addEventListener("resize",()=>{this._positionAppropriately()}))}_createElements(){}_positionAppropriately(){if(!this._sourceElement)return;let e;this._tooltipRect=l.clientRectToBasicRect(u.measureElement(this._elems.base)),this._sourceRect=l.clientRectToBasicRect(u.measureElement(this._sourceElement));for(let t=r.TooltipPositionType.TOP;t<=r.TooltipPositionType.RIGHT&&(e=this._assignPosition(t),!e);t+=1);this._tooltipRect=null,this._sourceRect=null}_assignPosition(e){let t=this._setXPosition(e),i=this._setYPosition(e);this._tooltipRect.w,this._tooltipRect.h;return-1!==t&&-1!==i&&(this._elems.base.style.left=t+"px",this._elems.base.style.top=i+"px",!0)}_setYPosition(e){switch(e){case r.TooltipPositionType.TOP:return this._sourceRect.y-this._tooltipRect.h-s.TOOLTIP_MARGIN+this._offset.y;case r.TooltipPositionType.BOTTOM:return this._sourceRect.y+this._sourceRect.h+s.TOOLTIP_MARGIN+this._offset.y;case r.TooltipPositionType.LEFT:case r.TooltipPositionType.RIGHT:return this._normalizeY(this._sourceRect.y,this._tooltipRect.h)}return-1}_setXPosition(e){switch(e){case r.TooltipPositionType.TOP:case r.TooltipPositionType.BOTTOM:return this._normalizeX(this._sourceRect.x,this._tooltipRect.w);case r.TooltipPositionType.LEFT:return this._sourceRect.x-this._tooltipRect.w-s.TOOLTIP_MARGIN+this._offset.x;case r.TooltipPositionType.RIGHT:return this._sourceRect.x+this._sourceRect.w+s.TOOLTIP_MARGIN+this._offset.x}return-1}_normalizeX(e,t){return this._normalize(e+this._offset.x,t,0,window.innerWidth)}_normalizeY(e,t){return this._normalize(e+this._offset.y,t,0,window.innerHeight)}_normalize(e,t,i,n){return e<i&&(e=s.TOOLTIP_MARGIN),e+t>n&&(e=n-t-s.TOOLTIP_MARGIN),e<i?-1:e}draw(e){this._elems.base.parentNode||super.draw(e),a.removeClass(this._elems.base,"hidden")}erase(){a.addClass(this._elems.base,"hidden")}}t.Tooltip=h,h._uncoloredStyles={".tooltip":{position:"absolute",left:"0",top:"0",maxWidth:"300px",padding:"3px",boxSizing:"border-box",boxShadow:"1px 1px 4px 2px rgba(0,0,0,.2)",opacity:"1",transition:"all 0.1s ease-in-out",backgroundColor:"#FFF",borderRadius:"3px",fontSize:"0.8em",lineHeight:"120%",nested:{"&.hidden":{opacity:"0",pointerEvents:"none"}}},".tooltipSource":{cursor:"pointer"}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TOOLTIP_MARGIN=2},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.TOP=0]="TOP",e[e.BOTTOM=1]="BOTTOM",e[e.LEFT=2]="LEFT",e[e.RIGHT=3]="RIGHT"}(t.TooltipPositionType||(t.TooltipPositionType={}))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(47),n=i(6),r=i(1),o=i(20);class a extends s.ToggleButtonField{constructor(e,t){super(e,t)}get _multiSelect(){return!0}get _defaultValue(){return[]}_parseFieldTemplate(e){super._parseFieldTemplate(e),this._selectedBtns=[]}update(e,t){n.isNullOrUndefined(e)||(this.clear(),e.map(e=>{let t=this._getButtonToUpdate(e);this._selectBtn(t,e)}))}_shouldBeSelected(e){return-1!==this._indexOf(e.value)}_createClonedElement(e){return new a(this.id+e,this)}_selectBtn(e,t){if(!e)return;let i=this._selectedBtns.indexOf(e),s=this._indexOf(t);-1!==s&&-1===i||(-1!=i?(-1!==i&&(r.removeClass(e,"selected"),this._selectedBtns.splice(i,1)),-1!==s&&this._data.splice(s,1)):(this._data.push(t),this._selectedBtns.push(e),r.addClass(e,"selected")))}_indexOf(e){let t=-1;for(let i=0;i<this._data.length;i+=1){let s=this._data[i];if(this._equalTo(s,e)){t=i;break}}return t}_equalTo(e,t){switch(typeof e){case"string":case"number":case"boolean":return e===t}return e instanceof Date?o.shortDate(e)===o.shortDate(t):e===t}clear(){this._data=[];for(let e=this._selectedBtns.length-1;e>=0;e-=1){let t=this._selectedBtns[e];r.removeClass(t,"selected"),this._selectedBtns.splice(e,1)}}}t.MultiSelectButtonField=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(3),n=i(8);t.isArrayChildElement=function(e){return!!e&&(!!n.isField(e)&&e.type===s.FieldTypeEnum.ARRAY_CHILD)}},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function o(e){try{l(s.next(e))}catch(e){r(e)}}function a(e){try{l(s.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}l((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(3),r=i(33),o=i(4),a=i(0),l=i(49),u=i(48);class h extends l.SectionField{constructor(e,t,i){super(e?e.toString():"",i||{},t)}get _type(){return n.FieldTypeEnum.ARRAY_CHILD}get _defaultValue(){return{}}get _defaultCls(){return"arrayChild"}_getUncoloredStyles(){return this._mergeThemes(h._uncoloredStyles,r.CollapsibleField._uncoloredStyles,o.Field._uncoloredStyles)}_onCreateElements(){this._config.allowReordering&&(this._elems.nextBtn=a.createElement({cls:"next kipBtn",content:"&#x276F;",parent:this._elems.base,eventListeners:{click:()=>{this._changeOrder(u.DirectionType.FORWARD)}}}),this._elems.prevBtn=a.createElement({cls:"prev kipBtn",content:"&#x276E;",parent:this._elems.base,eventListeners:{click:()=>{this._changeOrder(u.DirectionType.BACKWARD)}}})),this._elems.closeBtn=a.createElement({cls:"close kipBtn",content:"&#x2715;",parent:this._elems.base,eventListeners:{click:()=>{this._delete()}}}),this._elems.childrenContainer=a.createSimpleElement("","formChildren","",null,null,this._elems.base)}_createClonedElement(e){return new h(this._id+e,this._children)}_cloneFormElement(e){return super._cloneFormElement(e,"|"+this._id)}_delete(){this._elems.base.parentNode.removeChild(this._elems.base),this._data=null,this._dispatchChangeEvent()}_updateInternalData(e){const t=Object.create(null,{_updateInternalData:{get:()=>super._updateInternalData}});return s(this,void 0,void 0,(function*(){return null===this._data?null:t._updateInternalData.call(this,e)}))}addOrderingListener(e){this._orderlistener=e}_changeOrder(e){this._orderlistener&&this._orderlistener.onChangeOrder(this,e)}}t.ArrayChildField=h,h._uncoloredStyles={".kipFormElem.array .formChildren .kipFormElem.arrayChild":{backgroundColor:"#FFF",borderRadius:"5px",boxShadow:"1px 1px 5px 2px rgba(0,0,0,.1)",padding:"15px",margin:"0",nested:{".mobile.large &":{maxWidth:"calc(50% - 20px)"},".mobile &":{maxWidth:"calc(100% - 20px)"},".arrayChild":{maxWidth:"100%"},".formChildren":{margin:"10px",marginTop:"0"},".kipBtn:not(.new)":{position:"absolute",cursor:"pointer",transition:"all ease-in-out .2",padding:"2px",boxShadow:"none",backgroundColor:"none",color:"#555",opacity:"0.5",nested:{"&.close":{top:"2px",left:"calc(100% - 25px)"},"&.next, &.prev":{color:"<formTheme>",padding:"0",width:"20px",height:"20px",borderRadius:"0",boxShadow:"none",top:"calc(50% - 8px)"},"&.next":{left:"calc(100% - 20px)"},"&.prev":{left:"0"},"&:hover":{transform:"scale(1.1)",opacity:"0.8"}}}}},".formChildren > div.arrayChild:first-child .prev.kipBtn":{display:"none"},".formChildren > div.arrayChild:last-child .next.kipBtn":{display:"none"}}},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function o(e){try{l(s.next(e))}catch(e){r(e)}}function a(e){try{l(s.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}l((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(4),r=i(0),o=i(8),a=i(6),l=i(3);class u extends n.Field{get _type(){return l.FieldTypeEnum.FILE_PATH}get _defaultCls(){return"filepath"}get _defaultValue(){return""}_parseFieldTemplate(e){super._parseFieldTemplate(e),this._onSaveCallback=e.onSave,this._attr=e.attr}_onCreateElements(){this._createStandardLabel(this._elems.base),this._elems.display=r.createSimpleElement("","display",this._data,null,null,this._elems.base),this._elems.inputContainer=r.createSimpleElement("","fileContainer","",null,null,this._elems.base),this._elems.input=o.createInputElement(this._id+"|input","","file","",null,null,this._elems.inputContainer),this._elems.inputLabel=o.createLabelForInput("Upload File",this._id+"|input","filepath",this._elems.inputContainer)}_getValueFromField(){if(!a.isNullOrUndefined(this._tempLink))return this._onLinkChange();if(this._files=this._elems.input.files,console.log(this._files),!this._files)return"";return this._files[0].name}_onLinkChange(){let e=this._tempLink;return this._tempLink=null,e}update(e,t){this._data=e,this._elems.display.innerHTML=e,this._elems.input.value=""}save(e){return s(this,void 0,void 0,(function*(){if(!e){if(this._files){if(!this._onSaveCallback)return"";this._data=yield this._onSaveCallback(this._files)}return this._data}}))}_createClonedElement(e){return new u(this.id+e,this)}}t.FilePathField=u,u._uncoloredStyles={".kipFormElem.filepath input[type=file]":{display:"none"},".kipFormElem.filepath label.filepath":{backgroundColor:"<formTheme>",color:"#FFF",borderRadius:"2px",boxShadow:"1px 1px 5px 2px rgba(0,0,0,.1)",padding:"10px",fontSize:"0.7em",cursor:"pointer"},".kipFormElem.filepath .display":{fontSize:"0.6em",whiteSpace:"break"}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(23),n=i(50);class r extends s.Popup{constructor(e,t,i){super(i),this._onSelection=t,this.addContent("","",e),this._createButtons()}_createButtons(){this._createButton("Yes",n.YesNoEnum.YES),this._createButton("No",n.YesNoEnum.NO)}_createButton(e,t){this.addButton(e,()=>{this._onSelection&&(this._onSelection(t),this.erase())})}}t.YesNoPopup=r,t.showYesNoForm=function(e,t){new r(e,t).draw(document.body)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(4),n=i(3);class r extends s.Field{get _type(){return n.FieldTypeEnum.NUMBER}get _defaultValue(){return 0}get _defaultCls(){return"number"}_onCreateElements(){this._createStandardLabeledInput(),this._handleStandardLayout()}_getValueFromField(){return+this._elems.input.value}_createClonedElement(e){return new r(this._id+e,this)}}t.NumberField=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.HistoryNode=class{constructor(e){this.data=e}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(7),n=i(0),r=i(12);t.createSimpleLabeledElement=function(e,t,i,r,o,a,l,u){let h,d,c;if(null!=r&&!("string"==typeof r&&0===s.trim(r).length||u&&0===r))return h={},h.id=e,h.type="div",h.cls=t,h.attr=o,h.children=a,h.parent=l,d={cls:"lbl",content:i,type:"span"},c={cls:"content",content:r,type:"span"},h.children=[d,c],n.createElement(h)},t.createLabeledElement=function(e,t){if(!e||!t)return;let i=n.createElement(e);t.cls=r.buildClassString(t.cls,"lbl");let s=n.createElement(t);return{data:i,lbl:s,wrapper:n.createElement({cls:"wrapper",children:[s,i]})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(87);class n extends s._Model{serialize(){let e=this.saveData();return JSON.stringify(e)}toString(){return this.serialize()}deserialize(e){try{let t=JSON.parse(e);return this._copyData(t),!0}catch(t){return console.log("non JSON: "+e),!1}}}t.Serializable=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(7),n=i(5),r=i(31),o=i(6),a=i(27);t._Model=class{constructor(e){this.__propertyListeners={},this.__modelListeners=[],this._setDefaultValues(),e&&(e.saveData&&(e=e.saveData()),this._copyData(e))}_setDefaultValues(){}_copyData(e){n.map(e,(e,t)=>{this._copyPiece(t,e)})}_copyPiece(e,t){let i,n="_copy"+(e[0].toUpperCase()+s.rest(e,1));void 0!==t&&(this[n]?this[n](t):a.isUpdatable(this[e])?this[e].update(t):(i=r.isArray(t)?t.slice():r.isObject(t)?JSON.parse(JSON.stringify(t)):t,this._setValue(e,t)))}_copyModelArray(e,t){let i=[];for(let s of e){let e=new t(s);i.push(e)}return i}_copyModelDictionary(e,t){let i={};return n.map(e,(e,s)=>{i[s]=new t(e)}),i}update(e){this._copyData(e)}saveData(){let e={};return n.map(this,(t,i)=>{if("function"==typeof t)return;let n=i;if("_"===n[0]&&(n=s.rest(n,1)),"_modelListeners"===n)return;if("_propertyListeners"===n)return;let r=this._savePiece(n,t);o.isNullOrUndefined(r)||(e[n]=r)}),e}_savePiece(e,t){let i="_save"+(e[0].toUpperCase()+s.rest(e,1));if(this[i])return this[i]();let n=t||this["_"+e];return this._innerSavePiece(n)}_innerSavePiece(e){return e instanceof Array?this._saveArray(e):e&&e.saveData?this._saveModel(e):"object"==typeof e?this._saveObject(e):this._saveSimple(e)}_saveArray(e){let t=[];for(let i of e)t.push(this._innerSavePiece(i));return t}_saveModel(e){return e.saveData()}_saveObject(e){let t={};return n.map(e,(e,i)=>{t[i]=this._innerSavePiece(e)}),t}_saveSimple(e){return e}_setValue(e,t){let i="_"+e,s=this[i];this[i]=t,this._notifyListeners(e,s,t)}_notifyListeners(e,t,i){this._notifyModelListeners(e,t,i),this._notifyPropertyListeners(e,t,i)}_notifyModelListeners(e,t,i){let s=this.__modelListeners;if(s&&0!==s.length)for(let n of s)n&&n(e,i,t)}_notifyPropertyListeners(e,t,i){let s=this.__propertyListeners[e];if(s)for(let e of s)e&&e(i,t)}registerPropertyListener(e,t){this.__propertyListeners[e]||(this.__propertyListeners[e]=[]),this.__propertyListeners[e].push(t)}registerModelListener(e){}unregisterListeners(){this.__propertyListeners={},this.__modelListeners=[]}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(5);t.DataManager=class{constructor(){this._data={},this._populateWithDefaultData()}_populateWithDefaultData(){}_createAndAddDefault(e){this.add(e)}add(e){return!this.contains(e.id)&&(this._data[e.id]=e,!0)}remove(e){if(!this.contains(e))return null;let t=this.get(e);return delete this._data[e],t}contains(e){return!!this._data[e]}clear(){this._data={}}get(e){return this.contains(e)?this._data[e]:null}toArray(){let e=[];return s.map(this._data,t=>{e.push(t)}),e}toDictionary(){let e={};return s.map(this._data,(t,i)=>{e[i]=t}),e}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.NONE=0]="NONE",e[e.OPACITY=1]="OPACITY",e[e.SLIDE_LEFT=2]="SLIDE_LEFT",e[e.SLIDE_RIGHT=3]="SLIDE_RIGHT",e[e.SLIDE_UP=4]="SLIDE_UP",e[e.SLIDE_DOWN=5]="SLIDE_DOWN"}(t.INavTransitionType||(t.INavTransitionType={}))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(7),n=i(0);t.ScriptLoader=class{constructor(e){this._scriptURLFormat=e||"{0}"}loadScript(e){let t=s.format(this._scriptURLFormat,e);n.createElement({type:"script",attr:{src:t},parent:document.head})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cleanURL=function(){return window.location.href.replace(window.location.search,"")},t.splitParams=function(){let e=window.location.search.replace("?","").split("&"),t=[];for(let i of e){let e=i.split("="),s={key:e[0],val:e[1]};t.push(s)}return t}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(2),n=i(0);class r extends s.Drawable{constructor(){super()}_createElements(){this._elems.base=n.createElement({cls:"kipShield"}),this._elems.shieldContent=n.createElement({cls:"shieldContent",parent:this._elems.base}),this._createShieldDetails()}draw(e){e||(e=document.body),this._showElementTimeout=window.setTimeout(()=>{super.draw(e),this._showElementTimeout=null},200)}erase(){this._showElementTimeout?window.clearTimeout(this._showElementTimeout):super.erase()}}t.Shield=r,r._uncoloredStyles={".kipShield":{position:"fixed",backgroundColor:"rgba(0,0,0,0.6)",width:"100%",height:"100%",left:"0",top:"0",zIndex:"100"},".kipShield .shieldContent":{display:"flex",justifyContent:"center",alignItems:"center",width:"100%",height:"100%"}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.CHECKMARK=1]="CHECKMARK",e[e.X=2]="X",e[e.PLUS=3]="PLUS"}(t.SVGShapeEnum||(t.SVGShapeEnum={}))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(2),n=i(35);class r extends s.Drawable{constructor(){super(),this._elems={base:n.createSVGElem({type:"defs"})},this._createElements()}get base(){return this._elems.base}get gradients(){return this._gradients}set gradients(e){this._gradients=e}_shouldSkipCreateElements(){return!0}_createElements(){this._addDropShadow()}_addDropShadow(){let e=n.createSVGElem({type:"filter",id:"dropshadow",attr:{width:"200%",height:"200%",x:"-50%",y:"-50%"},children:[{type:"feGaussianBlur",attr:{in:"SourceAlpha",stdDeviation:"0.5"}},{type:"feOffset",attr:{dx:"0.1",dy:"0.1",result:"offsetblur"}},{type:"feComponentTransfer",children:[{type:"feFuncA",attr:{type:"gamma",exponent:"1.2",amplitude:"0.3"}}]},{type:"feMerge",children:[{type:"feMergeNode"},{type:"feMergeNode",attr:{in:"SourceGraphic"}}]}]});this._elems.base.appendChild(e)}}t.SVGDefinitionsElement=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(21),n=i(10),r=i(93),o=i(13),a=i(52),l=i(97),u=i(98),h=i(99),d=i(102);class c extends s.SVGElem{constructor(e){super(e),this._svgElems=new n.Collection,this._nonScaled=[]}static get _nextId(){return c._lastId+=1,c._lastId.toString()}get nonScaled(){return this._nonScaled}get style(){return this._style}_setAttributes(e){return e.type="g",e}_updateExtrema(e){}_updateExtremaFromChild(e){this._extrema?(e.min.x<this._extrema.min.x&&(this._extrema.min.x=e.min.x),e.min.y<this._extrema.min.y&&(this._extrema.min.y=e.min.y),e.max.x<this._extrema.max.x&&(this._extrema.max.x=e.max.x),e.max.y<this._extrema.max.y&&(this._extrema.max.y=e.max.y)):this._extrema=o.cloneObject(e)}_addChildElement(e,t){e.style.merge(this._style),this._svgElems.add(e.id,e),e.preventScaling&&this._nonScaled.push(e),t||this._updateExtrema(e.extrema),e.addUpdateListener(()=>{this._updateExtremaFromChild(e.extrema),this._notifyUpdateListeners()})}addPath(e,t,i){(i=this._initializeAttributes(i)).noFinish=t;let s=new a.PathElement(e,i);return this._addChildElement(s),s}addRectangle(e,t,i,s,n){n=this._initializeAttributes(n);let r=new l.RectangleElement(e,t,i,s,n);return this._addChildElement(r),r}addCircle(e,t,i){i=this._initializeAttributes(i);let s=new u.CircleElement(e,t,i);return this._addChildElement(s),s}addPerfectArc(e,t,i,s,n,r){r=this._initializeAttributes(r);let o=new h.ArcElement(e,t,i,s,n,r);return this._addChildElement(o),o}addPieSlice(e,t,i,s,n,r){r=this._initializeAttributes(r);let o=new h.PieSliceElement(e,t,i,s,n,r);return this._addChildElement(o),o}addCurve(e,t){t=this._initializeAttributes(t);let i=new h.CurveElement(e,t);return this._addChildElement(i),i}addRegularPolygon(e,t,i,s){s=this._initializeAttributes(s);let n=new h.PolygonElement(e,t,i,s);return this._addChildElement(n),n}addRegularStar(e,t,i,s,n){n=this._initializeAttributes(n);let r=new h.StarElement(e,t,i,s,n);return this._addChildElement(r),r}addText(e,t,i,s){s=this._initializeAttributes(s);let n=new d.TextElement(e,t,i,s);return this._addChildElement(n,!0),window.setTimeout(()=>{this._updateExtrema(n.extrema)},10),n}addFlowableText(e,t,i){return null}addGroup(e){e=this._initializeAttributes(e);let t=new c(e);return this._addChildElement(t),t}addShape(e,t,i,s){switch(t||(t=1),i||(i={x:0,y:0}),e){case r.SVGShapeEnum.CHECKMARK:return this._addCheckShape(t,i,s);case r.SVGShapeEnum.X:return this._addExShape(t,i,s);case r.SVGShapeEnum.PLUS:return this._addPlusShape(t,i,s)}}_addCheckShape(e,t,i){i=this._initializeAttributes(i);let s=new h.CheckElement(null,i,t);return this._addChildElement(s),s}_addExShape(e,t,i){i=this._initializeAttributes(i);let s=new h.ExElement(null,i,t);return this._addChildElement(s),s}_addPlusShape(e,t,i){i=this._initializeAttributes(i);let s=new h.PlusElement(null,i,t);return this._addChildElement(s),s}_initializeAttributes(e){return e||(e={}),e.parent=this._elems.base,e.id||(e.id=c._nextId),e}clear(){this._elems.base.innerHTML="",this._svgElems.clear()}}t.GroupElement=c,c._lastId=0},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(5),n=i(7),r=i(12);t.SVGStyle=class{constructor(e){this.clear(),e&&this.merge(e),this._needsNewString=!0}_setStyle(e,t){this._innerStyle[e]=t,this._needsNewString=!0}set fill(e){this._setStyle("fill",e)}get fill(){return this._innerStyle.fill}set fillOpacity(e){this._setStyle("fillOpacity",e)}get fillOpacity(){return this._innerStyle.fillOpacity}set fontSize(e){this._setStyle("fontSize",e)}get fontSize(){return this._innerStyle.fontSize}set fontWeight(e){this._setStyle("fontWeight",e)}get fontWeight(){return this._innerStyle.fontWeight}set fontFamily(e){this._setStyle("fontFamily",e)}get fontFamily(){return this._innerStyle.fontFamily}set stroke(e){this._setStyle("stroke",e)}get stroke(){return this._innerStyle.stroke}set strokeWidth(e){this._setStyle("strokeWidth",e)}get strokeWidth(){return this._innerStyle.strokeWidth}set strokeOpacity(e){this._setStyle("strokeOpacity",e)}get strokeOpacity(){return this._innerStyle.strokeOpacity}set strokeLinecap(e){this._setStyle("strokeLinecap",e)}get strokeLinecap(){return this._innerStyle.strokeLinecap}set strokeLinejoin(e){this._setStyle("strokeLinejoin",e)}get strokeLinejoin(){return this._innerStyle.strokeLinejoin}set filter(e){"url("!==e.substr(0,4)&&(e="url("+e+")"),this._setStyle("filter",e)}get filter(){return this._innerStyle.filter}set transform(e){this._transform=e}get transform(){return this._transform}set transition(e){this._setStyle("transition",e)}get transition(){return this._innerStyle.transition}set strokeDashArray(e){this._strokeDashArray=e}get strokeDashArray(){return this._strokeDashArray}merge(e){let t=e._innerStyle||e;s.map(t,(e,t)=>{this._innerStyle[t]&&"None"!==this._innerStyle[t]||(this._innerStyle[t]=e)}),this._strokeDashArray||(this._strokeDashArray=t.strokeDashArray),this._transform||(this._transform=t.transform)}clear(){this._innerStyle={fill:"None",stroke:"None"}}assignStyle(e){this._needsNewString&&this._generateStyleString(),e.setAttribute("style",this._generatedStyleString),this._strokeDashArray&&e.setAttribute("stroke-dasharray",this._strokeDashArray),this._transform&&e.setAttribute("transform",this._transform)}_generateStyleString(){this._generatedStyleString="",s.map(this._innerStyle,(e,t)=>{let i=r.getPropertyName(t);this._generatedStyleString+=n.format("{0}: {1};",i,e.toString())})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(21);class n extends s.SVGElem{constructor(e,t,i,s,n){super(n,e,t,i,s)}_setAttributes(e,t,i,s,n){return e.type="rect",e.x=t,e.y=i,e.width=s,e.height=n,e}_updateExtrema(e){let t={x:e.x,y:e.y,w:e.width,h:e.height};this._extrema=this._basicRectToExtrema(t)}_basicRectToExtrema(e){return{min:{x:e.x,y:e.y},max:{x:e.x+e.w,y:e.y+e.h}}}_checkBasicRectForBadData(e){let t=!1;if(0===e.x||e.x||(t=!0),0===e.y||e.y||(t=!0),0===e.w||e.w||(t=!0),0===e.h||e.h||(t=!0),e.w<0&&(t=!0),e.h<0&&(t=!0),t)throw new Error("invalid basic rectangle values")}}t.RectangleElement=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(21);class n extends s.SVGElem{constructor(e,t,i){super(i,e,t)}_setAttributes(e,t,i){return e.type="circle",e.cx=t.x,e.cy=t.y,e.r=i,e}_updateExtrema(e){this._extrema=this._extremaFromCenterPointAndRadius({x:e.cx,y:e.cy},e.r)}_extremaFromCenterPointAndRadius(e,t){return{max:{x:e.x+t,y:e.y+t},min:{x:e.x-t,y:e.y-t}}}}t.CircleElement=n},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(100)),s(i(224)),s(i(225)),s(i(226)),s(i(15)),s(i(227)),s(i(228)),s(i(101)),s(i(229))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(15),n=i(34);class r extends s.PathExtensionElement{constructor(e,t,i,s,n,r){super(null,r,e,t,i,s,n)}_generatePoints(e,t,i,s,r){let o=this._getAdjustedPoint(e),a=s-i,l=this._calculatePolygonPoint(o,n.degreesToRadians(i),t),u=this._calculatePolygonPoint(o,n.degreesToRadians(s),t),h=[l,{x:u.x,y:u.y,largeArc:a>180?1:0,radius:{x:t,y:t},sweepFlag:r,xRotation:0}];return this._shouldShowRadii()&&h.push(e),h}_getAdjustedPoint(e){let t=this._style.strokeWidth*Math.sqrt(2)||0;return{x:e.x+t,y:e.y+t}}_shouldShowRadii(){return!1}}t.ArcElement=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(15),n=i(34);class r extends s.PathExtensionElement{constructor(e,t,i,s,n){super(null,s,e,t,i,n)}_generatePoints(e,t,i,s){let r=[],o=0,a=n.calculatePolygonInternalAngle(t);for(let s=0;s<t;s+=1){let t=this._calculatePolygonPoint(e,o,i);o+=a,r.push(t)}return r}}t.PolygonElement=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(21),n=i(1);class r extends s.SVGElem{constructor(e,t,i,s){super(s,e,t,i)}get style(){return window.setTimeout(()=>{this._style.assignStyle(this._elems.base),this._originPt||this._notifyUpdateListeners()}),this._style}_setAttributes(e,t,i,s){return e.type="text",e.x=i.x,e.y=i.y,this._text=t,this._originPt=s,e}_createElements(e){super._createElements(e),n.addClass(this._elems.base,"unselectable"),this._elems.base.innerHTML=this._text,this._originPt&&(this._elems.base.style.display="none",window.setTimeout(()=>{this._handleOriginPoint(e),this._elems.base.style.display="default"},10))}_handleOriginPoint(e){let t=this.measureElement(),i={x:e.x-t.w*this._originPt.x,y:e.y-(t.h-2*(e.y-t.y))*this._originPt.y};console.log("box: ("+t.x+", "+t.y+") -> ("+t.w+", "+t.h+")"),this._elems.base.setAttribute("x",i.x.toString()),this._elems.base.setAttribute("y",i.y.toString()),t.x=i.x,t.y=i.y,console.log("box: ("+t.x+", "+t.y+") -> ("+t.w+", "+t.h+")"),this._updateExtrema(t),this._notifyUpdateListeners()}_updateExtremaAndNotifyListeners(e){this._updateExtrema(e)}_updateExtrema(e){let t=this.measureElement();this._extrema={min:{x:t.x,y:t.y},max:{x:t.x+t.w,y:t.y+t.h}}}}t.TextElement=r,r._uncoloredStyles={".unselectable":{userSelect:"none",MozUserSelect:"none",WebkitUserSelect:"none",khtmlUserSelect:"none",oUserSelect:"none"}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(54);class n extends s.TestUI{renderTest(e){let t=this._buildTestString(e);e.pass?console.info(t):console.error(t)}startGroup(e){let t="";for(let i=0;i<e.length+2;i+=1)t+="=";this._currentGroup=e,console.log("\n"+t+"\n "+e+" \n"+t)}startSubgroup(e){let t="";for(let i=0;i<e.length+2;i+=1)t+="-";this._currentSubgroup=e,console.log("\n "+e+" \n"+t)}_buildTestString(e){let t="",i=this._buildValueString(e);return t+=this._passToString(e.pass).toUpperCase(),t+=": ",e.pass||(t+=this._currentGroup?this._currentGroup+" --\x3e ":"",t+=this._currentSubgroup?this._currentSubgroup+" --\x3e ":""),t+=e.name,t+=i?" ["+i+"]":"",t+=e.message?" - "+e.message:"",t}}t.ConsoleUnitTestUI=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(2),n=i(0);class r extends s.Drawable{_createElements(){this._elems={base:n.createElement({cls:"tests"}),groups:[]},this._elems.testContainer=n.createElement({cls:"testContainer",parent:this._elems.base})}addVisualButton(e){n.createElement({cls:"visualTestBtn",parent:this._getParentElement(),children:[{content:e.label,cls:"innerBtn"}],eventListeners:{click:()=>{e.callback()}}})}addTestResult(e){let t=this._getParentElement(),i=n.createElement({cls:"test",parent:t,attr:{title:e.value}});n.createElement({cls:e.passStr,content:e.passStr.toUpperCase(),parent:i}),n.createElement({cls:"name",content:e.name,parent:i}),e.pass||(n.createElement({cls:"err",content:e.value,parent:i}),n.createElement({cls:"message",content:e.message,parent:i}))}startGroup(e){let t=n.createElement({cls:"group",parent:this._elems.testContainer});this._elems.groups.push(t),n.createElement({cls:"groupName",parent:t,content:e})}startSubgroup(e){n.createElement({cls:"functionTitle",content:e,parent:this._getParentElement()})}_getParentElement(){return this._elems.groups[this._elems.groups.length-1]||this._elems.testContainer}}t.UI=r,r._uncoloredStyles={".hidden":{display:"none"},".group":{marginBottom:"10px",display:"#666",borderCollapse:"collapse",width:"20%"},".groupName":{fontSize:"1.6em",color:"#666"},".functionTitle":{fontSize:"1.3em",color:"#888",marginLeft:"5px"},".tests":{marginLeft:"50px",fontFamily:"Segoe UI, Calibri, Helvetica"},".tests .testContainer":{display:"flex",flexWrap:"wrap"},".test":{display:"table-row"},".test > div":{border:"solid transparent",borderWidth:"10px",borderRightWidth:"20px",marginRight:"10px",display:"table-cell"},".test .fail":{color:"rgb(190,50,30)",fontWeight:"bold"},".test .pass":{color:"rgb(50,190,30)",fontWeight:"bold",marginRight:"10px",display:"table-cell"},".test .name":{color:"#333",marginRight:"10px",display:"table-cell"},".test .err":{fontStyle:"italic",color:"#666",fontSize:"0.8em"},".test .message":{color:"#888",marginRight:"10px",display:"table-cell"},".visualTestBtn":{color:"#FFF",padding:"2px 10px",borderRadius:"3px",cursor:"pointer",width:"auto",marginBottom:"8px"},".innerBtn":{backgroundColor:"#06C",display:"inline-block",padding:"2px 10px"}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(54),n=i(104);class r extends s.TestUI{constructor(){super(),this._drawable=new n.UI,this._drawable.draw(document.body)}renderTest(e){let t=e;t.value=this._buildValueString(e),t.passStr=this._passToString(e.pass),this._drawable.addTestResult(t)}startGroup(e){this._drawable.startGroup(e)}startSubgroup(e){this._drawable.startSubgroup(e)}addVisualTestButton(e){this._drawable.addVisualButton(e)}}t.HTMLUnitTestUI=r},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(11)),s(i(108)),s(i(109)),s(i(113)),s(i(119)),s(i(121)),s(i(127)),s(i(129)),s(i(130)),s(i(133)),s(i(140)),s(i(142)),s(i(144)),s(i(146)),s(i(148)),s(i(151)),s(i(152)),s(i(155)),s(i(157)),s(i(184)),s(i(186)),s(i(188)),s(i(192)),s(i(194)),s(i(34)),s(i(197)),s(i(198)),s(i(199)),s(i(202)),s(i(204)),s(i(207)),s(i(208)),s(i(210)),s(i(211)),s(i(214)),s(i(216)),s(i(218)),s(i(219)),s(i(220)),s(i(222)),s(i(231)),s(i(232)),s(i(233)),s(i(238))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.wait=function(e){return new Promise(t=>window.setTimeout(t,e))},t.nextRender=function(){return new Promise(e=>{requestAnimationFrame(()=>{e()})})}},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(55)),s(i(36))},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(110)),s(i(111)),s(i(112))},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function o(e){try{l(s.next(e))}catch(e){r(e)}}function a(e){try{l(s.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}l((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(2),r=i(36),o=i(38),a=i(16),l=i(0),u=i(11),h=i(27);class d extends n.Drawable{constructor(e){super(),this._config=e||{},this._updateFunctions={},this._model={},this._createElements()}get config(){return this._getConfig()}set config(e){this._setConfig(e)}get model(){return this._getModel()}set model(e){this._setModel(e)}get updateFunctions(){return this._updateFunctions}set updateFunctions(e){this._updateFunctions=e}_shouldSkipCreateElements(){return!0}_getModel(){let e=JSON.parse(JSON.stringify(this._model));return window.setTimeout(()=>this._onPotentialModelChange(e),0),this._model}_setModel(e){let t=this._model;this._model=e,window.setTimeout(()=>this._onPotentialModelChange(t),0)}_getConfig(){let e=JSON.parse(JSON.stringify(this._config));return u.wait(0).then(()=>this._onPotentialConfigChange(e)),this._config}_setConfig(e){let t=this._config;this._config=e,u.wait(0).then(()=>this._onPotentialConfigChange(t))}_onPotentialConfigChange(e){}_onPotentialModelChange(e){}_bind(e,t){r.bind(()=>this._model?t?this._model[t]:this._model:"",this._createUpdateFunc(e,t),()=>this._shouldDelete(e))}_createUpdateFunc(e,t){return i=>{this._updateFunctions[t]?this._updateFunctions[t](i,e):this._updateFunctions._?this._updateFunctions._(i,e):o.isHTMLElement(e)?this._updateHtmlElement(e,i):h.isUpdatable(e)?this._updateUpdateable(e,i):this._updateBoundView(e,i)}}_updateHtmlElement(e,t){t||(t=""),e.innerHTML=t.toString()}_updateUpdateable(e,t){e.update(t)}_updateBoundView(e,t){e.model=t}setUpdateFunction(e,t){t&&(this._updateFunctions[e]=t)}_shouldDelete(e){return a.isDrawable(e)?!e.base.parentNode:!e.parentNode}erase(){super.erase()}_createElement(e){let t=l.createCustomElement(e,this._elems,e=>this._createElement(e));return e.boundTo&&this._bindElement(t,e),t}_elem(e){return this._createElement(e)}_bindElement(e,t){return s(this,void 0,void 0,(function*(){let i=e;t.key&&t.drawable&&(i=this._elems[t.key]),this._bind(i,t.boundTo)}))}}t.BoundView=d},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isUpdateableView=function(e){return!!e.update}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(2);class n extends s.Drawable{constructor(...e){super(),this._createElements(...e)}_shouldSkipCreateElements(){return!0}}t.UpdateableView=n},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(9)),s(i(114)),s(i(18)),s(i(57)),s(i(58)),s(i(115)),s(i(116)),s(i(117)),s(i(118))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(2),n=i(9),r=i(57),o=i(17),a=i(1),l=i(22);class u extends s.Drawable{constructor(e,t){super(),this._id=e||"canvas",this._layers=[],this._needsInitialDimensions=!0,this._reconcileOptions(t),this._initializeRectangles(),this._createElements(),this._addEventListeners()}get relativeView(){return this._relativeView}get zoomFactor(){return this._zoomFactor}set zoomFactor(e){this._zoomFactor=e}get needsRedraw(){return this._needsRedraw}set needsRedraw(e){this._needsRedraw=e}get canvas(){return this._elems.base}get effectCanvas(){return this._elems.effectCanvas}get context(){return this._context}get effectContext(){return this._effectContext}get layers(){return this._layers}set onPreRender(e){this._onPreRender=e}_reconcileOptions(e){e||(e={});let t=this._createDefaultOptions();this._options=o.reconcileOptions(e,t)}_createDefaultOptions(){return{RENDER_RATE:30,ZOOM_DELTA:()=>({x:.03*this._zoomFactor.x,y:.03*this._zoomFactor.y}),SIZE:{width:600,height:450},MAX_ZOOM:{x:15,y:15},MIN_ZOOM:{x:.1,y:.1}}}_initializeRectangles(){this._absoluteDimensions={x:0,y:0,w:this._options.SIZE.width,h:this._options.SIZE.height},this._relativeView={x:0,y:0,w:this._options.SIZE.width,h:this._options.SIZE.height},this._zoomFactor={x:1,y:1}}_shouldSkipCreateElements(){return!0}_createElements(){this._elems={base:this._createCanvas(),effectCanvas:this._createCanvas(!0)},this._context=this._elems.base.getContext("2d"),this._effectContext=this._elems.effectCanvas.getContext("2d")}_createCanvas(e){let t;t=document.createElement("canvas"),t.setAttribute("width",this._options.SIZE.width.toString()),t.setAttribute("height",this._options.SIZE.height.toString());let i="canvas";return e&&(i+=" effects"),a.addClass(t,i),t}draw(e){super.draw(e),e.appendChild(this._elems.effectCanvas),this._needsRedraw=!0}clear(){this._context.clearRect(0,0,this._options.SIZE.width,this._options.SIZE.height),this._effectContext.clearRect(0,0,this._options.SIZE.width,this._options.SIZE.height)}_drawEachElement(){let e;for(e of(this.clear(),this._layers))e&&(e.updateDimensions(this._relativeView),e.draw())}_renderFrame(){this._needsRedraw&&(this._onPreRender&&this._onPreRender(),this._drawEachElement(),this._needsRedraw=!1),window.requestAnimationFrame(()=>{this._renderFrame()})}addElement(e){this._getOrCreateLayer(e.layer).addElement(e),this._updateAbsoluteDimensionsFromElem(e.dimensions),this._needsRedraw=!0}removeElement(e){let t,i;for(i of this._layers)if(i&&(t=i.removeElement(e),t))break;return t}_updateAbsoluteDimensionsFromElem(e){(this._needsInitialDimensions||e.x<this._absoluteDimensions.x)&&(this._absoluteDimensions.x=e.x),e.x+e.w>this._absoluteDimensions.x+this._absoluteDimensions.w&&(this._absoluteDimensions.w=e.x+e.w-this._absoluteDimensions.x),(this._needsInitialDimensions||e.y<this._absoluteDimensions.y)&&(this._absoluteDimensions.y=e.y),e.y+e.h>this._absoluteDimensions.y+this._absoluteDimensions.h&&(this._absoluteDimensions.h=e.y+e.h-this._absoluteDimensions.y),this._needsInitialDimensions=!1}_getOrCreateLayer(e){let t=this._layers[e];return t||(t=new r.CanvasGroup("layer"+e),this._layers[e]=t,t.canvas=this),t}_onMouseWheel(e){let t=e.deltaY;t=Math.abs(t)/t,this.zoom(t)}zoom(e){let t=this._options.ZOOM_DELTA(),i=this._zoomFactor.x+e*t.x;i=l.normalizeValue(i,this._options.MIN_ZOOM.x,this._options.MAX_ZOOM.x);let s=this._zoomFactor.y+e*t.y;s=l.normalizeValue(s,this._options.MIN_ZOOM.y,this._options.MAX_ZOOM.y);let n=this._options.SIZE,r=l.roundToPlace(n.width*(1/i),10);this._zoomFactor.x=i;let o=l.roundToPlace(n.height*(1/s),10);this._zoomFactor.y=s;let a=r-this._relativeView.w,u=o-this._relativeView.h,h={x:this._relativeView.x-a/2,y:this._relativeView.y-u/2,w:this._relativeView.w+a,h:this._relativeView.h+u};this._relativeView=h,this._needsRedraw=!0}changeView(e){this._relativeView=e}_onDrag(e){if(!e)return;let t=this._calculateNewCornerFromDelta(e);this.pan(t)}_calculateNewCornerFromDelta(e){return{x:this._relativeView.x-e.x/this._zoomFactor.x,y:this._relativeView.y-e.y/this._zoomFactor.y}}pan(e){this._relativeView.x=e.x,this._relativeView.y=e.y,this._needsRedraw=!0}_addEventListeners(){window.addEventListener("mousewheel",e=>{this._onMouseWheel(e)}),window.addEventListener("mousedown",e=>{this._elems.base.style.cursor="-webkit-grabbing",this._startDragPoint={x:e.screenX,y:e.screenY}}),window.addEventListener("mousemove",e=>{this._startDragPoint&&(this._deltaDragPoint={x:e.screenX-this._startDragPoint.x,y:e.screenY-this._startDragPoint.y},this._startDragPoint={x:e.screenX,y:e.screenY},this._onDrag(this._deltaDragPoint))}),window.addEventListener("mouseup",()=>{this._startDragPoint=null,this._deltaDragPoint={x:0,y:0},this._elems.base.style.cursor="-webkit-grab"}),this._elems.base.addEventListener("click",e=>{let t={x:e.pageX,y:e.pageY};this._onClick(e,t)}),this._elems.base.addEventListener("mousemove",e=>{let t={x:e.pageX,y:e.pageY};this._onHover(e,t)}),window.requestAnimationFrame(()=>{this._renderFrame()})}_onClick(e,t){this._handleEvent(n.EventTypeEnum.CLICK,t,e)}_onHover(e,t){this._handleEvent(n.EventTypeEnum.HOVER,t,e)}_handleEvent(e,t,i){let s;for(s of this._layers)s&&s.handleEvent(e,t,i)}convertRelativePointToPhysicalPoint(e){let t,i=this._elems.base.offsetLeft,s=this._elems.base.offsetTop,n=this._elems.base.offsetWidth,r=this._elems.base.offsetHeight;return t={x:(e.x-this._relativeView.x)*n/this._relativeView.w+i,y:(e.y-this._relativeView.y)*r/this._relativeView.h+s},t}convertPhysicalPointToRelativePoint(e){let t,i=this._elems.base.offsetLeft,s=this._elems.base.offsetTop,n=this._elems.base.offsetWidth,r=this._elems.base.offsetHeight;return t={x:(e.x-i)*this._relativeView.w/n+this._relativeView.x,y:(e.y-s)*this._relativeView.h/r+this._relativeView.y},t}convertAbsolutePointToRelativePoint(e){let t;return t={x:l.roundToPlace((e.x-this._relativeView.x)*this._zoomFactor.x,10),y:l.roundToPlace((e.y-this._relativeView.y)*this._zoomFactor.y,10)},t}convertRelativePointToAbsolutePoint(e){let t;return t={x:l.roundToPlace(e.x/this._zoomFactor.x+this._relativeView.x,10),y:l.roundToPlace(e.y/this._zoomFactor.y+this._relativeView.y,10)},t}convertAbsoluteRectToRelativeRect(e){let t={x:e.x,y:e.y},i=this.convertAbsolutePointToRelativePoint(t),s={x:e.x+e.w,y:e.y+e.h},n=this.convertAbsolutePointToRelativePoint(s);return{x:i.x,y:i.y,w:n.x-i.x,h:n.y-i.y}}debugRelativeDimensions(){console.log("CANVAS DIMENSIONS:"),console.log(Math.round(this.relativeView.x)+", "+Math.round(this.relativeView.y)),console.log(Math.round(this.relativeView.w)+" x "+Math.round(this.relativeView.h))}}t.HTML5Canvas=u},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(18),n=i(9),r=i(31),o=i(13);class a extends s.CanvasElement{constructor(e,t,i){let s;super(e),s=r.isNumber(i)?{x:i,y:i}:i,this._dimensions={x:t.x-s.x,y:t.y-s.y,w:2*s.x,h:2*s.y},this._center=t,this._radius=s,this._initializeRects()}get type(){return n.ElementType.Circle}_onDraw(e){e.beginPath(),e.arc(this._displayDimensions.x+this._displayRadius.x,this._displayDimensions.y+this._displayRadius.y,this._displayRadius.x,0,2*Math.PI),e.fill(),this._restoreStyle(e)}updateDimensions(e){super.updateDimensions(e),this._displayRadius={x:this._radius.x*this._canvas.zoomFactor.x,y:this._radius.y*this._canvas.zoomFactor.y}}_debugDimensions(){console.log("CIRCLE:"),console.log("center pt: "+Math.round(this._displayDimensions.x+this._displayRadius.x)+", "+Math.round(this._displayDimensions.y+this._displayRadius.y)),console.log("radius: "+Math.round(this._displayRadius.x)),this._canvas.debugRelativeDimensions()}_cloneForEffect(e){let t={x:this._dimensions.x+this._radius.x,y:this._dimensions.y+this._radius.y},i=o.clonePoint(this._radius);return new a(e,t,i)}_scale(e){this._isEffect&&(super._scale(e),this._radius={x:this._radius.x*e,y:this._radius.y*e})}}t.CircleElement=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(18),n=i(9),r=i(13),o=i(40);class a extends s.CanvasElement{constructor(e,t){super(e),this._initializeRects(),t?(this._points=t,this._updateExtremaFromPoints()):this._points=[]}get type(){return n.ElementType.Path}_initializeRects(){this._dimensions={x:0,y:0,w:0,h:0},super._initializeRects(),this._needsInitialDimensions=!0}addPoint(e){this._points.push(e),this._updateExtremaFromPoint(e)}_updateExtremaFromPoints(){let e;for(e of this._points)this._updateExtremaFromPoint(e)}_updateExtremaFromPoint(e){this._needsInitialDimensions||e.x<this._dimensions.x?this._dimensions.x=e.x:e.x>this._dimensions.x+this._dimensions.w&&(this._dimensions.w=e.x-this._dimensions.x),this._needsInitialDimensions||e.y<this._dimensions.y?this._dimensions.y=e.y:e.y>this._dimensions.y+this._dimensions.h&&(this._dimensions.h=e.y-this._dimensions.y),this._needsInitialDimensions=!1}_onDraw(e){let t;for(t of(e.beginPath(),this._displayPoints))e.lineTo(t.x,t.y);e.closePath(),e.fill()}updateDimensions(e){let t;for(t of(super.updateDimensions(e),this._displayPoints=[],this._points)){let i={x:(t.x-e.x)*this._canvas.zoomFactor.x,y:(t.y-e.y)*this._canvas.zoomFactor.y};this._displayPoints.push(i)}}adjustDimensions(e){if(this._isEffect)return;let t;for(t of(super.adjustDimensions(e),this._points))t.x+=e.x,t.y+=e.y}_cloneForEffect(e){return new a(e,r.clonePointArray(this._points))}_scale(e){if(!this._isEffect)return;let t,i={x:this._dimensions.x+this._dimensions.w/2,y:this._dimensions.y+this._dimensions.h/2},s=[];for(t of this._points){let n=this._scalePoint(t,i,e);s.push(n)}this._points=s,this._updateExtremaFromPoints()}_scalePoint(e,t,i){let s=o.getAngle(t,e),n=o.getDistance(t,e)*i;return o.getEndPoint(t,s,n)}}t.PathElement=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(18),n=i(9),r=i(13);class o extends s.CanvasElement{constructor(e,t){super(e),this._type=n.ElementType.Rectangle,this._borderRadius=0,this._dimensions=t,this._initializeRects()}get type(){return n.ElementType.Rectangle}set borderRadius(e){this._borderRadius=e}_onDraw(e){0===this._borderRadius?this._unroundedRect(e):this._roundedRect(e)}_unroundedRect(e){e.fillRect(this._displayDimensions.x,this._displayDimensions.y,this._displayDimensions.w,this._displayDimensions.h)}_roundedRect(e){e.beginPath();let t=this._displayDimensions,i=this._displayBorderRadius;e.moveTo(t.x+i.x,t.y),e.lineTo(t.x+t.w-i.x,t.y),e.quadraticCurveTo(t.x+t.w,t.y,t.x+t.w,t.y+i.y),e.lineTo(t.x+t.w,t.y+t.h-i.y),e.quadraticCurveTo(t.x+t.w,t.y+t.h,t.x+t.w-i.x,t.y+t.h),e.lineTo(t.x+i.x,t.y+t.h),e.quadraticCurveTo(t.x,t.y+t.h,t.x,t.y+t.h-i.y),e.lineTo(t.x,t.y+i.y),e.quadraticCurveTo(t.x,t.y,t.x+i.x,t.y),e.closePath(),e.fill()}updateDimensions(e){super.updateDimensions(e),this._displayBorderRadius={x:this._borderRadius*this._canvas.zoomFactor.x,y:this._borderRadius*this._canvas.zoomFactor.y}}_cloneForEffect(e){let t=r.cloneRect(this._dimensions);return new o(e,t)}}t.RectangleElement=o},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(18),n=i(9);class r extends s.CanvasElement{constructor(e,t,i){super(e),this._type=n.ElementType.Text,this._text=t,this._dimensions={x:i.x,y:i.y,w:10,h:10},this._initializeRects(),this._addStyleChangeListener()}get type(){return n.ElementType.Text}set text(e){this._text=e}set fixed(e){this._fixed=e}_setCanvas(e){super._setCanvas(e),this._calculateTextMetrics()}_addStyleChangeListener(){this._style.addStyleChangeListener(n.StyleChangeEnum.FONT_SIZE,()=>{this._dimensions.h=this._style.fontSize})}_calculateTextMetrics(){if(!this._canvas)return;let e=this._canvas.context;this._applyStyle(e);let t=e.measureText(this._text);this._restoreStyle(e),this._dimensions.w=t.width,this._dimensions.h=this.style.fontSize,this._displayDimensions.w=t.width,this._displayDimensions.h=this.style.fontSize}_onDraw(e){e.fillText(this._text,this._displayDimensions.x,this._displayDimensions.y+(this._fixed?this._dimensions.h:this._displayDimensions.h)),this._displayDimensions.w=this._dimensions.w,this._displayDimensions.h=this._dimensions.h}_cloneForEffect(e){let t={x:this._dimensions.x,y:this._dimensions.y};return new r(e,this._text,t)}}t.TextElement=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}(i(120))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t._CodeEvent=class{constructor(){this._listeners=new Map}dispatch(e,t){let i=t;i.target=e,i.name=this._name;let s=[];s=s.concat(this._listeners.get(e)),s=s.concat(this._listeners.get(null));for(let e of s)e&&e(i)}addEventListener(e,t){t||(t=null);let i=this._listeners.get(t);i||(i=[]),i.push(e),this._listeners.set(t,i)}}},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(122)),s(i(41)),s(i(42)),s(i(125)),s(i(126))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HUE_INTERVAL=22,t.LIGHT_INTERVAL=20,t.SATURATION_INTERVAL=20,t.SATURATION_LIMITS={max:100,min:20},t.LIGHTNESS_LIMITS={max:80,min:35}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.HUE=1]="HUE",e[e.SATURATION=2]="SATURATION",e[e.LIGHTNESS=3]="LIGHTNESS",e[e.ALPHA=4]="ALPHA"}(t.HSLPiece||(t.HSLPiece={})),function(e){e[e.RED=0]="RED",e[e.GREEN=1]="GREEN",e[e.BLUE=2]="BLUE",e[e.ALPHA=3]="ALPHA"}(t.RGBEnum||(t.RGBEnum={}))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HUE_INTERVAL=22,t.LIGHT_INTERVAL=20,t.SATURATION_INTERVAL=20,t.SATURATION_LIMITS={max:100,min:20},t.LIGHTNESS_LIMITS={max:80,min:35}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(42),n=i(41);t.GlobalColor=new class{constructor(){this._usedColors={},this._innerColor=new s.HSLColor("hsl(330, 80%, 50%)")}generateColor(e,t){let i=this._usedColors[e]||"";i||(i=this._innerColor.getNextColor(t||n.HSLPieceEnum.HUE));let r=new s.HexColor(i);return e&&(this._usedColors[e]=i),r}getCurrentColor(){return this._innerColor}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(42);t.getApparentColor=function(e,t,i){let n=new s.AnyColor(e,i);return n.getApparentColor(t),n.toHexString()},t.getComplementaryColor=function(e,t){let i;t=t||45;let n=new s.AnyColor(e);return i=n.getLightness(),n.lightness=i<t?95:5,n.generateRgbValues(),n.toRgbaString()},t.hexToRgb=function(e){return new s.HexColor(e).toRgbString()},t.hexToRgba=function(e,t){return new s.HexColor(e,t).toRgbaString()},t.hslToRgb=function(e){return new s.HSLColor(e).toRgbString()},t.hslaToRgba=function(e,t){return new s.HSLColor(e,t).toRgbaString()}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}(i(128))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s;t.CustomizableCommand=class{constructor(e,t){this._onExecute=e,this._onUnexecute=t}execute(e){if(this._state===s.EXECUTED)throw new Error("already performed");if(!this._onExecute)throw new Error("no do action");return this._state=s.EXECUTED,this._onExecute(e)}unexecute(e){if(this._state!==s.EXECUTED)throw new Error("not yet performed");if(!this._onUnexecute)throw new Error("no undo action");return this._state=s.REVERSED,this._onUnexecute(e)}},function(e){e[e.ERR=0]="ERR",e[e.EXECUTED=1]="EXECUTED",e[e.REVERSED=2]="REVERSED"}(s=t.CommandState||(t.CommandState={}))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}(i(19))},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(131)),s(i(132))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.MAIN_COLOR=0]="MAIN_COLOR",e[e.FONT_COLOR=1]="FONT_COLOR",e[e.SUB_MENU_COLOR=2]="SUB_MENU_COLOR",e[e.SUB_MENU_BORDER=3]="SUB_MENU_BORDER",e[e.SUB_SUB_MENU_COLOR=4]="SUB_SUB_MENU_COLOR",e[e.SUB_SUB_MENU_BORDER=5]="SUB_SUB_MENU_BORDER"}(t.ContextMenuColors||(t.ContextMenuColors={}))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(2),n=i(10),r=i(0),o=i(5);class a extends s.Drawable{constructor(e,t,i){super({cls:"ctxMenu"}),this._addClassName("ContextMenu"),this._target=e,this._noStyles=t,this._colors=i||{menuBG:"rgba(40,40,40,1)",menuText:"#FFF",menuOptBG:"rgba(40,40,40,.9)",menuBorder:"#777",menuOptNested:"rgba(40,40,40,.85)",menuBorderNested:"#888",menuSelectedText:"#505050",menuSelectedBorder:"#999"},this._options=new n.Collection,this._createElements(),this._addEventListeners()}get base(){return this._elems.base}addOption(e,t,i){if(this._options.hasElement(e.label))return!1;e.elems||(e.elems={}),e.elems.base||(i||(i=this._elems.option_container),e.elems.base=r.createSimpleElement("","ctxOption",e.label,null,null,i),e.elems.base.onclick=e.callback),this._options.add(e.label,e);let s=!0;for(let i of t)this.addSubOption(e,i)||(s=!1);return!!s}addSubOption(e,t){return!!(e.elems||(this._options.hasElement(e.label)||this.addOption(e),e=this._getOption(e.label)))&&(!!e.elems&&(e.elems.sub_menu||this._buildSubMenu(e),void this.addOption(t,[],e.elems.sub_menu)))}_buildSubMenu(e){e.elems.sub_menu=r.createSimpleElement("","subMenu hidden","",null,null,e.elems.base),e.elems.base.innerHTML+="...",this._noStyles&&(e.elems.sub_menu.style.display="none",e.elems.base.addEventListener("mouseover",()=>{e.elems.sub_menu.style.display="block"}),e.elems.base.addEventListener("mouseout",()=>{e.elems.sub_menu.style.display="none"}))}_getOption(e){if(!e)return null;let t=this._options.getElement(e);return t?t.value:null}removeOption(e){let t,i;return i=this._options.remove(e),!!i&&(t=i.value,!!t.elems.base.parentNode&&(t.elems.base.parentNode.removeChild(t.elems.base),!0))}clearOptions(){let e,t;for(this._options.resetLoop(!0);this._options.hasNext(!0);)t=this._options.getNext(!0),t&&(e=t.value,e.elems.base.parentNode&&e.elems.base.parentNode.removeChild(e.elems.base));this._options.clear()}_addEventListeners(){a._windowListenersAdded||(window.addEventListener("contextmenu",()=>{this._hideExistingMenu()}),window.addEventListener("mousedown",()=>{this._hideExistingMenu()}),a._windowListenersAdded),this._target.addEventListener("contextmenu",e=>{let t,i;return this.erase(),!!e.ctrlKey||(e.stopPropagation(),e.preventDefault(),t=e.clientX,i=e.clientY,this.base.style.left=t+"px",this.base.style.top=i+"px",this.draw(document.body),t+this.base.offsetWidth>window.innerWidth&&(t=window.innerWidth-this.base.offsetWidth),i+this.base.offsetHeight>window.innerHeight&&(i=window.innerHeight-this.base.offsetHeight),this.base.style.left=t+"px",this.base.style.top=i+"px",!1)})}_createElements(){this._elems.option_container=r.createSimpleElement("","optionContainer","",null,null,this.base),this._setThemeColors()}_setThemeColors(){o.map(this._colors,(e,t)=>{this.setThemeColor(t,e)})}_hideExistingMenu(){a._showingMenu&&a._showingMenu.base.parentNode&&a._showingMenu.base.parentNode.removeChild(a._showingMenu.base)}}t.ContextMenu=a,a._uncoloredStyles={".ctxMenu":{backgroundColor:"<menuBG>",color:"<menuText>",fontFamily:"'Calibri Light', Helvetica",boxShadow:"1px 1px 3px 2px rgba(0,0,0,.1)",fontSize:"14px",borderRadius:"4px",paddingTop:"2px",paddingBottom:"2px",width:"10%",position:"absolute"},".ctxMenu .subMenu":{backgroundColor:"<menuOptBG>",width:"100%",top:"-2px",boxShadow:"1px 1px 1px 1px rgba(0,0,0,.1)",left:"calc(100% - 1px)",borderLeft:"1px solid <menuBorder>"},".ctxMenu .subMenu .subMenu":{backgroundColor:"<menuOptNested>",borderLeft:"1px solid <menuBorderNested>"},".ctxMenu .ctxOption":{padding:"4px 10px",cursor:"pointer",position:"relative"},".ctxMenu .ctxOption:hover":{backgroundColor:"<menuSelectedText>",color:"<menuOptBG>",borderLeft:"7px solid <menuSelectedBorder>"}}},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(134)),s(i(135)),s(i(137))},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(30)),s(i(10))},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(136)),s(i(63))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(63),n=i(19);t.LinkedList=class{constructor(){this._length=0}get length(){return this._length}add(e){return this.insert(e,this._length)}insert(e,t){if(t<0)return!1;if(t>this._length)return!1;let i=new s.LinkedNode(e),n=this._getNodeAtIdx(t),r=this._getNodeAtIdx(t-1);n?(n.previous=i,i.next=n):this._lastNode=i,r?(r.next=i,i.previous=r):this._firstNode=i,this._length+=1}remove(e){let t=this._getNodeAtIdx(e);return t?(t.previous&&(t.previous.next=t.next),t.next&&(t.next.previous=t.previous),this._lastNode===t&&(this._lastNode=t.previous),this._firstNode===t&&(this._firstNode=t.next),this._length-=1,t.data):null}findAndRemove(e){let t=this.getIndex(e);return-1!==t&&!!this.remove(t)}get(e){let t=this._getNodeAtIdx(e);return t?t.data:null}getIndex(e){let t=0,i=this._firstNode;for(;i;){if(this._isEqual(e,i.data))return t;i=i.next,t+=1}return null}contains(e){return-1!==this.getIndex(e)}_getNodeAtIdx(e){return e<0?null:e>=this._length?null:e<this._length/2?this._getNodeAtIdxForward(e):this._getNodeAtIdxBackward(e)}_isEqual(e,t){return n.isEquatable(e)&&n.isEquatable(t)?e.equals(t):e===t}_getNodeAtIdxForward(e){let t=this._firstNode;for(let i=0;i<e;i+=1)t=t.next;return t}_getNodeAtIdxBackward(e){let t=this._lastNode;for(let i=this._length-1;i>e;i-=1)t=t.previous;return t}}},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(64)),s(i(138)),s(i(44)),s(i(139))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(64);class n extends s.BinaryTree{constructor(e){super(null),this._root=new s.BinaryTree(e)}get _data(){return this._root._data}set _data(e){}add(e){for(super.add(e);!this.isBalanced();)this._rebalance()}remove(e){for(super.remove(e);!this.isBalanced();)this._rebalance()}_rebalance(){if(console.log(this.toString()),this._rebalanceSubTree("left"),this._rebalanceSubTree("right"),this.isBalanced())return;this._getSideDepth("left")>this._getSideDepth("right")?this._rotate("left"):this._rotate("right")}_rotate(e){let t=this._subTrees[e],i=this._oppositeSide(e);t._parent=this._parent,this._parent=t,t[i]?(this._subTrees[e]=t[i],this._subTrees[e]._parent=this):delete this._subTrees[e],t[i]=this}_oppositeSide(e){switch(e){case"left":return"right";case"right":return"left";default:return null}}_rebalanceSubTree(e){if(!this._isSubTreeBalanced(e))return this._subTrees[e]._rebalance()}_createSubTree(e){return new n(e)}}t.BalancedBinaryTree=n;class r extends s.BinaryTree{constructor(e){super(null),this._tree=new s.BinaryTree(e)}add(e){this._tree.add(e),console.log(this.toString()),this._tree.isBalanced()||(this._rebalance(this._tree),console.log("After Rebalance: "+this.toString()))}remove(e){this._tree.remove(e),this._tree.isBalanced()||this._rebalance(this._tree)}isBalanced(){return this._tree.isBalanced()}isComplete(){return this._tree.isComplete()}isLeafNode(){return this._tree.isLeafNode()}toString(){return this._tree.toString()}getDepth(){return this._tree.getDepth()}_rebalance(e){if(this._rebalanceSubTree(e,"left"),this._rebalanceSubTree(e,"right"),e.isBalanced())return;e._getSideDepth("left")>e._getSideDepth("right")?this._rotate(e,"left"):this._rotate(e,"right")}_rebalanceSubTree(e,t){if(e._subTrees[t]&&!e._subTrees[t].isBalanced())return this._rebalance(e._subTrees[t])}_rotate(e,t){let i=this._oppositeSide(t),s=e._subTrees[t];if(!s)return;let n=e._parent;n?n._subTrees[e._getRelationToParent()]=s:this._tree=s,s._parent=n,e._parent=s,s._subTrees[i]?(e._subTrees[t]=s._subTrees[i],e._subTrees[t]._parent=e):delete e._subTrees[t],s._subTrees[i]=e}_oppositeSide(e){switch(e){case"left":return"right";case"right":return"left";default:return null}}}t.SelfBalancingBinaryTree=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(7),n=i(44);class r extends n.Tree{add(e){0===e.length?this._handleTerminatingWord():this._handleNonTerminatingWord(e)}_handleTerminatingWord(){this._terminates=!0}_handleNonTerminatingWord(e){let t=this._splitWord(e);this._subTrees[t.firstChar]||(this._subTrees[t.firstChar]=new r(t.firstChar)),this._subTrees[t.firstChar].add(t.restOfWord)}remove(e){if(0===e.length)this._terminates=!1;else{let t=this._splitWord(e);if(!this._subTrees[t.firstChar])return;this._subTrees[t.firstChar].remove(t.restOfWord)}}exists(e){if(0===e.length)return this._terminates;let t=this._splitWord(e);return!!this._subTrees[t.firstChar]&&this._subTrees[t.firstChar].exists(t.restOfWord)}_splitWord(e){return{firstChar:e.charAt(0),restOfWord:s.rest(e,1)}}}t.Trie=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}(i(141))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(5);function n(e,t,i){if(t||(t=""),"string"==typeof e||"number"==typeof e||"boolean"==typeof e||e instanceof Date||e instanceof Function)return e.toString();let r=i?"<br>":"\n",o=i?"&nbsp;&nbsp;&nbsp;&nbsp;":"\t",a="";return a+="{",s.map(e,(e,s)=>{a+=r+o+t+s+" : "+n(e,t+o,i)}),a+=r+t+"}\n",a}t.IS_DEBUG=!1,t.printObject=function(e){let t=n(e);console.log(t)},t.getObjectString=n,t.printCallStack=function(){console.log((new Error).stack)},t.debugPoint=function(e){e.z?console.log("3D POINT: ("+e.x+", "+e.y+", "+e.z+")"):console.log("2D POINT: ("+e.x+", "+e.y+")")}},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(143)),s(i(65)),s(i(45)),s(i(66)),s(i(67)),s(i(68))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.DragEnter=0]="DragEnter",e[e.DragLeave=1]="DragLeave",e[e.Drop=2]="Drop",e[e.Move=3]="Move"}(t.DraggableFunctions||(t.DraggableFunctions={}))},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(16)),s(i(2)),s(i(145))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(2);class n extends s.Drawable{constructor(e){super(e)}_createElements(){}}t.SimpleDrawable=n},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(69)),s(i(147))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(2),n=i(10),r=i(69),o=i(30),a=i(0),l=i(1),u=i(14);class h extends s.Drawable{constructor(){super(),this._availableOptions=new n.Collection,this._availableOptions.addType=o.CollectionTypeEnum.ReplaceDuplicateKeys}get value(){return this._value}_createElements(){this._elems={},this._elems.base=a.createElement({cls:"dynamicSelect"}),this._elems.input=a.createElement({type:"input",parent:this._elems.base,eventListeners:{input:e=>{this._onQueryTextChange(e)},keydown:e=>{this._onKeyEvent(e)},blur:e=>{this._onBlur(e)},focus:e=>{this._onFocus(e)}}}),this._elems.clearBtn=a.createElement({cls:"clearBtn",content:"x",parent:this._elems.base,eventListeners:{click:()=>{this._elems.input.value=""}}}),this._elems.drawer=a.createElement({cls:"drawer collapsed",parent:this._elems.base}),this._elems.innerOptions=a.createElement({cls:"innerOptions",parent:this._elems.drawer}),this._elems.loadingIcon=a.createElement({cls:"hidden loading",parent:this._elems.drawer})}_expandDrawer(){l.removeClass(this._elems.drawer,"collapsed"),u.transition(this._elems.drawer,{height:"0",opacity:"0"},{height:"<height>",opacity:"1"},300)}_collapseDrawer(){u.transition(this._elems.drawer,{height:"<height>",opacity:"1"},{height:"0",opacity:"0"},300).then(()=>{l.addClass(this._elems.drawer,"collapsed")})}addOption(e){let t=new r.DynamicOption(e,this);-1!==this._availableOptions.add(t.id,t)&&(this._updateFiltering(this._elems.input.value),this._elems.innerOptions.appendChild(t.base))}addOptions(e){let t;for(t of e)this.addOption(t)}addEventListener(e,t){switch(e){case"select":this._selectListeners||(this._selectListeners=[]),this._selectListeners.push(t);break;case"search":this._searchListeners||(this._searchListeners=[]),this._searchListeners.push(t);break;case"change":this._changeListeners||(this._changeListeners=[]),this._changeListeners.push(t);break;default:super.addEventListener(e,t)}}_notifyChangeListeners(){let e;if(this._changeListeners)for(e of this._changeListeners)e&&e(this._elems.input.value)}_notifySelectListeners(e){let t;if(this._selectListeners)for(t of this._selectListeners)t&&t(e)}_notifySearchListeners(e){let t;if(this._searchListeners)for(t of this._searchListeners)t&&t(e)}_onQueryTextChange(e){let t=this._elems.input.value;this._updateFiltering(t),this._notifyChangeListeners(),this._query(t)}_onKeyEvent(e){let t,i=!1;switch(e.keyCode){case 13:t=this._availableOptions.getCurrent(),t?this.select(t.value):this.search(this._elems.input.value);break;case 38:for(t=this._availableOptions.getCurrent();!1===i&&this._availableOptions.hasNext(!0);){i=this._availableOptions.getNext(!0).value.hilite()}i&&t&&t.value.unhilite();break;case 40:for(t=this._availableOptions.getCurrent();!1===i&&this._availableOptions.hasNext();){i=this._availableOptions.getNext().value.hilite()}i&&t&&t.value.unhilite()}}_onBlur(e){this._collapseDrawer()}_onFocus(e){this._expandDrawer(),this._availableOptions.resetLoop()}select(e){this._collapseDrawer(),this._elems.input.value=e.display,this._value=e.id,this._elems.input.blur(),this._notifySelectListeners(e)}search(e){this._collapseDrawer(),this._elems.input.value=e,this._elems.input.blur(),this._notifySearchListeners(e)}_updateFiltering(e){let t=e.toLowerCase().split(" ");this._availableOptions.map(e=>{e.tryFilter(t)})}_query(e){e!==this._currentQuery&&(this._isQuerying?this._nextQuery=e:e&&(this._currentQuery=e,this._isQuerying=!0,l.removeClass(this._elems.loadingIcon,"hidden"),this._onQuery(e).then(()=>{this._currentQuery="",this._isQuerying=!1,l.addClass(this._elems.loadingIcon,"hidden"),this._nextQuery&&(this._query(this._nextQuery),this._nextQuery="")})))}clear(){this._elems.input.value="",this._updateFiltering(""),this._notifyChangeListeners()}}t.DynamicSelect=h,h._uncoloredStyles={"@keyframes rotate":{from:{transform:"rotate(0deg)"},to:{transform:"rotate(360deg)"}},".dynamicSelect":{position:"relative",fontFamily:"Segoe UI, Open Sans, Helvetica",nested:{input:{position:"relative",fontSize:"2em",zIndex:"3"},".clearBtn":{color:"#555",transition:"all ease-in-out .1s",position:"absolute",left:"calc(100% - 25px)",top:"0",width:"20px",height:"20px",fontSize:"20px",cursor:"pointer",transformOrigin:"50% 100%",nested:{"&:hover":{transform:"scale(1.1)"}}},".drawer":{boxShadow:"1px 1px 5px 2px rgba(0,0,0,.2)",color:"<0>",backgroundColor:"#FFF",minWidth:"200px",maxHeight:"300px",overflowY:"auto",position:"absolute",left:"0",top:"3em",display:"inline-block",zIndex:"2",nested:{".loading":{borderRadius:"100%",border:"2px transparent solid",borderTop:"2px #333 solid",animation:"rotate 1s linear infinite",width:"20px",height:"20px",marginLeft:"auto",marginRight:"auto",transition:"height ease-in-out .1s",padding:"5px",nested:{"&.hidden":{display:"none"}}},"&.collapsed":{maxHeight:"0",overflow:"hidden",opacity:"0"}}}}}}},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(149)),s(i(150))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(70);t.isEditable=function(e){return s.isNamedClass(e,"Editable")}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(2),n=i(1),r=i(0),o=i(32);class a extends s.Drawable{constructor(e){e||(e={}),e.cls=(e.cls||"")+" editable",e.isMultiline&&(e.cls+=" multiline"),super(e),this._addClassName("Editable"),this.type=e.inputType,this._value=e.value,this._defaultValue=e.defaultValue,this._isMultiline=e.isMultiline,this._addHandlers(e),this._isModifying=!1,this._createElements(),this._addListeners(),this.setThemeColor("editableLightBG",e.lightBg||"rgba(0,0,0,.1)")}get value(){return this._value}set value(e){this._value=e,this._elems.input.value=this.format(e)}_addHandlers(e){this.onValidate=e.onValidate,this.onUpdate=e.onUpdate,this.format=e.onFormat,this.parseContent=e.onParseContent,this._addDefaultFormatHandlers()}_addDefaultFormatHandlers(){this.format||this._addDefaultFormatHandler(),this.parseContent||this._addDefaultParseHandler()}_addDefaultParseHandler(){this.parseContent=function(e){return e}}_addDefaultFormatHandler(){this.format=function(e,t){if(!e){let e="";return t||(e=this._defaultValue||""),e}return e.toString()}}_shouldSkipCreateElements(){return!0}_createElements(){this._elems.base;this._elems.display=r.createElement({cls:"display unselectable",parent:this._elems.base,focusable:!0}),this._elems.input=r.createElement({type:"input",cls:"input hidden",content:"",attr:{type:this.type},parent:this._elems.base}),this._renderDisplayView()}_addListeners(){this._elems.display.addEventListener("click",e=>{this._handleFocusEvent(e)}),this._elems.display.addEventListener("focus",e=>{this._handleFocusEvent(e)}),this._elems.input.addEventListener("keypress",e=>{13===e.keyCode&&(this._isModifying&&!e.shiftKey?(this._save(),e.preventDefault()):this._isMultiline&&e.shiftKey||(e.stopPropagation(),e.preventDefault()))}),this._elems.input.addEventListener("blur",()=>{this._isModifying&&this._save()})}_handleFocusEvent(e){this._isModifying||this.modify()}_save(){let e,t=this._elems.input.value;return e=this._validate(t),e.passed?this._onValidationPassed(t):this._onValidationFailed(e.allowLeave)}_validate(e){let t;return t=this.onValidate?this.onValidate(e):{passed:!0},t}_onValidationFailed(e){return n.addClass(this._elems.input,"error"),e||(o.select(this._elems.input),this._elems.input.focus()),!1}_onValidationPassed(e){return n.removeClass(this._elems.input,"error"),this._value=this.parseContent(e),this.onUpdate&&this.onUpdate(this.value),this._hideElement(this._elems.input),this._showElement(this._elems.display),this._isModifying=!1,this._renderDisplayView(),!0}modify(){if(this._isModifying)return!1;this._isModifying=!0,this._elems.input.value=this.format(this.value,!0);let e=this._elems.display.offsetWidth;return this._elems.input.style.width=e-6+"px",this._hideElement(this._elems.display),this._showElement(this._elems.input),window.setTimeout(()=>o.select(this._elems.input),100),this._elems.input.focus(),!0}focus(){this._handleFocusEvent()}_hideElement(e){n.addClass(e,"hidden")}_showElement(e){n.removeClass(e,"hidden")}_renderDisplayView(){this._elems.display.innerHTML=this.format(this._value)}}t.Editable=a,a._uncoloredStyles={".unselectable":{userSelect:"none",MozUserSelect:"none",WebkitUserSelect:"none",khtmlUserSelect:"none",oUserSelect:"none"},".editable":{fontFamily:"Open Sans, Segoe UI, Helvetica",fontSize:"1em",cursor:"pointer",nested:{input:{fontFamily:"Open Sans, Segoe UI, Helvetica",fontSize:"1em",backgroundColor:"<editableLightBG>",border:"2px solid #AAA",minWidth:"150px",whiteSpace:"nowrap",nested:{"&:focus":{border:"2px dotted rgba(0,0,0,.4)",outline:"none"},"&.error":{borderColor:"#C30"}}},"&.multiline .input":{whiteSpace:"auto"},".display":{border:"2px solid transparent",nested:{"&:hover":{backgroundColor:"<editableLightBG>"}}},".hidden":{display:"none"}}}}},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(71)),s(i(72)),s(i(73))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}(i(153))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}(i(154))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(2),n=i(0),r=i(46);class o extends s.Drawable{constructor(e,t){super(),this._clientId=e,this._domain=t,this._loginListeners=[],this._logoutListeners=[],this._createElements()}get isLoggedIn(){return this._isLoggedIn}set isLoggedIn(e){this._isLoggedIn=e}_shouldSkipCreateElements(){return!0}_createElements(){gapi.load("auth2",()=>{gapi.auth2.init({client_id:this._clientId,hd:this._domain||"gmail.com"}).currentUser.listen(e=>{e.getBasicProfile()})}),this._elems.base=n.createElement({id:"elgoog",cls:"g-signin2"}),window.setTimeout(()=>{gapi.signin2.render("elgoog",{scope:"profile email",longtitle:!1,theme:"light",onsuccess:e=>{this._onSignIn(e)},onfailure:()=>{console.log("error occurred")}})},10)}_onSignIn(e){let t=e.getBasicProfile();if(this._googleProfile&&t.getId()===this._googleProfile.getId())return;this._googleProfile=t;let i=e.getAuthResponse().id_token;this._login(i,()=>{this._onSignedIn()},()=>{this._onSignInFailure()}),window.addEventListener("beforeunload",()=>{this.signOut()})}_onSignedIn(){this._isLoggedIn=!0;for(let e of this._loginListeners)e&&e()}_onSignInFailure(){new r.ErrorPopup("We couldn't log you in securely. Are you supposed to be here?").draw(document.body),this.signOut()}signOut(){gapi.auth2.getAuthInstance().signOut().then(()=>{this._googleProfile=null,this._logout()})}addLoginListener(e){this._loginListeners.push(e)}addLogoutListener(e){this._logoutListeners.push(e)}}t.GoogleLoginButton=o},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}(i(156))},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function o(e){try{l(s.next(e))}catch(e){r(e)}}function a(e){try{l(s.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}l((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});class n{constructor(){this._DEFAULT_SIZE=104857600}save(e,t,i){return s(this,void 0,void 0,(function*(){let s=yield this._getFileSystem(),n=yield this._getDirectoryEntry(s,i,!0),r=yield this._createFile(n,e),o=yield this._getFileWriter(r);return yield this._writeFile(o,r,t)}))}load(e,t){return s(this,void 0,void 0,(function*(){let i=yield this._getFileSystem(),s=yield this._getDirectoryEntry(i,t,!1),n=yield this._getFileEntry(s,e),r=yield this._getFile(n);return this._readFile(r)}))}deleteLocalFile(e,t){return s(this,void 0,void 0,(function*(){let i=yield this._getFileSystem(),s=yield this._getDirectoryEntry(i,e,!1),n=yield this._getFileEntry(s,t);return this._deleteFile(n)}))}createDirectory(e){return s(this,void 0,void 0,(function*(){let t=yield this._getFileSystem();return!!(yield this._getDirectoryEntry(t,e,!0))}))}getDirectory(e){return s(this,void 0,void 0,(function*(){let t=yield this._getFileSystem();return yield this._getDirectoryEntry(t,e)}))}getDirectoryContents(e,t){return s(this,void 0,void 0,(function*(){let i=yield this._getFileSystem(),s=yield this._getDirectoryEntry(i,e,t);return yield this._readDirectoryContents(s)}))}_getFileSystem(e,t){return s(this,void 0,void 0,(function*(){if(this._fileSystem&&!e)return Promise.resolve(this._fileSystem);if(window.requestFileSystem=window.requestFileSystem||window.webkitRequestFileSystem,!requestFileSystem)return Promise.reject("browser doesn't support file system");e||(e=this._DEFAULT_SIZE),t||(t=PERSISTENT),this._fileSystemType=t;let i=yield this._requestQuota(e);return yield this._requestFileSystem(t,i)}))}_requestQuota(e){return new Promise((t,i)=>{try{window.webkitStorageInfo.requestQuota(PERSISTENT,e,e=>{t(e)},e=>{this._handleError(e,i)})}catch(i){t(e)}})}_requestFileSystem(e,t){return new Promise((i,s)=>{requestFileSystem(e,t,e=>{this._fileSystem=e,i(this._fileSystem)},e=>{this._handleError(e,s)})})}_createFile(e,t){return s(this,void 0,void 0,(function*(){return yield this._getFileEntry(e,t,!0)}))}_getFileWriter(e){return new Promise((t,i)=>{e.createWriter(e=>{t(e)},e=>{this._handleError(e,i)})})}_writeFile(e,t,i,s){return new Promise((t,n)=>{e.onwriteend=()=>{0===e.length?(e.seek(0),e.write(i)):t(!0)},e.onerror=e=>{this._handleError(e,n)},s?(e.seek(e.length),e.write(i)):e.truncate(0)})}_getFileEntry(e,t,i){return new Promise((s,n)=>{e.getFile(t,{create:i,exclusive:!1},e=>{s(e)},e=>{this._handleError(e,n)})})}_getFile(e){return new Promise((t,i)=>{e.file(e=>{t(e)},e=>{this._handleError(e,i)})})}_readFile(e){return new Promise((t,i)=>{let s=new FileReader;s.onloadend=e=>{t(s.result)},s.onerror=e=>{this._handleError(e,i)},s.readAsText(e)})}_getDirectoryEntry(e,t,i){return s(this,void 0,void 0,(function*(){t=function(e){let t=0;for(;-1!==e.indexOf("..");)if(e=(e=(e=e.replace(/\.\./g,"")).replace(/\/\//g,"/")).replace(/\\\\/g,"\\"),t+=1,t>1e3)return"";return e}(t);let s=yield this._getFileSystemRoot(e),n=this._splitDirectoryPathPieces(t);for(let e of n)e&&(s=yield this._getSubDirectory(s,e,i));return s}))}_getFileSystemRoot(e){return new Promise((t,i)=>{e||i("No filesystem"),t(e.root)})}_splitDirectoryPathPieces(e){return e?e.split(/[\/\\]/g):[]}_getSubDirectory(e,t,i){return new Promise((s,n)=>{e.getDirectory(t,{create:i},e=>{s(e)},e=>{n(e)})})}_readDirectoryContents(e){return new Promise((t,i)=>{e.createReader().readEntries(e=>{t(e)},e=>{this._handleError(e,i)})})}_deleteFile(e){return new Promise((t,i)=>{e.remove(()=>{t(!0)},e=>{this._handleError(e,i)})})}_handleError(e,t){console.error(e),t&&t(e)}}t._FileStorage=n,t.FileStorage=new n},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(3)),s(i(24)),s(i(8)),s(i(4)),s(i(158)),s(i(161)),s(i(163)),s(i(166)),s(i(171))},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(47)),s(i(159)),s(i(78)),s(i(160))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(78),n=i(0);class r extends s.MultiSelectButtonField{constructor(e,t){super(e,t),r._instances.push(this)}static set options(e){if(!this._options){this._options=e;for(let e of this._instances)e._createAvailableOptions()}}get _defaultCls(){return"toggleBtns expandable"}get _addBtnLabel(){return"+ Add"}_createClonedElement(e){return new this.constructor(this._id+e,this.template)}_getValueFromField(){return this._data}_onCreateElements(){this._elems.base=n.createElement({cls:"optElement"}),this._createAvailableOptions(),this._createInput()}_createAvailableOptions(){if(this._elems.opts?(this._elems.opts.innerHTML="",this._buttons=[]):this._elems.opts=n.createElement({cls:"opts",parent:this._elems.base}),this.constructor._options)for(let e of this.constructor._options){let t=this._createAvailableOption(e);this._elems.opts.appendChild(t)}}_createAvailableOption(e){return this._createOptionElement(e)}_createInput(){let e=n.createElement({cls:"addOptWrapper",parent:this._elems.base});this._addInputField(e),this._addAddButton(e)}_addInputField(e){this._showInputField&&(this._elems.input=n.createElement({cls:"addOpt",type:"input",parent:e,eventListeners:{keydown:e=>{13===e.keyCode&&(this._addNewOption(this._elems.input.value),this._clearInputField())}}}))}_addAddButton(e){this._elems.addBtn=n.createElement({cls:"addBtn",content:this._addBtnLabel,parent:e,attr:{tabindex:"0"},eventListeners:{click:()=>{this._addNewOption(this._elems.input.value),this._clearInputField()},keydown:e=>{13===e.keyCode&&(this._addNewOption(this._elems.input.value),this._clearInputField(),this._elems.input.focus())}}})}_clearInputField(){this._elems.input&&(this._elems.input.value="")}_addNewOption(e){if(e&&this._doesElementAlreadyExist(e))return;let t=this._createNewOption(e),i=this._createAvailableOption(t);this._elems.opts.appendChild(i),this._selectBtn(i,t.value)}update(e,t){this._createAvailableOptions(),super.update(e,t)}}t.ExpandableButtonField=r,r._instances=[],r._uncoloredStyles={".optElement":{whiteSpace:"nowrap",marginTop:"10px",nested:{".opts":{display:"flex",flexGrow:"1",flexWrap:"wrap",width:"100%",nested:{".toggleBtn":{width:"auto"}}},".addOptWrapper":{display:"flex",maxWidth:"300px",fontSize:"1em",marginTop:"10px",nested:{".addOpt":{flexGrow:"1"},".addBtn":{backgroundColor:"<formTheme>",color:"#FFF",padding:"2px 10px",cursor:"pointer",width:"auto",display:"inline-block",whiteSpace:"nowrap",marginLeft:"10px",transition:"all ease-in-out .2",flexShrink:"0",borderRadius:"30px",nested:{"&:hover":{transform:"scale(1.05)"}}}}}}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(47),n=i(1);class r extends s.ToggleButtonField{get _defaultValue(){return null}get _multiSelect(){return!1}_selectBtn(e,t){if(e){if(this._selectedBtn&&n.removeClass(this._selectedBtn,"selected"),this._selectedBtn===e)return this._data=this._defaultValue,void(this._selectedBtn=null);this._data=t,this._selectedBtn=e,n.addClass(e,"selected")}}_createClonedElement(e){return new r(this._id+e,this)}_shouldBeSelected(e){return this._data===e.value}clear(){this._selectedBtn&&(n.removeClass(this._selectedBtn,"selected"),this._selectedBtn=null),this._data=this._defaultValue}}t.SingleSelectButtonField=r},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(48)),s(i(79)),s(i(33)),s(i(80)),s(i(162)),s(i(49))},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function o(e){try{l(s.next(e))}catch(e){r(e)}}function a(e){try{l(s.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}l((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(3),r=i(33),o=i(4),a=i(8),l=i(5),u=i(6),h=i(0),d=i(80),c=i(32),_=i(24),p=i(48),m=i(79);class f extends r.CollapsibleField{constructor(e,t,i){super(e,t),a.isField(t)?this._childTemplate=t.childTemplate:this._childTemplate=i,this._children=[]}get _type(){return n.FieldTypeEnum.ARRAY}get _defaultValue(){return[]}get _defaultCls(){return"array"}get childTemplate(){return this._childTemplate}_getUncoloredStyles(){return this._mergeThemes(f._uncoloredStyles,r.CollapsibleField._uncoloredStyles,o.Field._uncoloredStyles)}setThemeColor(e,t,i){super.setThemeColor(e,t),this._children&&0!==this._children.length||(a.isField(this._childTemplate)?this._childTemplate.setThemeColor(e,t,i):l.map(this._childTemplate,s=>{s.setThemeColor(e,t,i)})),l.map(this._children,s=>{s.setThemeColor(e,t,i)})}_parseFieldTemplate(e){super._parseFieldTemplate(e),this._newLabel=e.newLabel||"+ Add New Element",this._allowReordering=e.allowReordering,u.isNullOrUndefined(this._allowReordering)&&(e.allowReordering=!0)}_onCreateElements(){this._createCollapsibleTitle(),this._elems.childrenContainer=h.createElement({cls:"formChildren",parent:this._elems.base}),this._createNewButton(),this._createStyles()}_createNewButton(){this._elems.newButton=h.createElement({cls:"arrayChild new",content:this._newLabel,parent:this._elems.childrenContainer,eventListeners:{click:()=>{this._createNewChild()}}})}_createClonedElement(e){return new f(this._id+e,this)}_getValueFromField(){return this._data}update(e,t){this.clear(),e&&e.map(e=>{this._createNewChild().update(e,t)})}_createNewChild(){let e=this._generateChildElement();return this._addNewChildListeners(e),this._finalizeNewChild(e),e}_generateChildElement(){let e,t=this._children.length;return e=m.isArrayChildElement(this._childTemplate)?this._cloneFormElement(this._childTemplate,this._id+"|"+t.toString()):new d.ArrayChildField(this._id+"|"+t.toString(),this._childTemplate,{allowReordering:this._allowReordering}),e}_finalizeNewChild(e){this._applyColors(e),this._children.push(e),c.removeElement(this._elems.newButton),e.draw(this._elems.childrenContainer),this._elems.childrenContainer.appendChild(this._elems.newButton),window.setTimeout(()=>{e.focus()},300)}_addNewChildListeners(e){e.addOrderingListener(this),_.formEventHandler.addEventListener(_.FORM_ELEM_CHANGE,{func:t=>{t.context.key===e.id&&window.setTimeout(()=>{this._updateInternalData(!0),this._dispatchChangeEvent(e.id)},0)},uniqueId:this.id+"|"+e.id,target:e})}_updateInternalData(e){return s(this,void 0,void 0,(function*(){let t=[],i=[];for(let s of this._children)i.push(this._updateInternalField(s,t,e));return yield Promise.all(i),t}))}_updateInternalField(e,t,i){return s(this,void 0,void 0,(function*(){if(u.isNullOrUndefined(e))return Promise.resolve();let s=yield e.save(i);if(u.isNullOrUndefined(s))return Promise.resolve();t.push(s)}))}save(e){return s(this,void 0,void 0,(function*(){return this._data=yield this._updateInternalData(e),this._data}))}canSave(){let e={hasErrors:!1,hasMissingRequired:!1};return l.map(this._children,t=>{let i=t.canSave();e.hasErrors=e.hasErrors||i.hasErrors,e.hasMissingRequired=e.hasMissingRequired||i.hasMissingRequired},()=>e.hasErrors&&e.hasMissingRequired),e}clear(){this._elems.childrenContainer.innerHTML="",this._children=[]}onChangeOrder(e,t,i){let s;for(let t=0;t<this._children.length;t+=1)this._children[t]===e&&(s=t);let n=u.isNullOrUndefined(i)?s+t:i;n<0&&(n=0),n>=this._children.length&&(n=this._children.length-1),this._children.splice(s,1),this._children.splice(n,0,e);let r=this._elems.childrenContainer.children[s],o=this._elems.childrenContainer.children[n+(t===p.DirectionType.FORWARD?1:0)];this._elems.childrenContainer.removeChild(r),o?this._elems.childrenContainer.insertBefore(r,o):this._elems.childrenContainer.appendChild(r)}focus(){if(!this._children)return!1;for(let e of this._children)if(e&&e.focus())return!0;return!1}getField(e){if(e===this._id)return this;let t;for(let i of this._children){if(t)break;t=i.getField(e)}return t}}t.ArrayField=f,f._uncoloredStyles={".kipFormElem.array":{nested:{"> .formChildren":{display:"grid",gridTemplateColumns:"1fr 1fr 1fr",gridColumnGap:"10px",gridRowGap:"10px"},".array .formChildren":{gridTemplateColumns:"100%"},"&.collapsed":{nested:{".kipBtn.new":{display:"none"}}},".arrayChild.new":{border:"1px dashed <formSubTheme>",cursor:"pointer",opacity:"0.5",backgroundColor:"#FFF",fontSize:"1.3em",display:"flex",justifyContent:"center",alignItems:"center",color:"<formSubTheme>",userSelect:"none",webkitUserSelect:"none",MozUserSelect:"none",msUserSelect:"none",nested:{".mobile &":{width:"calc(100% - 20px)"},"&:hover":{opacity:"1"}}}}}}},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(81)),s(i(164)),s(i(165))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(4),n=i(3),r=i(8);class o extends s.Field{get _type(){return n.FieldTypeEnum.FILE_UPLOAD}get _defaultCls(){return"file"}get _defaultValue(){return null}_parseFieldTemplate(e){super._parseFieldTemplate(e),this._attr=e.attr}_onCreateElements(){this._createStandardLabel(this._elems.base),this._elems.input=r.createInputElement("","","file",this._data,null,null,this._elems.base)}_getValueFromField(){return this._elems.input.files}_createClonedElement(e){return new o(this.id+e,this)}}t.FileUploadField=o},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function o(e){try{l(s.next(e))}catch(e){r(e)}}function a(e){try{l(s.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}l((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(81),r=i(0),o=i(6),a=i(8);class l extends n.FilePathField{get _defaultCls(){return"photopath"}_onCreateElements(){this._elems.photoWrapper=r.createSimpleElement("","photoWrapper","",null,null,this._elems.base),this._elems.display=r.createElement({type:"img",cls:"photo",attr:{src:this._data},parent:this._elems.photoWrapper}),this._elems.overlay=r.createSimpleElement("","photoOverlay","",null,null,this._elems.photoWrapper),this._elems.linkBtn=r.createSimpleElement("","photoBtn link","CHANGE LINK",null,null,this._elems.overlay),this._elems.linkBtn.addEventListener("click",()=>{let e=window.prompt("What should the link be set to?",this._data);e!==this._data&&(o.isNullOrUndefined(e)||(this._tempLink=e,this._changeEventFired()))}),this._elems.input=a.createInputElement(this._id+"|input","photoInput","file","",null,null,this._elems.overlay),this._elems.uploadBtn=a.createLabelForInput("UPLOAD",this._id+"|input","photoBtn upload",this._elems.overlay),this._elems.input.addEventListener("change",()=>{this._changeEventFired(),this._onFileSelected()})}_createClonedElement(e){return new l(this.id+e,this._config)}update(e,t){this._files=null,e||(e=""),this._data=e,this._elems.display.src=e}_onFileSelected(){let e;this._files&&(e=this._files[0],e&&this._readFile(e).then(e=>{this._elems.display.src=e}))}_onLinkChange(){let e=super._onLinkChange();return this._elems.display.src=e,e}clear(){this._data="",this._elems.display.src=""}save(e){return s(this,void 0,void 0,(function*(){if(!e){if(this._files&&this._onSaveCallback){let e=yield this._resizeImages(this._files);this._data=yield this._onSaveCallback(this._files,e)}return this._data}}))}_readFile(e,t){return s(this,void 0,void 0,(function*(){let t=new FileReader;return t.readAsDataURL(e),new Promise(e=>{t.onload=()=>{e(t.result)}})}))}_loadImage(e){return s(this,void 0,void 0,(function*(){let t=new Image;return t.src=e,new Promise(e=>{t.onload=()=>{e(t)}})}))}_renderOnCanvas(e){return s(this,void 0,void 0,(function*(){let t=r.createElement({type:"canvas"});return t.width=this._config.maxSize,t.height=this._config.maxSize,e.width>e.height?t.height=e.height*this._config.maxSize/e.width:e.height>e.width&&(t.width=e.width*this._config.maxSize/e.height),t.getContext("2d").drawImage(e,0,0,t.width,t.height),new Promise(e=>{t.toBlob(t=>{e(t)})})}))}_resizeImages(e){return s(this,void 0,void 0,(function*(){if(!this._config.maxSize)return Promise.resolve([]);let t=[];for(let i=0;i<e.length;i+=1){let s=yield this._resizeImage(e[i],t);t.push(s)}return t}))}_resizeImage(e,t){return s(this,void 0,void 0,(function*(){let t=yield this._readFile(e),i=yield this._loadImage(t);return yield this._renderOnCanvas(i)}))}}t.PhotoPathField=l,l._uncoloredStyles={".kipFormElem.photopath .photoOverlay":{backgroundColor:"rgba(0,0,0,.5)",opacity:"0",transition:".1s opacity ease-in-out",position:"absolute",display:"flex",flexDirection:"column",cursor:"pointer",width:"100%",height:"100%",left:"0",top:"0",justifyContent:"center",alignItems:"center",borderRadius:"100%"},".kipFormElem.photopath .photoWrapper:hover .photoOverlay":{opacity:"1"},".kipFormElem.photopath .photoWrapper":{width:"100px",height:"100px",borderRadius:"50px",border:"1px solid <formTheme>",overflow:"hidden",position:"relative"},".kipFormElem.photopath .photoWrapper img":{width:"100%"},".kipFormElem.photopath .photoWrapper .photoBtn":{width:"100%",backgroundColor:"<formTheme>",color:"#FFF",textAlign:"center",fontSize:"0.7em",cursor:"pointer",marginTop:"6px",opacity:"0.8"},".kipFormElem.photopath .photoWrapper .photoBtn:hover":{opacity:"1"},".kipFormElem.photopath .photoWrapper input[type='file']":{display:"none"}}},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(25)),s(i(167)),s(i(168)),s(i(169)),s(i(170))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(25);class n extends s._Form{}t.EmbeddedForm=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(25),n=i(1);class r extends s._Form{_getUncoloredStyles(){return this._mergeThemes(r._uncoloredStyles,s._Form._uncoloredStyles)}_createBase(){let e=super._createBase();return n.addClass(e,"fullscreen"),e}}t.FullScreenForm=r,r._uncoloredStyles={".kipForm.fullscreen":{position:"fixed",left:"0",top:"0",width:"100%",height:"100%",display:"flex",flexDirection:"column",justifyContent:"center",alignItems:"center",backgroundColor:"<formBackgroundTheme>",nested:{".background":{maxWidth:"1000px",backgroundColor:"#FFF",height:"100%",padding:"15px",boxSizing:"border-box"},".sectionHeaderContainer":{justifyContent:"center",nested:{".sectionHeader":{textAlign:"center"},".caret":{marginLeft:"5px"}}}}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(25),n=i(1);class r extends s._Form{_getUncoloredStyles(){return this._mergeThemes(r._uncoloredStyles,s._Form._uncoloredStyles)}_createBase(){let e=super._createBase();return n.addClass(e,"inline"),e}_createPostForm(){return null}_onFormChange(e){this._isFormChangeForMe(e)&&this.trySave()}}t.InlineForm=r,r._uncoloredStyles={".kipForm.inline":{display:"flex",nested:{".formChildren.flex .kipFormElem":{marginRight:"20px"}}}}},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function o(e){try{l(s.next(e))}catch(e){r(e)}}function a(e){try{l(s.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}l((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(25),r=i(1),o=i(0),a=i(11);class l extends n._Form{_getUncoloredStyles(){return this._mergeThemes(l._uncoloredStyles,n._Form._uncoloredStyles)}_createBase(){let e=super._createBase();return r.addClass(e,"popup"),r.addClass(e,"hidden"),this._isHidden=!0,e}_createPreForm(){return this._elems.overlay=o.createElement({cls:"formOverlay",parent:this._elems.base}),super._createPreForm(),this._elems.closeButton=o.createElement({cls:"close kipBtn",content:"&#x2715;",eventListeners:{click:()=>s(this,void 0,void 0,(function*(){yield a.wait(10),this.tryCancel()}))}}),this._createTitle(),this._elems.overlay}_createTitle(){o.createElement({cls:"titleBar",children:[{cls:"formTitle",content:this._config.hideTitle?"":this._config.label},this._elems.closeButton],parent:this._elems.background}),this._config.hideTitle=!0}trySave(){const e=Object.create(null,{trySave:{get:()=>super.trySave}});return s(this,void 0,void 0,(function*(){let t=e.trySave.call(this);return this.hide(),t}))}tryCancel(e){let t=super.tryCancel();return this.hide(),t}show(){this._isHidden&&(r.removeClass(this._elems.base,"hidden"),this._isHidden=!1)}hide(){this._isHidden||(r.addClass(this._elems.base,"hidden"),this._isHidden=!0)}}t.PopupForm=l,l._uncoloredStyles={".kipForm.popup":{position:"fixed",left:"0",top:"0",margin:"0",padding:"0",width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center",nested:{"&.hidden":{display:"none"},".formOverlay":{position:"absolute",width:"100%",height:"100%",top:"0",left:"0",backgroundColor:"rgba(0,0,0,.6)"},".background":{boxShadow:"1px 1px 8px 3px rgba(0,0,0,.2)",overflow:"hidden",borderRadius:"3px",backgroundColor:"#FFF",minWidth:"40%",maxWidth:"90%",maxHeight:"90%",position:"relative",display:"flex",flexDirection:"column",nested:{".titleBar, .kipBtns":{display:"flex",backgroundColor:"<formSubTheme>",color:"#FFF",padding:"3px 20px",alignItems:"center"},".close.kipBtn":{fontSize:"1.5em"},".formTitle":{flexGrow:"1",fontSize:"1.5em"},".formContent":{overflowY:"auto",padding:"15px",maxWidth:"1000px"},".kipBtns .kipBtn":{backgroundColor:"transparent",border:"1px solid #FFF",fontSize:"1em",color:"#FFF",nested:{"&.primary":{fontSize:"1.2em"}}}}}}}}},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(172)),s(i(173)),s(i(174)),s(i(175)),s(i(176)),s(i(83)),s(i(177)),s(i(178)),s(i(179)),s(i(180)),s(i(181)),s(i(182)),s(i(183))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(4),n=i(3),r=i(8),o=i(0);class a extends s.Field{get _type(){return n.FieldTypeEnum.CHECKBOX}get _defaultValue(){return!1}get _defaultCls(){return"check"}get _defaultLayout(){return n.FormElementLayoutEnum.LABEL_AFTER}_getUncoloredStyles(){return this._mergeThemes(a._uncoloredStyles,s.Field._uncoloredStyles)}_onCreateElements(){this._createStandardInput(),this._elems.lbl=r.createLabelForInput("",this._id+"|input","",this._elems.base),this._elems.inputBox=o.createElement({cls:"inputBox",parent:this._elems.lbl,attr:{tabindex:0},eventListeners:{keypress:e=>{13!==e.keyCode&&32!==e.keyCode||(this._elems.input.checked=!this._elems.input.checked)}}}),this._elems.inputInnerBox=o.createElement({cls:"innerInputBox",parent:this._elems.inputBox}),this._elems.innerLbl=o.createSimpleElement("","innerLbl",this._config.label,null,null,this._elems.lbl),this._handleStandardLayout()}_getValueFromField(){return this._elems.input.checked}_createClonedElement(e){return new a(this._id+e,this)}update(e,t){this._data=e,this._elems.input.checked=e}}t.CheckboxField=a,a._uncoloredStyles={'.kipFormElem input[type="checkbox"]':{display:"none",zoom:"1.5",width:"18px",height:"18px",margin:"0",marginRight:"5px",border:"1px solid <formTheme>"},".kipFormElem input[type='checkbox'] + label":{display:"flex"},'.kipFormElem input[type="checkbox"] + label .inputBox':{width:"18px",height:"18px",margin:"0",marginRight:"5px",border:"1px solid <formTheme>",position:"relative",boxSizing:"content-box",flexShrink:"0",marginTop:"4px"},".kipFormElem input[type='checkbox'] + label .inputBox .innerInputBox":{position:"absolute",width:"0",height:"0",left:"9px",top:"9px",backgroundColor:"<formTheme>",transition:"all ease-in-out .1s"},".kipFormElem input[type='checkbox']:checked + label .inputBox .innerInputBox, .kipFormElem input[type='checkbox']:checked + label:hover .inputBox .innerInputBox":{left:"2px",top:"2px",width:"14px",height:"14px"},".kipFormElem input[type='checkbox'] + label:hover .inputBox .innerInputBox":{left:"4px",top:"4px",width:"10px",height:"10px",opacity:"0.7"},".kipFormElem.check input[type='checkbox'] + label .innerLbl":{display:"flex",flexDirection:"column",justifyContent:"center",fontSize:"0.9em",paddingTop:"3px"}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(4),n=i(3);class r extends s.Field{get _type(){return n.FieldTypeEnum.COLOR}get _defaultValue(){return"#000000"}get _defaultCls(){return"color"}_onCreateElements(){this._createStandardLabeledInput(),this._handleStandardLayout()}_getValueFromField(){return this._elems.input.value}_createClonedElement(e){return new r(this._id+e,this)}}t.ColorField=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(4),n=i(3),r=i(20);class o extends s.Field{get _type(){return n.FieldTypeEnum.DATE}get _defaultValue(){return null}get _defaultCls(){return"date"}_onCreateElements(){this._createStandardLabeledInput(),this._handleStandardLayout()}_getValueFromField(){let e=this._elems.input.value;return r.inputToDate(e)}_createClonedElement(e){return new o(this._id+e,this)}update(e,t){this._data=e,this._elems.input&&this._data&&(this._elems.input.value=r.inputDateFmt(e))}_testEquality(e){return 0===r.dateDiff(e,this._data)}}t.DateField=o},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(4),n=i(3),r=i(0),o=i(8),a=i(20);class l extends s.Field{get _type(){return n.FieldTypeEnum.DATE_TIME}get _defaultValue(){return null}get _defaultCls(){return"dateTime"}_onCreateElements(){this._createStandardLabel(this._elems.base),this._elems.inputWrapper=r.createSimpleElement("","inputs","",null,null,this._elems.base);let e=r.createElement({cls:"dateWrapper",parent:this._elems.inputWrapper});r.createSimpleElement("","lbl","Date: ",null,null,e);this._elems.dateInput=o.createInputElement("","dateInput","date",this._data,null,null,e),this._elems.dateInput.addEventListener("change",()=>{this._changeEventFired()});let t=this._data?a.shortTime(this._data):"",i=r.createElement({cls:"timeWrapper",parent:this._elems.inputWrapper});r.createSimpleElement("","lbl","Time: ",null,null,i);this._elems.timeInput=o.createInputElement("","timeInput","time",t,null,null,i),this._elems.timeInput.addEventListener("change",()=>{this._changeEventFired()})}_getValueFromField(){let e=this._elems.timeInput.value,t=this._elems.dateInput.value;return a.inputToDate(t,e)}_createClonedElement(e){return new l(this._id+e,this)}update(e,t){this.clear(),this._data=e,this._data&&(this._elems.dateInput&&(this._elems.dateInput.value=a.inputDateFmt(e)),this._elems.timeInput&&(this._elems.timeInput.value=a.inputTimeFmt(e)))}}t.DateTimeField=l,l._uncoloredStyles={".kipFormElem.dateTime .inputs":{display:"flex",width:"100%",alignItems:"center",flexWrap:"wrap",nested:{".dateWrapper":{marginRight:"10px"}}},".kipFormElem.dateTime .inputs input":{marginRight:"20px",flexGrow:"1",minWidth:"150px"},".kipFormElem.dateTime .inputs .lbl":{flexShrink:"1",maxWidth:"50px",marginTop:"4px"}}},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function o(e){try{l(s.next(e))}catch(e){r(e)}}function a(e){try{l(s.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}l((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(4),r=i(3);class o extends n.Field{get _type(){return r.FieldTypeEnum.HIDDEN}get _defaultCls(){return"hidden"}get _defaultValue(){return null}_onCreateElements(){}_getValueFromField(){return this._data}_createClonedElement(e){return new o(this.id+e,this)}save(){return s(this,void 0,void 0,(function*(){return this._data}))}}t.HiddenField=o,o._uncoloredStyles={"kipFormElem.hidden":{display:"none"}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(3),n=i(4),r=i(8),o=i(5);class a extends n.Field{get _type(){return s.FieldTypeEnum.SELECT}get _defaultValue(){return null}get _defaultCls(){return"select"}_parseFieldTemplate(e){super._parseFieldTemplate(e),this._options=[],o.map(e.options,(e,t)=>{this._options.push({display:t,value:e})})}_onCreateElements(){let e={};for(let t=0;t<this._options.length;t+=1){let i=this._options[t];e[t]=i.display}this._elems.input=r.createSelectElement(this._id,"input",e),this._createStandardLabel(),this._handleStandardLayout()}_getValueFromField(){let e=this._elems.input.value;return this._options[e]}_createClonedElement(e){return new a(this._id+e,this)}}t.ObjectSelectField=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(4),n=i(3);class r extends s.Field{get _type(){return n.FieldTypeEnum.PASSWORD}get _defaultValue(){return""}get _defaultCls(){return"password"}_onCreateElements(){this._createStandardLabeledInput(!1),this._handleStandardLayout()}_getValueFromField(){return this._elems.input.value}_createClonedElement(e){return new r(this._id+e,this)}}t.PasswordField=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(83),n=i(3),r=i(4),o=i(0);class a extends s.NumberField{get _type(){return n.FieldTypeEnum.PERCENTAGE}get _defaultValue(){return 0}get _defaultCls(){return"percentage"}_getUncoloredStyles(){return this._mergeThemes(a._uncoloredStyles,r.Field._uncoloredStyles)}_createElements(){super._createElements(),o.createElement({cls:"percentageLbl",content:"%",parent:this._elems.base})}_createClonedElement(e){return new a(this._id+e,this)}}t.PercentageField=a,a._uncoloredStyles={".percentage":{nested:{input:{maxWidth:"3em"},".percentageLbl":{color:"#555",fontSize:"1em",marginLeft:"5px",display:"inline-block"}}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(3),n=i(4),r=i(8),o=i(7);class a extends n.Field{get _type(){return s.FieldTypeEnum.SELECT}get _defaultValue(){return null}get _defaultCls(){return"select"}_parseFieldTemplate(e){super._parseFieldTemplate(e),this._options=e.options}_onCreateElements(){this._elems.input=r.createSelectElement(this._id,"input",this._options),this._createStandardLabel(),this._handleStandardLayout()}_getValueFromField(){let e=this._elems.input.value,t=e;return o.isNumeric(e)&&(t=+e),t}_createClonedElement(e){return new a(this._id+e,this)}}t.SelectField=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(4),n=i(3),r=i(8),o=i(6);class a extends s.Field{get _type(){return n.FieldTypeEnum.TEXTAREA}get _defaultValue(){return""}get _defaultCls(){return"textarea"}_onCreateElements(){let e=r.createInputElement(this._id,"input","textarea",this._data);this._config.useGhostText&&(e.placeholder=this._config.label||""),this._elems.input=e,this._createStandardLabel(),this._handleStandardLayout()}_getValueFromField(){let e=this._elems.input.value;return e=e.replace(/\n/g,"<br>"),e=e.replace(/    /g,"&nbsp;&nbsp;&nbsp;&nbsp;"),e}_createClonedElement(e){return new a(this._id+e,this)}update(e,t){o.isNullOrUndefined(e)&&(e=""),this._data=e;let i=e.replace(/<br>/g,"\n");i=i.replace(/\&nbsp;/g," "),this._elems.input.value=i}}t.TextAreaField=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(4),n=i(3);class r extends s.Field{get _type(){return n.FieldTypeEnum.TEXT}get _defaultValue(){return""}get _defaultCls(){return"text"}_onCreateElements(){this._createStandardLabeledInput(!1),this._handleStandardLayout()}_getValueFromField(){return this._elems.input.value}_createClonedElement(e){return new r(this._id+e,this)}}t.TextField=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(4),n=i(3),r=i(20);class o extends s.Field{get _type(){return n.FieldTypeEnum.TIME}get _defaultValue(){return null}get _defaultCls(){return"time"}_onCreateElements(){this._createStandardLabeledInput(),this._handleStandardLayout()}_getValueFromField(){let e=this._elems.input.value;return r.inputToDate("",e)}_createClonedElement(e){return new o(this._id+e,this)}update(e,t){this._data=e,this._elems.input&&this._data&&(this._elems.input.value=r.inputTimeFmt(e))}}t.TimeField=o},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(51)),s(i(84)),s(i(185))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(51);class n extends s.HistoryChain{constructor(){super(),window.addEventListener("keyup",e=>{e.ctrlKey&&90===e.keyCode&&(this._shouldIgnoreEvent(e)||(e.shiftKey?this.redo():this.undo()))})}undo(){let e=this.navigateBack();e&&e.reverseFunction&&e.reverseFunction()}redo(){let e=this.navigateForward();e&&e.forwardFunction&&e.forwardFunction()}}t.UndoChain=n},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(187)),s(i(0)),s(i(85)),s(i(29)),s(i(32)),s(i(74))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(39);t.isIElemDefinition=function(e){return!!s.isInterface(e,{after_content:"",attr:null,before_content:"",children:null,cls:"",content:"",id:"",parent:null,type:""})}},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(189)),s(i(190)),s(i(191))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isIdentifiableModel=function(e){return!!e&&!!e.id}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(86);class n extends s.Serializable{constructor(e){super(e),e&&e.id?this.constructor._updateLastId(e.id):this._id=this.constructor._generateNewId()}get id(){return this._id}set id(e){this._id=e}static get _prefix(){return""}static _generateNewId(){return this._lastId+=1,this._prefix+this._lastId.toString()}static _updateLastId(e){let t=new RegExp(this._prefix,"g");e=e.replace(t,"");let i=parseInt(e);isNaN(i)?this._lastId+=1:i>this._lastId&&(this._lastId=i)}}t.IdentifiableModel=n,n._lastId=0},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});let s=0;t.generateUniqueID=function(e){return e||(e="id"),s+=1,e+s}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}(i(193))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(2),n=i(1),r=i(0);class o extends s.Drawable{constructor(e){super(),this._src=e,this._createElements()}setThemeColor(e,t,i){super.setThemeColor(e,t,i)}get src(){return this._src}set src(e){e||(e=""),this._src!==e&&(this._src=e,this._clearClasses(),this._elems.img.setAttribute("src",e),this._checkForImageLoad())}_shouldSkipCreateElements(){return!0}_createElements(){r.createElement({key:"base",cls:"imageWrapper"+(this._src?"":" noImage"),children:[{key:"img",type:"img",attr:{src:this._src?this._src:""},eventListeners:{error:()=>this._onError()}}]},this._elems)}_onError(){this.src=""}_checkForImageLoad(){this._doesImageHaveMissingSize()?window.setTimeout(()=>this._checkForImageLoad(),10):(this._measureImage(),this._resize())}_doesImageHaveMissingSize(){return!!this._src&&(!this._elems.img.offsetHeight||!this._elems.img.offsetWidth)}_measureImage(){let e=this._elems.img.offsetWidth,t=this._elems.img.offsetHeight;this._widthToHeightRatio=e/t}_resize(){this._clearClasses(),this._src?this._widthToHeightRatio<1?n.addClass(this._elems.base,"verticalImage"):this._widthToHeightRatio>1?n.addClass(this._elems.base,"horizontalImage"):n.addClass(this._elems.base,"squareImage"):n.addClass(this._elems.base,"noImage")}_clearClasses(){n.removeClass(this._elems.base,"noImage"),n.removeClass(this._elems.base,"verticalImage"),n.removeClass(this._elems.base,"horizontalImage"),n.removeClass(this._elems.base,"squareImage")}}t.ImageElement=o,o._uncoloredStyles={".imageWrapper":{backgroundColor:"<imageElementPrimary>",nested:{"&.verticalImage img":{width:"auto",height:"100%"},"&.horizontalImage img":{width:"100%",height:"auto"},"&.squareImage img":{width:"100%",height:"100%"},"&.noImage":{display:"none",nested:{img:{display:"none"}}}}}}},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(195)),s(i(88))},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function o(e){try{l(s.next(e))}catch(e){r(e)}}function a(e){try{l(s.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}l((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(88);class r extends n.DataManager{constructor(){super(),this._inFlight={}}_createAndAddDefault(e){let t=this.create(e);this.add(t)}getOrCreate(e){return s(this,void 0,void 0,(function*(){if(!e)throw new Error("no ID provided");let t=this.get(e);return t||(this._inFlight[e]?this._inFlight[e]:(this._inFlight[e]=this._loadAndCreate(e),this._inFlight[e]))}))}_loadAndCreate(e){return s(this,void 0,void 0,(function*(){let t=yield this.load(e);if(!t)throw new Error("no data found for id '"+e+"'");let i=this.create(t);return this.add(i),i}))}}t.AsyncManager=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(40),n=i(12),r=i(0),o=i(29);function a(e,t,i,o,a){let l,u,h,d,c;return u=s.getDistance(e,t),l=s.getAngle(e,t),d={position:"absolute",height:"1px","transform-origin":"0px 0px"},n.createClass(".angledLine",d),h=r.createSimpleElement("","angledLine"),h.style.left=e.x+"px",h.style.top=e.y+"px",h.style.width=u+"px",h.style.transform="rotate("+l+"deg)",i&&i.appendChild(h),o&&(c=r.createSimpleElement("","lbl",o),a&&(c.style.transform="rotate("+-1*l+"deg)",c.style.transformOrigin="(0, 0)"),h.appendChild(c)),h}t.arrangeRadially=function(e,t,i,n){let r,o,a=(n=n||360)-(i=i||0),l=a/t.length,u=0,h={x:e.offsetWidth/2,y:e.offsetHeight/2};for(r of t){let e=Math.max(r.offsetWidth,r.offsetHeight),i=a/t.length,n=180-i,o=e*Math.sin(s.degreesToRadians(n))/Math.sin(s.degreesToRadians(i));o>u&&(u=o)}for(o=0;o<t.length;o+=1){let e=s.getEndPoint(h,i+l*o,u);console.log(e),r=t[o],r.style.left=e.x-r.offsetWidth/2+"px",r.style.top=e.y-r.offsetHeight/2+"px"}},t.drawLine=a,t.updateLine=function(e,t){let i={x:parseInt(e.style.left),y:parseInt(e.style.top)},n=s.getDistance(i,t),r=s.getAngle(i,t);return e.style.width=n+"px",e.style.transform="rotate("+r+"deg)",e},t.connectElements=function(e,t,i,s){let n,r,l,u,h,d,c;return c=o.findCommonParent(e,t),l=o.globalOffsetLeft(e,c)+e.offsetWidth/2,u=o.globalOffsetLeft(t,c)+t.offsetWidth/2,h=o.globalOffsetTop(e,c)+e.offsetHeight/2,d=o.globalOffsetTop(t,c)+t.offsetHeight/2,n={x:l,y:h},r={x:u,y:d},a(n,r,c,i,s)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}(i(87))},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(70)),s(i(26))},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(89)),s(i(200)),s(i(201))},function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,r){function o(e){try{l(s.next(e))}catch(e){r(e)}}function a(e){try{l(s.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}l((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(10),r=i(89),o=i(51),a=i(14),l=i(27);t.Navigator=class{constructor(){this._views=new n.Collection,this._history=new o.HistoryChain,window.addEventListener("popstate",()=>{this._handleState()}),this._createHeader()}get currentView(){return this._currentView}get history(){return this._history}navigateTo(e,t,i,n){return s(this,void 0,void 0,(function*(){if(i||(i={}),!this._canNavigateAway(i.isCancel))return!1;if(!(yield this._handleCurrentViewOnNavigate(i.isCancel)))return!1;let s=this._views.getValue(e);return!(!s&&!t)&&(s?l.isUpdatable(s)&&this._updateView(s,i):(s=this._createView(t,i),this._views.add(e,s)),this._handleTransition(s),this._currentView=this._views.getElement(e),n||this._updateHistory(e,i),!0)}))}_canNavigateAway(e){return!this._currentView||(!this._currentView.value||!!this._currentView.value.canNavigateAway(e))}_handleCurrentViewOnNavigate(e){return s(this,void 0,void 0,(function*(){if(!this._currentView)return!0;let t=yield this._currentView.value.onNavigateAway(e);if(!t)return!0;let i={navigationPath:null,data:t};return this._history.updateCurrentState(i),!0}))}_createView(e,t){return new e}_updateView(e,t){e.update(t.model,t)}_updateHistory(e,t){let i={navigationPath:e,url:t.url||"",title:t.title||e,data:t};this._pushHistoryState(i),this._history.push(i)}_handleTransition(e){if(e&&this._parent)switch(this._transitionType){case r.INavTransitionType.OPACITY:this._opacityTransition(e);break;default:this._noTransition(e)}}_noTransition(e){this._parent.innerHTML="",e.draw(this._parent)}_opacityTransition(e){a.transition(this._parent,{opacity:"1"},{opacity:"0"},200).then(()=>{this._parent.innerHTML="",e.draw(this._parent),a.transition(this._parent,{opacity:"0"},{opacity:"1"},200)})}_pushHistoryState(e){try{window.history.pushState(e,e.title,e.url)}catch(e){console.warn("Couldn't save history state: "+e)}}_handleState(){let e=window.history.state;e&&this.navigateTo(e.navigationPath,null,e.data)}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.ApplicationState=class{constructor(){this._models={}}getState(e){return this._models[e]}setState(e,t){this._models[e]=t}clearState(e){delete this._models[e]}}},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(61)),s(i(13)),s(i(17)),s(i(203)),s(i(5))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(7),n=i(5);t.stringify=function e(t,i,r){let o=[],a=i?"<br>":"\n",l=i?"&nbsp;&nbsp;&nbsp;&nbsp;":"\t";return r||(r=""),n.map(t,(t,n)=>{let u;switch(typeof t){case"string":u=t;break;case"number":case"boolean":u=t.toString();break;default:if(!t){u=t;break}u=t.hasOwnProperty("toString")?a+t.toString():a+e(t,i,l)}o.push(function(e,t,i){if(i)return function(e,t){return s.format("<b>{0}</b>: {1}{2}",e,t,"<br>")}(e,t);return function(e,t){return s.format("{0}: {1}\n",e,t)}(e,t)}(r+n,u,i))}),o.join("")}},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(50)),s(i(46)),s(i(205)),s(i(23)),s(i(206)),s(i(82))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(23),n=i(85);class r extends s.Popup{constructor(e){e?e.cls+=" login":e={cls:"login popup"},super(e)}set loginCallback(e){this._loginCallback=e}_getUncoloredStyles(){return this._mergeThemes(r._uncoloredStyles,s.Popup._uncoloredStyles)}_createElements(){super._createElements();let e=n.createLabeledElement({type:"input",attr:{type:"text"}},{content:"Username"});this._elems.username=e.data,this._elems.content.appendChild(e.wrapper);let t=n.createLabeledElement({type:"input",attr:{type:"password"}},{content:"Password"});this._elems.password=t.data,this._elems.content.appendChild(t.wrapper),this.addButton("Login",()=>{this.erase(),this._loginCallback&&this._loginCallback(this._elems.username.value,this._elems.password.value)}),this.addButton("Cancel",()=>{this.erase()})}erase(){super.erase(),this._elems.username.value="",this._elems.password.value=""}}t.LoginPopup=r,r._uncoloredStyles={".popup.login .wrapper + .wrapper":{marginTop:"10px"}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(23),n=i(1),r=i(14);class o extends s.Popup{constructor(e,t,i,s){super(s),n.addClass(this._elems.base,"toast"),this._showFor=i||2e3,t&&this.setTitle(t),this.addContent("","",e),this.addButton("Dismiss",()=>{this.erase()})}_getUncoloredStyles(){return this._mergeThemes(s.Popup._uncoloredStyles,o._uncoloredStyles)}draw(e,t){super.draw(e,t),r.transition(this._elems.frame,{top:"100%"},{top:"calc(100% - <height>)"},300).then(()=>{this._elems.frame.style.top=this._elems.frame.offsetTop+"px"}),window.setTimeout(()=>{this.erase()},this._showFor)}erase(){delete this._elems.frame.style.top,r.transition(this._elems.frame,{top:"calc(100% - <height>)",opacity:"1"},{top:"100%",opacity:"0"},300).then(()=>{super.erase()})}}t.ToastPopup=o,o._uncoloredStyles={".toast":{pointerEvents:"none"},".toast .overlay":{display:"none",pointerEvents:"none"},".toast .closeBtn":{display:"none"},".toast .popupButton":{pointerEvents:"auto"},".toast .frame":{width:"15%",height:"auto",boxSizing:"border-box",left:"85%"}}},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(37)),s(i(20)),s(i(43)),s(i(7))},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(209)),s(i(90)),s(i(91))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(90),n=i(91);t.Router=class{route(){this._route(n.cleanURL(),n.splitParams())}_createScriptLoader(){this._loader=new s.ScriptLoader("{0}")}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}(i(86))},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(212)),s(i(213))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(5);t.ajax=function(e){return new Promise((t,i)=>{!function(e,t,i){let n=function(){let e=null;try{e=new XMLHttpRequest}catch(t){try{e=new ActiveXObject("Msxml2.XMLHTTP")}catch(t){try{e=new ActiveXObject("Microsoft.XMLHTTP")}catch(e){return null}}}return e}();n&&(function(e,t,i){e.onreadystatechange=()=>{4===e.readyState&&(!function(e){if(e<200)return!1;if(e>=300)return!1;return!0}(e.status)?i(e.responseText):t(e.responseText))}}(n,(...e)=>t(...e),(...e)=>i(...e)),function(e,{type:t,requestUrl:i,params:n,headerParams:r}){e.open(t,i,!0),function(e,t){if(!t)return;s.map(t,(t,i)=>{e.setRequestHeader(i,t)})}(e,r);let o=null;"POST"===t&&(!function(e,t){let i;i=t instanceof FormData?"multipart/form-data":"application/json";i&&e.setRequestHeader("Content-Type",i)}(e,n),o=n);e.send(o)}(n,e))}(e,t,i)})}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(0);t.loadFile=function(e){return new Promise((t,i)=>{this._innerLoadFile(e,t,i)})},t._innerLoadFile=function(e,t,i){let s=new XMLHttpRequest;s.open("GET",e.filename),s.onreadystatechange=()=>{4==s.readyState&&200==s.status?t(s.responseText):404===s.status&&i(s.responseText)},s.send()},t.saveFile=function(e){return new Promise(t=>{!function({filename:e,content:t},i){let n;n="string"==typeof t?new Blob([t],{type:"text/plain"}):t;!function(e,t){if(window.navigator.msSaveOrOpenBlob)window.navigator.msSaveBlob(t,"u");else{let i=s.createElement({type:"a",attr:{href:window.URL.createObjectURL(t),download:e}});document.body.appendChild(i),i.click(),document.body.removeChild(i)}}(e,n)}(e)})}},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(215)),s(i(92))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(92),n=i(0);class r extends s.Shield{constructor(e){super(),this._loadingText=e||"Loading...",this._createElements()}_getUncoloredStyles(){return this._mergeThemes(r._uncoloredStyles,s.Shield._uncoloredStyles)}_shouldSkipCreateElements(){return!0}_createShieldDetails(){this._elems.wrapper=n.createElement({cls:"loadingContainer",parent:this._elems.shieldContent}),this._elems.text=n.createElement({cls:"loadingText",content:this._loadingText,parent:this._elems.wrapper}),this._elems.icon=n.createElement({cls:"loadingIcon",parent:this._elems.wrapper})}}t.LoadingShield=r,r._uncoloredStyles={".kipShield loadingContainer":{display:"flex",flexDirection:"column",justifyContent:"center",alignItems:"center"},".kipShield .loadingText":{fontFamily:'"OpenSansLight", "Helvetica"',fontSize:"1.4em",color:"#FFF"},".kipShield .loadingIcon":{border:"1px solid transparent",borderTop:"1px solid #FFF",borderRadius:"25px",width:"25px",height:"25px",animation:"rotate infinite linear 1s",margin:"auto"},"@keyframes rotate":{from:{transform:"rotate(0deg)"},to:{transform:"rotate(360deg)"}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}(i(217))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.BucketHelper=new class{bucket(e,t,...i){let s={};if(!e)return s;for(let n of e){let e=t(n,...i);s[e]||(s[e]=[]),s[e].push(n)}return s}},t.bucket=function(e,i,...s){return t.BucketHelper.bucket(e,i,...s)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}(i(27))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}(i(56))},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(221)),s(i(1)),s(i(12)),s(i(14))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.THEME_BG_COLOR_CLS="themeBGColor",t.THEME_COLOR_CLS="themeColor",t.THEME_COLOR_HOVER_CLS="themeBGHoverColor"},function(e,t,i){"use strict";var s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const n=s(i(93));t.interfaces=n;const r=s(i(94));t.svgDefinitions=r;const o=s(i(223));t.svgDrawable=o;const a=s(i(35));t.svgHelpers=a;const l=s(i(96));t.svgStyle=l;const u=s(i(230));t.elements=u;const h=s(i(99));t.additionalPaths=h},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(2),n=i(17),r=i(35),o=i(95),a=i(94),l=i(66);class u extends s.Drawable{constructor(e,t){super(),this._bounds=e||{x:0,y:0,w:0,h:0},this._initializeInternalSizing();let i=this._createDefaultOptions();this._options=n.reconcileOptions(t,i),this._createElements(),this._addEventListeners()}get view(){return window.setTimeout(()=>{this._verifyViewMeetsAspectRatio()},0),this._view}set view(e){this._view.x=e.x,this._view.y=e.y,this._view.w=e.w,this._view.h=e.h}get options(){return this._options}get style(){return this._group.style}_shouldSkipCreateElements(){return!0}_initializeInternalSizing(){this._extrema={min:{x:1e6,y:1e6},max:{x:0,y:0}},this._view={x:0,y:0,w:0,h:0}}_createDefaultOptions(){return{gutter:2,auto_resize:!0,zoom_x:.08,zoom_y:.08,pan_x:!0,pan_y:!0,prevent_events:!1}}_createElements(){this._elems.base=r.createSVG({id:this._id,attr:{width:this._bounds.w,height:this._bounds.h}});let e=new a.SVGDefinitionsElement;this._elems.definitions=e.base,this._elems.base.appendChild(this._elems.definitions),this._group=new o.GroupElement({parent:this._elems.base}),this._elems.coreGroup=this._group.base,this._elems.base.appendChild(this._group.base)}_addEventListeners(){this._options.prevent_events||(this.base.addEventListener("wheel",e=>{let t=e.deltaY;t=t>0?1:-1,this._onZoom(t)}),l.makeDraggable(this.base,{target:document.body,onMove:e=>{this._onPan(e)},isNonStandard:!0}))}_onZoom(e){let t=this._options.zoom_x*e,i=this._options.zoom_y*e,s=this._view.w*t,n=this._view.h*i;this._options.zoom_x&&(this._view.x-=s,this._view.w+=2*s),this._options.zoom_y&&(this._view.y-=n,this._view.h+=2*n),this.generateViewboxAttribute(!0)}_onPan(e){this._options.pan_x&&(this._view.x-=this.calculateSVGWidth(e.x)),this._options.pan_y&&(this._view.y-=this.calculateSVGHeight(e.y)),this.generateViewboxAttribute(!0)}set width(e){this._bounds.w=e,this._elems.base.setAttribute("width",e.toString())}set height(e){this._bounds.h=e,this._elems.base.setAttribute("height",e.toString())}generateViewboxAttribute(e){let t="";return this._view.w<0&&(this._view.w=0),this._view.h<0&&(this._view.h=0),t=this._view.x+" "+this._view.y+" "+this._view.w+" "+this._view.h,e&&(this.base.setAttribute("viewbox",t),this.base.setAttribute("viewBox",t)),t}_calculateView(){return this._view.x=this._extrema.min.x-this._options.gutter,this._view.y=this._extrema.min.y-this._options.gutter,this._view.w=this._extrema.max.x-this._extrema.min.x+2*this._options.gutter,this._view.h=this._extrema.max.y-this._extrema.min.y+2*this._options.gutter,this._verifyViewMeetsAspectRatio(),this.generateViewboxAttribute(!0),!0}_verifyViewMeetsAspectRatio(){let e=this._bounds.w/this._bounds.h,t=this._view.w/this._view.h;t<e?this._view.w=this._view.h*e:t>e&&(this._view.h=this._view.w/e)}_updateExtrema(e){e.min.x<this._extrema.min.x&&(this._extrema.min.x=e.min.x),e.min.y<this._extrema.min.y&&(this._extrema.min.y=e.min.y),e.max.x>this._extrema.max.x&&(this._extrema.max.x=e.max.x),e.max.y>this._extrema.max.y&&(this._extrema.max.y=e.max.y),this._options.auto_resize&&this._calculateView()}calculateSVGCoordinates(e){return this._convertCoordinates(e,this._view,this._bounds)}calculateScreenCoordinates(e){return this._convertCoordinates(e,this._bounds,this._view)}_convertCoordinates(e,t,i){let s,n=t.w/i.w,r=t.h/i.h;return s={x:n*(e.x-i.x)+t.x,y:r*(e.y-i.y)+t.y},s}_convertDistance(e,t,i){return e*(t/i)}calculateSVGWidth(e){return this._convertDistance(e,this._view.w,this._bounds.w)}calculateSVGHeight(e){return this._convertDistance(e,this._view.h,this._bounds.h)}calculateScreenWidth(e){return this._convertDistance(e,this._bounds.w,this._view.w)}calculateScreenHeight(e){return this._convertDistance(e,this._bounds.h,this._view.h)}addPath(e,t,i){let s=this._group.addPath(e,t,i);return this._addElementListener(s),s}addRectangle(e,t,i,s,n){let r=this._group.addRectangle(e,t,i,s,n);return this._addElementListener(r),r}addCircle(e,t,i){let s=this._group.addCircle(e,t,i);return this._addElementListener(s),s}addPerfectArc(e,t,i,s,n,r){let o=this._group.addPerfectArc(e,t,i,s,n,r);return this._addElementListener(o),o}addPieSlice(e,t,i,s,n,r){let o=this._group.addPieSlice(e,t,i,s,n,r);return this._addElementListener(o),o}addRegularPolygon(e,t,i,s){let n=this._group.addRegularPolygon(e,t,i,s);return this._addElementListener(n),n}addRegularStar(e,t,i,s,n){let r=this._group.addRegularStar(e,t,i,s,n);return this._addElementListener(r),r}addText(e,t,i,s){let n=this._group.addText(e,t,i,s);return this._addElementListener(n),n}addFlowableText(e,t,i){let s=this._group.addFlowableText(e,t,i);return this._addElementListener(s),s}addGroup(e){let t=this._group.addGroup(e);return this._addElementListener(t),t}addShape(e,t,i,s){let n=this._group.addShape(e,t,i,s);return this._addElementListener(n),n}_addElementListener(e){e.addUpdateListener(()=>{this._updateExtrema(e.extrema)})}_convertPointsToPathPoints(e,t){t||(t=1);let i=[];for(let s of e)s.x*=t,s.y*=t,i.push(s);return i}rotateElement(e,t,i){let s;return i||(s=e.measureElement(),i={x:s.x+s.w/2,y:s.y+s.h/2}),e.base.setAttribute("transform","rotate("+t+", "+i.x+", "+i.y+")"),e}clear(){this._group.clear()}}t.SVGDrawable=u},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(15);class n extends s.PathExtensionElement{_generatePoints(e){let t=[{x:-.15,y:2.95},{x:1,y:4},{x:1.25,y:4},{x:3,y:.25},{x:2.4,y:0},{x:1,y:3},{x:.3,y:2.3}];for(let i of t)i.x+=e.x,i.y+=e.y;return t}}t.CheckElement=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(15);class n extends s.PathExtensionElement{_generatePoints(){return[]}}t.CurveElement=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(15);class n extends s.PathExtensionElement{_generatePoints(e){let t=[{x:.25,y:.6},{x:1,y:0},{x:2,y:1.1},{x:3,y:0},{x:3.75,y:.6},{x:2.66,y:1.75},{x:3.75,y:2.9},{x:3,y:3.5},{x:2,y:2.5},{x:1,y:3.5},{x:.25,y:2.9},{x:1.33,y:1.75}];for(let i of t)i.x+=e.x,i.y+=e.y;return t}}t.ExElement=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(100);class n extends s.ArcElement{_shouldShowRadii(){return!0}}t.PieSliceElement=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(15);class n extends s.PathExtensionElement{_generatePoints(e){let t=[{x:2,y:2},{x:2,y:0},{x:3,y:0},{x:3,y:2},{x:5,y:2},{x:5,y:3},{x:3,y:3},{x:3,y:5},{x:2,y:5},{x:2,y:3},{x:0,y:3},{x:0,y:2}];for(let i of t)i.x+=e.x,i.y+=e.y;return t}}t.PlusElement=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(101),n=i(34);class r extends s.PolygonElement{constructor(e,t,i,s,n){super(e,t,i,n,s)}_generatePoints(e,t,i,s){let r=0,o=n.calculatePolygonInternalAngle(t)/2,a=[];for(let n=0;n<t;n+=1){let t;t=this._calculatePolygonPoint(e,r,i),r+=o,a.push(t),t=this._calculatePolygonPoint(e,r,s),r+=o,a.push(t)}return a}}t.StarElement=r},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(98)),s(i(95)),s(i(52)),s(i(97)),s(i(21)),s(i(102))},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(77)),s(i(76)),s(i(75))},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(6)),s(i(38)),s(i(39)),s(i(31))},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(53)),s(i(54)),s(i(234)),s(i(236))},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(235)),s(i(103))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(53),n=i(103);class r extends s.UnitTester{get _ui(){return this.__ui?this.__ui:(this.__ui=new n.ConsoleUnitTestUI,this.__ui)}visualTest(e){console.warn(e+" : Visual tests can't be performed through the console")}}t.ConsoleUnitTester=r},function(e,t,i){"use strict";function s(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),s(i(104)),s(i(105)),s(i(237))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(53),n=i(105);class r extends s.UnitTester{get _ui(){return this.__ui?this.__ui:(this.__ui=new n.HTMLUnitTestUI,this.__ui)}visualTest(e,t){this._ui.startSubgroup(e);for(let e of t)this._ui.addVisualTestButton(e)}}t.HTMLUnitTester=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}(i(239))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(2);class n extends s.Drawable{update(...e){}canNavigateAway(e){return!0}onNavigateAway(e){return null}}t.View=n}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,